<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="MatrixMechanisms_8cc" kind="file" language="C++">
    <compoundname>MatrixMechanisms.cc</compoundname>
    <includes refid="MatrixMechanisms_8hh" local="no">duffy/MatrixMechanisms.hh</includes>
    <includes refid="SimplePropertySet_8hh" local="no">duffy/SimplePropertySet.hh</includes>
    <includedby refid="MatrixMechanisms_8hh" local="yes">include/duffy/MatrixMechanisms.hh</includedby>
    <incdepgraph>
      <node id="32">
        <label>list</label>
      </node>
      <node id="24">
        <label>Property.hh</label>
        <link refid="Property_8hh"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>Set.hh</label>
        <link refid="Set_8hh"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>../../src/PropertyThing.cc</label>
        <link refid="PropertyThing_8cc"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>Vector.hh</label>
        <link refid="Vector_8hh"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>SimplePropertySet.hh</label>
        <link refid="SimplePropertySet_8hh"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>../../src/Property.cc</label>
        <link refid="Property_8cc"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ArrayStructure.hh</label>
        <link refid="ArrayStructure_8hh"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>Tensor.hh</label>
        <link refid="Tensor_8hh"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>duffy/MatrixMechanisms.hh</label>
        <link refid="MatrixMechanisms_8hh"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>cmath</label>
      </node>
      <node id="15">
        <label>Array.hh</label>
        <link refid="Array_8hh"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>../../src/Set.cc</label>
        <link refid="Set_8cc"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>string</label>
      </node>
      <node id="17">
        <label>../../src/Matrix.cc</label>
        <link refid="Matrix_8cc"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>map</label>
      </node>
      <node id="22">
        <label>ArrayMechanisms.hh</label>
        <link refid="ArrayMechanisms_8hh"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>../../src/FullArray.cc</label>
        <link refid="FullArray_8cc"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>Range.hh</label>
        <link refid="Range_8hh"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>../../src/SimplePropertySet.cc</label>
        <link refid="SimplePropertySet_8cc"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Matrix.hh</label>
        <link refid="Matrix_8hh"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>../../src/MatrixStructure.cc</label>
        <link refid="MatrixStructure_8cc"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>../../src/FullMatrix.cc</label>
        <link refid="FullMatrix_8cc"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>FullMatrix.hh</label>
        <link refid="FullMatrix_8hh"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>../../src/Tensor.cc</label>
        <link refid="Tensor_8cc"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>../../src/ArrayStructure.cc</label>
        <link refid="ArrayStructure_8cc"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>PropertyThing.hh</label>
        <link refid="PropertyThing_8hh"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>NumericMatrix.hh</label>
        <link refid="NumericMatrix_8hh"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>../../src/NumericMatrix.cc</label>
        <link refid="NumericMatrix_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
      <node id="1">
        <label>src/MatrixMechanisms.cc</label>
        <link refid="MatrixMechanisms_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>../../src/ArrayMechanisms.cc</label>
        <link refid="ArrayMechanisms_8cc"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>iostream</label>
      </node>
      <node id="8">
        <label>cstddef</label>
      </node>
      <node id="20">
        <label>../../src/Vector.cc</label>
        <link refid="Vector_8cc"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>../../src/Array.cc</label>
        <link refid="Array_8cc"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>../../src/Range.cc</label>
        <link refid="Range_8cc"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>FullArray.hh</label>
        <link refid="FullArray_8hh"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>set</label>
      </node>
      <node id="34">
        <label>algorithm</label>
      </node>
      <node id="6">
        <label>MatrixStructure.hh</label>
        <link refid="MatrixStructure_8hh"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>src/LatticeMechanisms.cc</label>
        <link refid="LatticeMechanisms_8cc"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/duffy/MatrixMechanisms.hh</label>
        <link refid="MatrixMechanisms_8hh"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/ExcelDriver.cc</label>
        <link refid="ExcelDriver_8cc"/>
      </node>
      <node id="9">
        <label>tests/TestNewLatticeBasic.cc</label>
        <link refid="TestNewLatticeBasic_8cc"/>
      </node>
      <node id="8">
        <label>tests/TestNewLattice.cc</label>
        <link refid="TestNewLattice_8cc"/>
      </node>
      <node id="4">
        <label>src/ExcelMechanisms.cc</label>
        <link refid="ExcelMechanisms_8cc"/>
      </node>
      <node id="12">
        <label>tests/TestSTD.cc</label>
        <link refid="TestSTD_8cc"/>
      </node>
      <node id="7">
        <label>tests/TestLatticeBasic.cc</label>
        <link refid="TestLatticeBasic_8cc"/>
      </node>
      <node id="6">
        <label>tests/director.cc</label>
        <link refid="director_8cc"/>
      </node>
      <node id="1">
        <label>src/MatrixMechanisms.cc</label>
        <link refid="MatrixMechanisms_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>tests/TestRanges.cc</label>
        <link refid="TestRanges_8cc"/>
      </node>
      <node id="10">
        <label>tests/TestIBVP.cc</label>
        <link refid="TestIBVP_8cc"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="MatrixMechanisms_8cc_1aa7b3b363509018d7f8486fbd209c9d1c" prot="public" static="no">
        <name>MatrixMechanisms_CC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="16" column="9" bodyfile="src/MatrixMechanisms.cc" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="MatrixMechanisms_8cc_1ab00f24d33b315b3567881ca4f9ae13aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V sumAbsRow</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;m, const I &amp;i)</argsstring>
        <name>sumAbsRow</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="24" column="17" bodyfile="src/MatrixMechanisms.cc" bodystart="24" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1a4d1479b88b531287426c66badbcd18cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V sumAbsColumn</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;m, const I &amp;j)</argsstring>
        <name>sumAbsColumn</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="38" column="17" bodyfile="src/MatrixMechanisms.cc" bodystart="38" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1a44ab776341a8a095e655778574b5ce8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt;</type>
        <definition>Vector&lt;V,I&gt; sumAbsRow</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;m)</argsstring>
        <name>sumAbsRow</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="54" column="22" bodyfile="src/MatrixMechanisms.cc" bodystart="54" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1afbf0607bc3db705b85a955c9cc6be698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt;</type>
        <definition>Vector&lt;V,I&gt; sumAbsColumn</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;m)</argsstring>
        <name>sumAbsColumn</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="70" column="22" bodyfile="src/MatrixMechanisms.cc" bodystart="70" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1a5736210e118bd1f67139779ad143f9ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V l1Norm</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;matrix)</argsstring>
        <name>l1Norm</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="85" column="17" bodyfile="src/MatrixMechanisms.cc" bodystart="85" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1ad97ba861ea28d23de371ca12e82dbfbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V FrobeniusNorm</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;matrix)</argsstring>
        <name>FrobeniusNorm</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="106" column="17" bodyfile="src/MatrixMechanisms.cc" bodystart="106" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1a70cd51362f5af358d655ed9c0c7d0fea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V lInfinityNorm</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;matrix)</argsstring>
        <name>lInfinityNorm</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="125" column="17" bodyfile="src/MatrixMechanisms.cc" bodystart="125" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1a2e77e0a6325bf3711530f5ac5d5d777d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet</ref>&lt; std::string, double &gt;</type>
        <definition>SimplePropertySet&lt;std::string, double&gt; allNorms</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;m)</argsstring>
        <name>allNorms</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="150" column="33" bodyfile="src/MatrixMechanisms.cc" bodystart="150" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1ab756c3f1b13fec78f42862639fb98f7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void initMatrix</definition>
        <argsstring>(Matrix&lt; V, I &gt; &amp;m, const V &amp;v)</argsstring>
        <name>initMatrix</name>
        <param>
          <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="174" column="20" bodyfile="src/MatrixMechanisms.cc" bodystart="174" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1a6f970bd30a1ac58d6f56b0737ecdb2f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt;</type>
        <definition>NumericMatrix&lt;V,I&gt; createMatrix</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;lower, const Vector&lt; V, I &gt; &amp;diagonal, const Vector&lt; V, I &gt; &amp;upper)</argsstring>
        <name>createMatrix</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>diagonal</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="189" column="29" bodyfile="src/MatrixMechanisms.cc" bodystart="189" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1a24189db52fc13554f8f681d3041308c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V quadraticForm</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;matrix, const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>quadraticForm</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="227" column="17" bodyfile="src/MatrixMechanisms.cc" bodystart="227" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1a066bb3002419c7b680967d9ca5d4d259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V RayleighQuotient</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;A, const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>RayleighQuotient</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="245" column="17" bodyfile="src/MatrixMechanisms.cc" bodystart="245" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1ac018d4a669ccf365d111f45a4adaa2dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;m1, const NumericMatrix&lt; V, I &gt; &amp;m2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="255" column="15" bodyfile="src/MatrixMechanisms.cc" bodystart="255" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1a597993d847c89c734413b05f38a9c9f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;m1, const NumericMatrix&lt; V, I &gt; &amp;m2)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="273" column="15" bodyfile="src/MatrixMechanisms.cc" bodystart="273" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1a360b70783d7c6a48829976cc98e01e35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;m1, const NumericMatrix&lt; V, I &gt; &amp;m2)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="292" column="20" bodyfile="src/MatrixMechanisms.cc" bodystart="292" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1a7843615d73e917ffc7d215e477327dc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;m1, const NumericMatrix&lt; V, I &gt; &amp;m2)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="302" column="20" bodyfile="src/MatrixMechanisms.cc" bodystart="302" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1a4a210eda4ebc2f9d623640d1b16d0988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;m1, const NumericMatrix&lt; V, I &gt; &amp;m2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="313" column="20" bodyfile="src/MatrixMechanisms.cc" bodystart="313" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1a9f5d2853990c1de5ffb4e55aafafff76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;m1, const NumericMatrix&lt; V, I &gt; &amp;m2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="332" column="20" bodyfile="src/MatrixMechanisms.cc" bodystart="332" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1a570766e15b464762973900186b753a13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool positive</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;matrix)</argsstring>
        <name>positive</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="342" column="20" bodyfile="src/MatrixMechanisms.cc" bodystart="342" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1ac9e0befc58c6791fc8b075b32a2503f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool negative</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;matrix)</argsstring>
        <name>negative</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="363" column="20" bodyfile="src/MatrixMechanisms.cc" bodystart="363" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1a5db7c0865d10f27ffacb4be16e0549cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool diagonallyDominant</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;m)</argsstring>
        <name>diagonallyDominant</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="386" column="20" bodyfile="src/MatrixMechanisms.cc" bodystart="386" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1ae87f00e282d865c094ec0f8fe2668f7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt;</type>
        <definition>NumericMatrix&lt;V,I&gt; eigenvalueBounds</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;m)</argsstring>
        <name>eigenvalueBounds</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="403" column="29" bodyfile="src/MatrixMechanisms.cc" bodystart="403" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1a4e524faf1c8db44e6d1261d2784c2795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V dominantEigenvalue</definition>
        <argsstring>(const NumericMatrix&lt; V, I &gt; &amp;A, const Vector&lt; V, I &gt; &amp;svec, const V &amp;tolerance)</argsstring>
        <name>dominantEigenvalue</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>svec</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="420" column="17" bodyfile="src/MatrixMechanisms.cc" bodystart="420" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="MatrixMechanisms_8cc_1a9e52d9c1fa369021f257e9fe009cb661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void print</definition>
        <argsstring>(const Matrix&lt; V, I &gt; &amp;mat)</argsstring>
        <name>print</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; V, I &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MatrixMechanisms.cc" line="445" column="20" bodyfile="src/MatrixMechanisms.cc" bodystart="445" bodyend="462"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>matrixmechanisms.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mechanism<sp/>functions<sp/>for<sp/>matrices.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Modification<sp/>dates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>DD<sp/>2004-4-3<sp/>Kick<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>DD<sp/>2004-4-9<sp/>Power<sp/>method,<sp/>code<sp/>review<sp/>and<sp/>round-off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>DD<sp/>2005-12-1<sp/>Extracting<sp/>a<sp/>row<sp/>fom<sp/>a<sp/>Matrix<sp/>(can<sp/>be<sp/>optmised)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>DD<sp/>2006-8-6<sp/>set_diagomnal()<sp/>commented<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Datasim<sp/>Education<sp/>BV<sp/>2004-2006</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MatrixMechanisms_CC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="MatrixMechanisms_8cc_1aa7b3b363509018d7f8486fbd209c9d1c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MatrixMechanisms_CC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="MatrixMechanisms_8hh" kindref="compound">duffy/MatrixMechanisms.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="SimplePropertySet_8hh" kindref="compound">duffy/SimplePropertySet.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sum<sp/>of<sp/>absolute<sp/>values<sp/>of<sp/>row<sp/>and<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="MatrixMechanisms_8cc_1ab00f24d33b315b3567881ca4f9ae13aa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="MatrixMechanisms_8cc_1ab00f24d33b315b3567881ca4f9ae13aa" kindref="member">sumAbsRow</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/>i)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>up<sp/>for<sp/>a<sp/>given<sp/>row<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>result<sp/>=<sp/>std::fabs(m(i,<sp/>m.<ref refid="classMatrix_1a72061ea24736a0ff90e62c1c0f40bad9" kindref="member">MinColumnIndex</ref>()));</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>m.<ref refid="classMatrix_1a72061ea24736a0ff90e62c1c0f40bad9" kindref="member">MinColumnIndex</ref>()<sp/>+<sp/>1;<sp/>j<sp/>&lt;=<sp/>m.<ref refid="classMatrix_1af6cbab02648446701a31b7bce0110af7" kindref="member">MaxColumnIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>std::fabs(m(i,j));</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="MatrixMechanisms_8cc_1a4d1479b88b531287426c66badbcd18cf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="MatrixMechanisms_8cc_1a4d1479b88b531287426c66badbcd18cf" kindref="member">sumAbsColumn</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/>j)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>up<sp/>for<sp/>a<sp/>given<sp/>column<sp/>j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>result<sp/>=<sp/>std::fabs(m(m.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>(),<sp/>j));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>m.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>()<sp/>+<sp/>1;<sp/>i<sp/>&lt;=<sp/>m.<ref refid="classMatrix_1abd8766ab01ecf06e70cdce889afba641" kindref="member">MaxRowIndex</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>std::fabs(m(i,j));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Now<sp/>Abs<sp/>sume<sp/>of<sp/>rows<sp/>and<sp/>columns<sp/>for<sp/>all<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="MatrixMechanisms_8cc_1a44ab776341a8a095e655778574b5ce8d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref><sp/><ref refid="MatrixMechanisms_8cc_1ab00f24d33b315b3567881ca4f9ae13aa" kindref="member">sumAbsRow</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref><sp/>result<sp/>(m.<ref refid="classMatrix_1a137b54c61fa1a897a903ea3c466dd271" kindref="member">Rows</ref>(),<sp/>m.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>());</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>for<sp/>all<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>m.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>();<sp/>i<sp/>&lt;=<sp/>m.<ref refid="classMatrix_1abd8766ab01ecf06e70cdce889afba641" kindref="member">MaxRowIndex</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/><ref refid="MatrixMechanisms_8cc_1ab00f24d33b315b3567881ca4f9ae13aa" kindref="member">sumAbsRow</ref>(m,<sp/>i);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="MatrixMechanisms_8cc_1afbf0607bc3db705b85a955c9cc6be698" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref><sp/><ref refid="MatrixMechanisms_8cc_1a4d1479b88b531287426c66badbcd18cf" kindref="member">sumAbsColumn</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref><sp/>result<sp/>(m.<ref refid="classMatrix_1a7e137fcf687b490b80b47269ba8c4ae6" kindref="member">Columns</ref>(),<sp/>m.<ref refid="classMatrix_1a72061ea24736a0ff90e62c1c0f40bad9" kindref="member">MinColumnIndex</ref>());</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>for<sp/>all<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>m.<ref refid="classMatrix_1a72061ea24736a0ff90e62c1c0f40bad9" kindref="member">MinColumnIndex</ref>();<sp/>j<sp/>&lt;=<sp/>m.<ref refid="classMatrix_1af6cbab02648446701a31b7bce0110af7" kindref="member">MaxColumnIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[j]<sp/>=<sp/><ref refid="MatrixMechanisms_8cc_1a4d1479b88b531287426c66badbcd18cf" kindref="member">sumAbsColumn</ref>(m,<sp/>j);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="MatrixMechanisms_8cc_1a5736210e118bd1f67139779ad143f9ad" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="MatrixMechanisms_8cc_1a5736210e118bd1f67139779ad143f9ad" kindref="member">l1Norm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>matrix)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Largest<sp/>column<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>V(0.0);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>tmp(ans);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>matrix.<ref refid="classMatrix_1a72061ea24736a0ff90e62c1c0f40bad9" kindref="member">MinColumnIndex</ref>();<sp/>j<sp/>&lt;=<sp/>matrix.<ref refid="classMatrix_1af6cbab02648446701a31b7bce0110af7" kindref="member">MaxColumnIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>matrix.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>();<sp/>i<sp/>&lt;=<sp/>matrix.<ref refid="classMatrix_1abd8766ab01ecf06e70cdce889afba641" kindref="member">MaxRowIndex</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/><ref refid="MatrixMechanisms_8cc_1a4d1479b88b531287426c66badbcd18cf" kindref="member">sumAbsColumn</ref>(matrix,<sp/>i);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&gt;<sp/>ans)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="MatrixMechanisms_8cc_1ad97ba861ea28d23de371ca12e82dbfbd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="MatrixMechanisms_8cc_1ad97ba861ea28d23de371ca12e82dbfbd" kindref="member">FrobeniusNorm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>matrix)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>ans(0.0);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>tmp(0.0);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>matrix.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>();<sp/>i<sp/>&lt;=<sp/>matrix.<ref refid="classMatrix_1abd8766ab01ecf06e70cdce889afba641" kindref="member">MaxRowIndex</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>matrix.<ref refid="classMatrix_1a72061ea24736a0ff90e62c1c0f40bad9" kindref="member">MinColumnIndex</ref>();<sp/>j&lt;=<sp/>matrix.<ref refid="classMatrix_1af6cbab02648446701a31b7bce0110af7" kindref="member">MaxColumnIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>matrix(i,<sp/>j);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>(tmp<sp/>*<sp/>tmp);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(ans);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="MatrixMechanisms_8cc_1a70cd51362f5af358d655ed9c0c7d0fea" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="MatrixMechanisms_8cc_1a70cd51362f5af358d655ed9c0c7d0fea" kindref="member">lInfinityNorm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>matrix)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Largest<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>V(0.0);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>tmp(ans);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>matrix.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>();<sp/>i<sp/>&lt;=<sp/>matrix.<ref refid="classMatrix_1abd8766ab01ecf06e70cdce889afba641" kindref="member">MaxRowIndex</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>matrix.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>();<sp/>j<sp/>&lt;=<sp/>matrix.<ref refid="classMatrix_1abd8766ab01ecf06e70cdce889afba641" kindref="member">MaxRowIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/><ref refid="MatrixMechanisms_8cc_1ab00f24d33b315b3567881ca4f9ae13aa" kindref="member">sumAbsRow</ref>(matrix,<sp/>j);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&gt;<sp/>ans)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="MatrixMechanisms_8cc_1a2e77e0a6325bf3711530f5ac5d5d777d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet&lt;std::string, double&gt;</ref><sp/><ref refid="MatrixMechanisms_8cc_1a2e77e0a6325bf3711530f5ac5d5d777d" kindref="member">allNorms</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet&lt;std::string, double&gt;</ref><sp/>result;<sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classSimplePropertySet_1a8663619c5669177f23286672ad49ceca" kindref="member">add</ref>(<ref refid="classProperty" kindref="compound">Property&lt;std::string, double&gt;</ref><sp/>(</highlight><highlight class="stringliteral">&quot;l1&quot;</highlight><highlight class="normal">,<sp/><ref refid="MatrixMechanisms_8cc_1a5736210e118bd1f67139779ad143f9ad" kindref="member">l1Norm</ref>(m)));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classSimplePropertySet_1a8663619c5669177f23286672ad49ceca" kindref="member">add</ref>(<ref refid="classProperty" kindref="compound">Property&lt;std::string, double&gt;</ref><sp/>(</highlight><highlight class="stringliteral">&quot;l2&quot;</highlight><highlight class="normal">,<sp/><ref refid="MatrixMechanisms_8cc_1ad97ba861ea28d23de371ca12e82dbfbd" kindref="member">FrobeniusNorm</ref>(m)));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classSimplePropertySet_1a8663619c5669177f23286672ad49ceca" kindref="member">add</ref>(<ref refid="classProperty" kindref="compound">Property&lt;std::string, double&gt;</ref><sp/>(</highlight><highlight class="stringliteral">&quot;linf&quot;</highlight><highlight class="normal">,<sp/><ref refid="MatrixMechanisms_8cc_1a70cd51362f5af358d655ed9c0c7d0fea" kindref="member">lInfinityNorm</ref>(m)));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="163"><highlight class="comment">template<sp/>&lt;class<sp/>V,<sp/>class<sp/>I&gt;<sp/>setDiagonal(Matrix&lt;V,I&gt;&amp;<sp/>m,<sp/>const<sp/>V&amp;<sp/>v)</highlight></codeline>
<codeline lineno="164"><highlight class="comment">{<sp/>//<sp/>All<sp/>diagonal<sp/>elements<sp/>get<sp/>the<sp/>value<sp/>v</highlight></codeline>
<codeline lineno="165"><highlight class="comment"></highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Matrix<sp/>must<sp/>be<sp/>square,<sp/>otherwise<sp/>...</highlight></codeline>
<codeline lineno="167"><highlight class="comment"></highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(I<sp/>j<sp/>=<sp/>m.MinRowIndex();<sp/>j<sp/>&lt;=<sp/>m.MaxRowIndex();<sp/>j++)</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m(j,j)<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="comment">}</highlight></codeline>
<codeline lineno="173"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="MatrixMechanisms_8cc_1ab756c3f1b13fec78f42862639fb98f7c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="MatrixMechanisms_8cc_1ab756c3f1b13fec78f42862639fb98f7c" kindref="member">initMatrix</ref>(<ref refid="classMatrix" kindref="compound">Matrix&lt;V,I&gt;</ref>&amp;<sp/>m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>v)</highlight></codeline>
<codeline lineno="175"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>All<sp/>elements<sp/>get<sp/>the<sp/>value<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>m.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>();<sp/>i<sp/>&lt;=<sp/>m.<ref refid="classMatrix_1abd8766ab01ecf06e70cdce889afba641" kindref="member">MaxRowIndex</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>m.<ref refid="classMatrix_1a72061ea24736a0ff90e62c1c0f40bad9" kindref="member">MinColumnIndex</ref>();<sp/>j<sp/>&lt;=<sp/>m.<ref refid="classMatrix_1af6cbab02648446701a31b7bce0110af7" kindref="member">MaxColumnIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m(i,j)<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="MatrixMechanisms_8cc_1a6f970bd30a1ac58d6f56b0737ecdb2f4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref><sp/><ref refid="MatrixMechanisms_8cc_1a6f970bd30a1ac58d6f56b0737ecdb2f4" kindref="member">createMatrix</ref>(</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>lower,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>diagonal,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>upper)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>matrix<sp/>based<sp/>on<sp/>the<sp/>diagonal<sp/>elements<sp/>of<sp/>a<sp/>tridiagonal<sp/>matrix;<sp/>bit<sp/>wasteful<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>space<sp/>but<sp/>who<sp/>cares!<sp/>I&apos;ve<sp/>got<sp/>a<sp/>Pentium<sp/>with<sp/>a<sp/>giga<sp/>of<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>the<sp/>indexing<sp/>as<sp/>with<sp/>LU<sp/>decomposition<sp/>routines,<sp/>i.e.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>lower<sp/>[2,<sp/>J]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>diagonal<sp/>[1,<sp/>J]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>upper<sp/>[1,<sp/>J-1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V, I&gt;</ref><sp/>result(diagonal.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>(),<sp/>diagonal.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>(),<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>values<sp/>set<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MatrixMechanisms_8cc_1ab756c3f1b13fec78f42862639fb98f7c" kindref="member">initMatrix</ref>(result,<sp/>V(0.0));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>the<sp/>&apos;extremities&apos;<sp/>of<sp/>the<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>result(result.MaxRowIndex(),<sp/>result.MaxColumnIndex())<sp/>=<sp/>diagonal[diagonal.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>()];</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>result(result.MaxRowIndex(),<sp/>result.MaxColumnIndex()<sp/>-1)<sp/>=<sp/>lower[lower.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>()];</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>result(1,<sp/>1)<sp/>=<sp/>diagonal[diagonal.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()];</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>result(1,<sp/>2)<sp/>=<sp/>upper[upper.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()];</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>the<sp/>&apos;uniform&apos;<sp/>part<sp/>of<sp/>the<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>result.MinRowIndex()<sp/>+<sp/>1;<sp/>i<sp/>&lt;=<sp/>result.MaxRowIndex()<sp/>-<sp/>1;<sp/>i++)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>diagonal<sp/>element<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result(i,<sp/>i-1)<sp/><sp/>=<sp/>lower[i];</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result(i,<sp/>i)<sp/><sp/><sp/><sp/>=<sp/>diagonal[i];</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result(i,<sp/>i+1)<sp/><sp/>=<sp/>upper[i];</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Other<sp/>results<sp/>for<sp/>vectors<sp/>and<sp/>matrces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="MatrixMechanisms_8cc_1a24189db52fc13554f8f681d3041308c4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="MatrixMechanisms_8cc_1a24189db52fc13554f8f681d3041308c4" kindref="member">quadraticForm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>V(0.0);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>matrix.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>();<sp/>i<sp/>&lt;=<sp/>matrix.<ref refid="classMatrix_1abd8766ab01ecf06e70cdce889afba641" kindref="member">MaxRowIndex</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>matrix.<ref refid="classMatrix_1a72061ea24736a0ff90e62c1c0f40bad9" kindref="member">MinColumnIndex</ref>();<sp/>j&lt;=<sp/>matrix.<ref refid="classMatrix_1af6cbab02648446701a31b7bce0110af7" kindref="member">MaxColumnIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>matrix(i,j)<sp/>*<sp/>x[i]<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="MatrixMechanisms_8cc_1a066bb3002419c7b680967d9ca5d4d259" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="MatrixMechanisms_8cc_1a066bb3002419c7b680967d9ca5d4d259" kindref="member">RayleighQuotient</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PREC:<sp/>Compatibiity,<sp/>number<sp/>of<sp/>columns<sp/>of<sp/>A<sp/>==<sp/>number<sp/>of<sp/>rows<sp/>of<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PREC:<sp/>inner<sp/>product<sp/>does<sp/>not<sp/>evaluate<sp/>to<sp/>0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="MatrixMechanisms_8cc_1a24189db52fc13554f8f681d3041308c4" kindref="member">quadraticForm</ref>(A,<sp/>x)<sp/>/<sp/><ref refid="ArrayMechanisms_8hh_1a7feb2b4cbb0c06fa9146125c0e869513" kindref="member">innerProduct</ref><sp/>(x,x);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255" refid="MatrixMechanisms_8cc_1ac018d4a669ccf365d111f45a4adaa2dc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="MatrixMechanisms_8cc_1ac018d4a669ccf365d111f45a4adaa2dc" kindref="member">operator &lt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m2)</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>m1.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>();<sp/>i<sp/>&lt;=<sp/>m1.<ref refid="classMatrix_1abd8766ab01ecf06e70cdce889afba641" kindref="member">MaxRowIndex</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>m1.<ref refid="classMatrix_1a72061ea24736a0ff90e62c1c0f40bad9" kindref="member">MinColumnIndex</ref>();<sp/>j&lt;=<sp/>m1.<ref refid="classMatrix_1af6cbab02648446701a31b7bce0110af7" kindref="member">MaxColumnIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1(i,j)<sp/>&gt;=<sp/>m2(i,j))</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="MatrixMechanisms_8cc_1a597993d847c89c734413b05f38a9c9f0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="MatrixMechanisms_8cc_1a597993d847c89c734413b05f38a9c9f0" kindref="member">operator &lt;= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m2)</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>m1.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>();<sp/>i<sp/>&lt;=<sp/>m1.<ref refid="classMatrix_1abd8766ab01ecf06e70cdce889afba641" kindref="member">MaxRowIndex</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>m1.<ref refid="classMatrix_1a72061ea24736a0ff90e62c1c0f40bad9" kindref="member">MinColumnIndex</ref>();<sp/>j&lt;=<sp/>m1.<ref refid="classMatrix_1af6cbab02648446701a31b7bce0110af7" kindref="member">MaxColumnIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1(i,j)<sp/>&gt;<sp/>m2(i,j))</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="MatrixMechanisms_8cc_1a360b70783d7c6a48829976cc98e01e35" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="MatrixMechanisms_8cc_1a360b70783d7c6a48829976cc98e01e35" kindref="member">operator &gt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m2)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m2<sp/>&lt;<sp/>m1)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="MatrixMechanisms_8cc_1a7843615d73e917ffc7d215e477327dc3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="MatrixMechanisms_8cc_1a7843615d73e917ffc7d215e477327dc3" kindref="member">operator &gt;= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m2)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m2<sp/>&lt;=<sp/>m1)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313" refid="MatrixMechanisms_8cc_1a4a210eda4ebc2f9d623640d1b16d0988" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="MatrixMechanisms_8cc_1a4a210eda4ebc2f9d623640d1b16d0988" kindref="member">operator == </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m2)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>m1.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>();<sp/>i<sp/>&lt;=<sp/>m1.<ref refid="classMatrix_1abd8766ab01ecf06e70cdce889afba641" kindref="member">MaxRowIndex</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>m1.<ref refid="classMatrix_1a72061ea24736a0ff90e62c1c0f40bad9" kindref="member">MinColumnIndex</ref>();<sp/>j&lt;=<sp/>m1.<ref refid="classMatrix_1af6cbab02648446701a31b7bce0110af7" kindref="member">MaxColumnIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1(i,j)<sp/>!=<sp/>m2(i,j))</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="MatrixMechanisms_8cc_1a9f5d2853990c1de5ffb4e55aafafff76" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="MatrixMechanisms_8cc_1a9f5d2853990c1de5ffb4e55aafafff76" kindref="member">operator != </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m2)</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1<sp/>==<sp/>m2)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Are<sp/>all<sp/>elements<sp/>of<sp/>a<sp/>matrix<sp/>positive?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="MatrixMechanisms_8cc_1a570766e15b464762973900186b753a13" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="MatrixMechanisms_8cc_1a570766e15b464762973900186b753a13" kindref="member">positive</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>matrix)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>zero<sp/>=<sp/>V(0.0);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>matrix.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>();<sp/>i<sp/>&lt;=<sp/>matrix.<ref refid="classMatrix_1abd8766ab01ecf06e70cdce889afba641" kindref="member">MaxRowIndex</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>matrix.<ref refid="classMatrix_1a72061ea24736a0ff90e62c1c0f40bad9" kindref="member">MinColumnIndex</ref>();<sp/>j&lt;=<sp/>matrix.<ref refid="classMatrix_1af6cbab02648446701a31b7bce0110af7" kindref="member">MaxColumnIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrix(i,j)<sp/>&lt;=<sp/>zero)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="MatrixMechanisms_8cc_1ac9e0befc58c6791fc8b075b32a2503f3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="MatrixMechanisms_8cc_1ac9e0befc58c6791fc8b075b32a2503f3" kindref="member">negative</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>matrix)</highlight></codeline>
<codeline lineno="364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>zero<sp/>=<sp/>V(0.0);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>matrix.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>();<sp/>i<sp/>&lt;=<sp/>matrix.<ref refid="classMatrix_1abd8766ab01ecf06e70cdce889afba641" kindref="member">MaxRowIndex</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>matrix.<ref refid="classMatrix_1a72061ea24736a0ff90e62c1c0f40bad9" kindref="member">MinColumnIndex</ref>();<sp/>j&lt;=<sp/>matrix.<ref refid="classMatrix_1af6cbab02648446701a31b7bce0110af7" kindref="member">MaxColumnIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrix(i,j)<sp/>&gt;=<sp/>zero)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Special<sp/>functions<sp/>for<sp/>Numerical<sp/>Linear<sp/>Algebra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386" refid="MatrixMechanisms_8cc_1a5db7c0865d10f27ffacb4be16e0549cb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="MatrixMechanisms_8cc_1a5db7c0865d10f27ffacb4be16e0549cb" kindref="member">diagonallyDominant</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m)</highlight></codeline>
<codeline lineno="387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>m.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>();<sp/>i<sp/>&lt;=<sp/>m.<ref refid="classMatrix_1abd8766ab01ecf06e70cdce889afba641" kindref="member">MaxRowIndex</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>tmp<sp/>=<sp/>fabs(m(i,i));</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&lt;<sp/><ref refid="MatrixMechanisms_8cc_1ab00f24d33b315b3567881ca4f9ae13aa" kindref="member">sumAbsRow</ref>(m,<sp/>i)<sp/>-<sp/>tmp)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gerschgorin&apos;s<sp/>circle<sp/>theorem:<sp/>n<sp/>eigenvalues<sp/>of<sp/>a<sp/>matrix<sp/>in<sp/>a<sp/>nX2<sp/>matrix<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lower<sp/>and<sp/>upper<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="MatrixMechanisms_8cc_1ae87f00e282d865c094ec0f8fe2668f7b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref><sp/><ref refid="MatrixMechanisms_8cc_1ae87f00e282d865c094ec0f8fe2668f7b" kindref="member">eigenvalueBounds</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>m)</highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V, I&gt;</ref><sp/>mat(m.<ref refid="classMatrix_1a137b54c61fa1a897a903ea3c466dd271" kindref="member">Rows</ref>(),<sp/>2,<sp/>1,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>2<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>m.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>();<sp/>i<sp/>&lt;=<sp/>m.<ref refid="classMatrix_1abd8766ab01ecf06e70cdce889afba641" kindref="member">MaxRowIndex</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>tmp<sp/>=<sp/>fabs(m(i,i));</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>rsum<sp/>=<sp/><ref refid="MatrixMechanisms_8cc_1ab00f24d33b315b3567881ca4f9ae13aa" kindref="member">sumAbsRow</ref>(m,<sp/>i);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat(i,<sp/>2)<sp/>=<sp/>tmp<sp/>-<sp/>rsum;<sp/></highlight><highlight class="comment">//<sp/>Lower<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat(i,<sp/>1)<sp/>=<sp/>rsum;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculate<sp/>largest<sp/>eigenvalue<sp/>by<sp/>Power<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="MatrixMechanisms_8cc_1a4e524faf1c8db44e6d1261d2784c2795" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="MatrixMechanisms_8cc_1a4e524faf1c8db44e6d1261d2784c2795" kindref="member">dominantEigenvalue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;V,I&gt;</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>svec,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>tolerance)</highlight></codeline>
<codeline lineno="422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref><sp/>startV<sp/>=<sp/>svec;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref><sp/>currVector<sp/>=<sp/>(A<sp/>*<sp/>svec);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>tmp(0.0);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>nextValue<sp/>(tmp);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>L1:</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/><ref refid="MatrixMechanisms_8cc_1a066bb3002419c7b680967d9ca5d4d259" kindref="member">RayleighQuotient</ref>(A,<sp/>currVector);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(tmp-nextValue)<sp/>&gt;<sp/>tolerance)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextValue<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startV<sp/>=<sp/>currVector;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currVector<sp/>=<sp/>A<sp/>*<sp/>startV;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>L1;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nextValue;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="MatrixMechanisms_8cc_1a9e52d9c1fa369021f257e9fe009cb661" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="MatrixMechanisms_8cc_1a9e52d9c1fa369021f257e9fe009cb661" kindref="member">print</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;V,I&gt;</ref>&amp;<sp/>mat)</highlight></codeline>
<codeline lineno="446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>mat.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>();<sp/>i<sp/>&lt;=<sp/>mat.<ref refid="classMatrix_1abd8766ab01ecf06e70cdce889afba641" kindref="member">MaxRowIndex</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>mat.<ref refid="classMatrix_1a72061ea24736a0ff90e62c1c0f40bad9" kindref="member">MinColumnIndex</ref>();<sp/>j<sp/>&lt;=<sp/>mat.<ref refid="classMatrix_1af6cbab02648446701a31b7bce0110af7" kindref="member">MaxColumnIndex</ref>()-1;<sp/>j++)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>mat(i,j)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>mat(i,<sp/>mat.<ref refid="classMatrix_1af6cbab02648446701a31b7bce0110af7" kindref="member">MaxColumnIndex</ref>());</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/MatrixMechanisms.cc"/>
  </compounddef>
</doxygen>
