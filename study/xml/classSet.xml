<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="classSet" kind="class" language="C++" prot="public">
    <compoundname>Set</compoundname>
    <basecompoundref refid="classSetThing" prot="public" virt="non-virtual">SetThing&lt; V &gt;</basecompoundref>
    <includes refid="Set_8hh" local="no">Set.hh</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>V</declname>
        <defname>V</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classSet_1a54d34cd05633a20d09b2e42fee9bb31f" prot="public" static="no">
        <type>std::set&lt; V &gt;::<ref refid="classSet_1a54d34cd05633a20d09b2e42fee9bb31f" kindref="member">iterator</ref></type>
        <definition>typedef std::set&lt;V&gt;::iterator Set&lt; V &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="25" column="38" bodyfile="include/duffy/Set.hh" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classSet_1ac9c538ffe3c823f5f28fd65910289b24" prot="public" static="no">
        <type>std::set&lt; V &gt;::<ref refid="classSet_1ac9c538ffe3c823f5f28fd65910289b24" kindref="member">const_iterator</ref></type>
        <definition>typedef std::set&lt;V&gt;::const_iterator Set&lt; V &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="26" column="44" bodyfile="include/duffy/Set.hh" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classSet_1a1b30fdb4ca6cf85b3b173e62017c666c" prot="private" static="no" mutable="no">
        <type>std::set&lt; V &gt;</type>
        <definition>std::set&lt;V&gt; Set&lt; V &gt;::s</definition>
        <argsstring></argsstring>
        <name>s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="21" column="10" bodyfile="include/duffy/Set.hh" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classSet_1ae909aa544663321e00cb18f398e5f66b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Set&lt; V &gt;::Set</definition>
        <argsstring>()</argsstring>
        <name>Set</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="30" column="1" bodyfile="src/Set.cc" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1a1c22f4531f0962c3a354e3bacc0bad9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Set&lt; V &gt;::Set</definition>
        <argsstring>(const std::set&lt; V &gt; &amp;stlSet)</argsstring>
        <name>Set</name>
        <param>
          <type>const std::set&lt; V &gt; &amp;</type>
          <declname>stlSet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="31" column="1" bodyfile="src/Set.cc" bodystart="35" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1a739f06b4b802b7bcd41179e77c83bcc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Set&lt; V &gt;::Set</definition>
        <argsstring>(const Set&lt; V &gt; &amp;s2)</argsstring>
        <name>Set</name>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="32" column="1" bodyfile="src/Set.cc" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1a7e184745fde7d92a8caf9aa4bf1d122f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Set&lt; V &gt;::Set</definition>
        <argsstring>(const std::list&lt; V &gt; &amp;con)</argsstring>
        <name>Set</name>
        <param>
          <type>const std::list&lt; V &gt; &amp;</type>
          <declname>con</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="34" column="1" bodyfile="src/Set.cc" bodystart="51" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1ac5fb97b30e904016e81e2660ad1af712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt;</type>
        <definition>Set&lt; V &gt; Set&lt; V &gt;::operator=</definition>
        <argsstring>(const Set&lt; V &gt; &amp;s2)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="35" column="5" bodyfile="src/Set.cc" bodystart="67" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1aafe7310e2d779a7385ec57fac57bf1e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>Set&lt; V &gt;::~Set</definition>
        <argsstring>()</argsstring>
        <name>~Set</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="36" column="9" bodyfile="src/Set.cc" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1ac70bbbfa5d581958225a4b5be178ac8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt;</type>
        <definition>Set&lt;V&gt; Set&lt; V &gt;::operator^</definition>
        <argsstring>(const Set&lt; V &gt; &amp;s2)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="48" column="5" bodyfile="include/duffy/Set.hh" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1aa5301a8039e0f02db70fc3179dcd8361" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt;</type>
        <definition>Set&lt;V&gt; Set&lt; V &gt;::operator+</definition>
        <argsstring>(const Set&lt; V &gt; &amp;s2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="62" column="5" bodyfile="include/duffy/Set.hh" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1af0015d618dfb0075fa0139cac663e53e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt;</type>
        <definition>Set&lt;V&gt; Set&lt; V &gt;::operator-</definition>
        <argsstring>(const Set&lt; V &gt; &amp;s2)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="76" column="5" bodyfile="include/duffy/Set.hh" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1a2417374d39e95e1cedc36e3fcd3aa651" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt;</type>
        <definition>Set&lt;V&gt; Set&lt; V &gt;::operator%</definition>
        <argsstring>(const Set&lt; V &gt; &amp;s2)</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="90" column="5" bodyfile="include/duffy/Set.hh" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1aacfb08150129e254b0c5b74c47c2337f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classSet" kindref="compound">Set</ref>&lt; std::pair&lt; V, V2 &gt; &gt;</type>
        <definition>Set&lt;std::pair&lt;V, V2&gt; &gt; Set&lt; V &gt;::operator*</definition>
        <argsstring>(const Set&lt; V2 &gt; &amp;s2)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V2 &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="96" column="5" bodyfile="include/duffy/Set.hh" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1ae688c6cb7ec18e29b45eb020c444362f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classSet" kindref="compound">Set</ref>&lt; std::pair&lt; V, V2 &gt; &gt;</type>
        <definition>Set&lt;std::pair&lt;V, V2&gt; &gt; Set&lt; V &gt;::CartesianProduct</definition>
        <argsstring>(const Set&lt; V2 &gt; &amp;s2)</argsstring>
        <name>CartesianProduct</name>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V2 &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="102" column="5" bodyfile="include/duffy/Set.hh" bodystart="102" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1a3ca47221f02ee54c6b627ff73a9b5b98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classSet_1a54d34cd05633a20d09b2e42fee9bb31f" kindref="member">iterator</ref></type>
        <definition>Set&lt; V &gt;::iterator Set&lt; V &gt;::Begin</definition>
        <argsstring>()</argsstring>
        <name>Begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="125" column="10" bodyfile="src/Set.cc" bodystart="170" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1af72b60644e986ecd02279b64b56e86f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classSet_1ac9c538ffe3c823f5f28fd65910289b24" kindref="member">const_iterator</ref></type>
        <definition>Set&lt; V &gt;::const_iterator Set&lt; V &gt;::Begin</definition>
        <argsstring>() const</argsstring>
        <name>Begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="126" column="16" bodyfile="src/Set.cc" bodystart="177" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1aeb4a4b2026eb040a24e9b251e0c49dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classSet_1a54d34cd05633a20d09b2e42fee9bb31f" kindref="member">iterator</ref></type>
        <definition>Set&lt; V &gt;::iterator Set&lt; V &gt;::End</definition>
        <argsstring>()</argsstring>
        <name>End</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="127" column="10" bodyfile="src/Set.cc" bodystart="185" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1abfa04b4e41038f371b6b12d7553da6c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classSet_1ac9c538ffe3c823f5f28fd65910289b24" kindref="member">const_iterator</ref></type>
        <definition>Set&lt; V &gt;::const_iterator Set&lt; V &gt;::End</definition>
        <argsstring>() const</argsstring>
        <name>End</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="128" column="16" bodyfile="src/Set.cc" bodystart="193" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1aec2bedbb313cfc25c7100c6984760dd3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long Set&lt; V &gt;::Size</definition>
        <argsstring>() const</argsstring>
        <name>Size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="131" column="6" bodyfile="src/Set.cc" bodystart="203" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1a25791eed3b7ef4be9af5059cf09767f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Set&lt; V &gt;::Insert</definition>
        <argsstring>(const V &amp;v)</argsstring>
        <name>Insert</name>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="132" column="6" bodyfile="src/Set.cc" bodystart="211" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1aba4fd7b02967ba79b7e51ea38e33639a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Set&lt; V &gt;::Insert</definition>
        <argsstring>(const Set&lt; V &gt; &amp;v)</argsstring>
        <name>Insert</name>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="133" column="6" bodyfile="src/Set.cc" bodystart="218" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1a7c93429f1d8f232c421a6fde25cb982b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Set&lt; V &gt;::Remove</definition>
        <argsstring>(const V &amp;v)</argsstring>
        <name>Remove</name>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="134" column="6" bodyfile="src/Set.cc" bodystart="229" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1a1feb21675fad80514ee3b41fb67f8c20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Set&lt; V &gt;::Replace</definition>
        <argsstring>(const V &amp;Old, const V &amp;New)</argsstring>
        <name>Replace</name>
        <param>
          <type>const V &amp;</type>
          <declname>Old</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>New</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="135" column="6" bodyfile="src/Set.cc" bodystart="236" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1af4c48c3aca006588ac6d572c7e1f984c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Set&lt; V &gt;::Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="136" column="6" bodyfile="src/Set.cc" bodystart="244" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1a685c7dec3d054d0d9972457f13873568" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Set&lt; V &gt;::Contains</definition>
        <argsstring>(const V &amp;v) const</argsstring>
        <name>Contains</name>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="137" column="6" bodyfile="src/Set.cc" bodystart="251" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1ace9e8eb82ba76d99dcb8b016c3107e15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Set&lt; V &gt;::Empty</definition>
        <argsstring>() const</argsstring>
        <name>Empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="138" column="6" bodyfile="src/Set.cc" bodystart="264" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1aef67658b41a94e9f8c788cee280ffd92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Set&lt; V &gt;::operator+</definition>
        <argsstring>(const V &amp;v)</argsstring>
        <name>operator+</name>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="141" column="6" bodyfile="src/Set.cc" bodystart="274" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1a2306e1e18b56c40b1ec81d41641e7e1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Set&lt; V &gt;::operator-</definition>
        <argsstring>(const V &amp;v)</argsstring>
        <name>operator-</name>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="142" column="6" bodyfile="src/Set.cc" bodystart="281" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1ac7bb2705235f0d44e4793262510e1dc6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Set&lt; V &gt;::Subset</definition>
        <argsstring>(const Set&lt; V &gt; &amp;s2) const</argsstring>
        <name>Subset</name>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="145" column="6" bodyfile="src/Set.cc" bodystart="290" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1abec7a201bd7d6632f4cf2a84e9ca2e0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Set&lt; V &gt;::Superset</definition>
        <argsstring>(const Set&lt; V &gt; &amp;s2) const</argsstring>
        <name>Superset</name>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="146" column="6" bodyfile="src/Set.cc" bodystart="299" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classSet_1ac66e1af1032a7cc83b80a3d6b8a8ef30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Set&lt; V &gt;::Intersects</definition>
        <argsstring>(const Set&lt; V &gt; &amp;s2) const</argsstring>
        <name>Intersects</name>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="147" column="6" bodyfile="src/Set.cc" bodystart="307" bodyend="324"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classSet_1aa6f2d4a71a5915ece9dcc5367d09b715" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt;</type>
        <definition>Set&lt;V&gt; Intersection</definition>
        <argsstring>(const Set&lt; V &gt; &amp;s1, const Set&lt; V &gt; &amp;s2)</argsstring>
        <name>Intersection</name>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt; &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="39" column="12" bodyfile="include/duffy/Set.hh" bodystart="39" bodyend="47"/>
      </memberdef>
      <memberdef kind="friend" id="classSet_1a64d819415225059c47e2c10173d70f7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt;</type>
        <definition>Set&lt;V&gt; Union</definition>
        <argsstring>(const Set&lt; V &gt; &amp;s1, const Set&lt; V &gt; &amp;s2)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt; &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="53" column="12" bodyfile="include/duffy/Set.hh" bodystart="53" bodyend="61"/>
      </memberdef>
      <memberdef kind="friend" id="classSet_1adc454e79bea59a84cda183370001a91f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt;</type>
        <definition>Set&lt;V&gt; Difference</definition>
        <argsstring>(const Set&lt; V &gt; &amp;s1, const Set&lt; V &gt; &amp;s2)</argsstring>
        <name>Difference</name>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt; &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="67" column="12" bodyfile="include/duffy/Set.hh" bodystart="67" bodyend="75"/>
      </memberdef>
      <memberdef kind="friend" id="classSet_1a226443fc57c552d16d44f6b782bfe515" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt;</type>
        <definition>Set&lt;V&gt; SymmetricDifference</definition>
        <argsstring>(const Set&lt; V &gt; &amp;s1, const Set&lt; V &gt; &amp;s2)</argsstring>
        <name>SymmetricDifference</name>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt; &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="classSet" kindref="compound">Set</ref>&lt; V &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Set.hh" line="81" column="12" bodyfile="include/duffy/Set.hh" bodystart="81" bodyend="89"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>Set&lt; AI1 &gt;</label>
        <link refid="classSet"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; AI1 &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>Set&lt; std::string &gt;</label>
        <link refid="classSet"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::string &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>Set&lt; AI2 &gt;</label>
        <link refid="classSet"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; AI2 &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>Set&lt; R &gt;</label>
        <link refid="classSet"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; R &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Set&lt; N &gt;</label>
        <link refid="classSet"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; N &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Set&lt; V &gt;</label>
        <link refid="classSet"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>Set&lt; AI &gt;</label>
        <link refid="classSet"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; AI &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>Set&lt; D &gt;</label>
        <link refid="classSet"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; D &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>SetThing&lt; V &gt;</label>
        <link refid="classSetThing"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Set&lt; V &gt;</label>
        <link refid="classSet"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SetThing&lt; V &gt;</label>
        <link refid="classSetThing"/>
      </node>
    </collaborationgraph>
    <location file="include/duffy/Set.hh" line="19" column="1" bodyfile="include/duffy/Set.hh" bodystart="18" bodyend="150"/>
    <listofallmembers>
      <member refid="classSet_1a3ca47221f02ee54c6b627ff73a9b5b98" prot="public" virt="non-virtual"><scope>Set</scope><name>Begin</name></member>
      <member refid="classSet_1af72b60644e986ecd02279b64b56e86f3" prot="public" virt="non-virtual"><scope>Set</scope><name>Begin</name></member>
      <member refid="classSet_1ae688c6cb7ec18e29b45eb020c444362f" prot="public" virt="non-virtual"><scope>Set</scope><name>CartesianProduct</name></member>
      <member refid="classSet_1af4c48c3aca006588ac6d572c7e1f984c" prot="public" virt="non-virtual"><scope>Set</scope><name>Clear</name></member>
      <member refid="classSet_1ac9c538ffe3c823f5f28fd65910289b24" prot="public" virt="non-virtual"><scope>Set</scope><name>const_iterator</name></member>
      <member refid="classSet_1a685c7dec3d054d0d9972457f13873568" prot="public" virt="non-virtual"><scope>Set</scope><name>Contains</name></member>
      <member refid="classSet_1adc454e79bea59a84cda183370001a91f" prot="public" virt="non-virtual"><scope>Set</scope><name>Difference</name></member>
      <member refid="classSet_1ace9e8eb82ba76d99dcb8b016c3107e15" prot="public" virt="non-virtual"><scope>Set</scope><name>Empty</name></member>
      <member refid="classSet_1aeb4a4b2026eb040a24e9b251e0c49dec" prot="public" virt="non-virtual"><scope>Set</scope><name>End</name></member>
      <member refid="classSet_1abfa04b4e41038f371b6b12d7553da6c6" prot="public" virt="non-virtual"><scope>Set</scope><name>End</name></member>
      <member refid="classSet_1a25791eed3b7ef4be9af5059cf09767f2" prot="public" virt="non-virtual"><scope>Set</scope><name>Insert</name></member>
      <member refid="classSet_1aba4fd7b02967ba79b7e51ea38e33639a" prot="public" virt="non-virtual"><scope>Set</scope><name>Insert</name></member>
      <member refid="classSet_1aa6f2d4a71a5915ece9dcc5367d09b715" prot="public" virt="non-virtual"><scope>Set</scope><name>Intersection</name></member>
      <member refid="classSet_1ac66e1af1032a7cc83b80a3d6b8a8ef30" prot="public" virt="non-virtual"><scope>Set</scope><name>Intersects</name></member>
      <member refid="classSet_1a54d34cd05633a20d09b2e42fee9bb31f" prot="public" virt="non-virtual"><scope>Set</scope><name>iterator</name></member>
      <member refid="classSet_1a2417374d39e95e1cedc36e3fcd3aa651" prot="public" virt="non-virtual"><scope>Set</scope><name>operator%</name></member>
      <member refid="classSet_1aacfb08150129e254b0c5b74c47c2337f" prot="public" virt="non-virtual"><scope>Set</scope><name>operator*</name></member>
      <member refid="classSet_1aa5301a8039e0f02db70fc3179dcd8361" prot="public" virt="non-virtual"><scope>Set</scope><name>operator+</name></member>
      <member refid="classSet_1aef67658b41a94e9f8c788cee280ffd92" prot="public" virt="non-virtual"><scope>Set</scope><name>operator+</name></member>
      <member refid="classSet_1af0015d618dfb0075fa0139cac663e53e" prot="public" virt="non-virtual"><scope>Set</scope><name>operator-</name></member>
      <member refid="classSet_1a2306e1e18b56c40b1ec81d41641e7e1d" prot="public" virt="non-virtual"><scope>Set</scope><name>operator-</name></member>
      <member refid="classSet_1ac5fb97b30e904016e81e2660ad1af712" prot="public" virt="non-virtual"><scope>Set</scope><name>operator=</name></member>
      <member refid="classSet_1ac70bbbfa5d581958225a4b5be178ac8a" prot="public" virt="non-virtual"><scope>Set</scope><name>operator^</name></member>
      <member refid="classSet_1a7c93429f1d8f232c421a6fde25cb982b" prot="public" virt="non-virtual"><scope>Set</scope><name>Remove</name></member>
      <member refid="classSet_1a1feb21675fad80514ee3b41fb67f8c20" prot="public" virt="non-virtual"><scope>Set</scope><name>Replace</name></member>
      <member refid="classSet_1a1b30fdb4ca6cf85b3b173e62017c666c" prot="private" virt="non-virtual"><scope>Set</scope><name>s</name></member>
      <member refid="classSet_1ae909aa544663321e00cb18f398e5f66b" prot="public" virt="non-virtual"><scope>Set</scope><name>Set</name></member>
      <member refid="classSet_1a1c22f4531f0962c3a354e3bacc0bad9a" prot="public" virt="non-virtual"><scope>Set</scope><name>Set</name></member>
      <member refid="classSet_1a739f06b4b802b7bcd41179e77c83bcc6" prot="public" virt="non-virtual"><scope>Set</scope><name>Set</name></member>
      <member refid="classSet_1a7e184745fde7d92a8caf9aa4bf1d122f" prot="public" virt="non-virtual"><scope>Set</scope><name>Set</name></member>
      <member refid="classSet_1aec2bedbb313cfc25c7100c6984760dd3" prot="public" virt="non-virtual"><scope>Set</scope><name>Size</name></member>
      <member refid="classSet_1ac7bb2705235f0d44e4793262510e1dc6" prot="public" virt="non-virtual"><scope>Set</scope><name>Subset</name></member>
      <member refid="classSet_1abec7a201bd7d6632f4cf2a84e9ca2e0f" prot="public" virt="non-virtual"><scope>Set</scope><name>Superset</name></member>
      <member refid="classSet_1a226443fc57c552d16d44f6b782bfe515" prot="public" virt="non-virtual"><scope>Set</scope><name>SymmetricDifference</name></member>
      <member refid="classSet_1a64d819415225059c47e2c10173d70f7b" prot="public" virt="non-virtual"><scope>Set</scope><name>Union</name></member>
      <member refid="classSet_1aafe7310e2d779a7385ec57fac57bf1e0" prot="public" virt="virtual"><scope>Set</scope><name>~Set</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
