<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="ArrayMechanisms_8hh" kind="file" language="C++">
    <compoundname>ArrayMechanisms.hh</compoundname>
    <includes refid="SimplePropertySet_8hh" local="yes">SimplePropertySet.hh</includes>
    <includes refid="Range_8hh" local="yes">Range.hh</includes>
    <includes refid="Tensor_8hh" local="yes">Tensor.hh</includes>
    <includes local="no">cmath</includes>
    <includes refid="ArrayMechanisms_8cc" local="yes">../../src/ArrayMechanisms.cc</includes>
    <includedby refid="ArrayMechanisms_8cc" local="no">src/ArrayMechanisms.cc</includedby>
    <includedby refid="MatrixMechanisms_8hh" local="yes">include/duffy/MatrixMechanisms.hh</includedby>
    <includedby refid="IEulerIBVPSolver_8cc" local="no">src/IEulerIBVPSolver.cc</includedby>
    <includedby refid="TestAssocArray_8cc" local="no">tests/TestAssocArray.cc</includedby>
    <includedby refid="TestAssocMatrix_8cc" local="no">tests/TestAssocMatrix.cc</includedby>
    <includedby refid="testBSPDE1_8cc" local="no">tests/testBSPDE1.cc</includedby>
    <includedby refid="TestNewLattice_8cc" local="no">tests/TestNewLattice.cc</includedby>
    <includedby refid="TestSTD_8cc" local="no">tests/TestSTD.cc</includedby>
    <incdepgraph>
      <node id="10">
        <label>list</label>
      </node>
      <node id="3">
        <label>Property.hh</label>
        <link refid="Property_8hh_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Set.hh</label>
        <link refid="Set_8hh_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>Vector.hh</label>
        <link refid="Vector_8hh_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>SimplePropertySet.hh</label>
        <link refid="SimplePropertySet_8hh_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ArrayStructure.hh</label>
        <link refid="ArrayStructure_8hh_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>Tensor.hh</label>
        <link refid="Tensor_8hh_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>cmath</label>
      </node>
      <node id="13">
        <label>Array.hh</label>
        <link refid="Array_8hh_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="7">
        <label>map</label>
      </node>
      <node id="1">
        <label>include/duffy/ArrayMechanisms.hh</label>
        <link refid="ArrayMechanisms_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>Range.hh</label>
        <link refid="Range_8hh_source"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>Matrix.hh</label>
        <link refid="Matrix_8hh_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>FullMatrix.hh</label>
        <link refid="FullMatrix_8hh_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>PropertyThing.hh</label>
        <link refid="PropertyThing_8hh_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>NumericMatrix.hh</label>
        <link refid="NumericMatrix_8hh_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>vector</label>
      </node>
      <node id="6">
        <label>iostream</label>
      </node>
      <node id="15">
        <label>cstddef</label>
      </node>
      <node id="16">
        <label>FullArray.hh</label>
        <link refid="FullArray_8hh_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>set</label>
      </node>
      <node id="22">
        <label>MatrixStructure.hh</label>
        <link refid="MatrixStructure_8hh_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/duffy/MatrixMechanisms.hh</label>
        <link refid="MatrixMechanisms_8hh_source"/>
      </node>
      <node id="1">
        <label>include/duffy/ArrayMechanisms.hh</label>
        <link refid="ArrayMechanisms_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="ArrayMechanisms_8hh_1aea32fac5839587550db96af2d9c443a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V sum</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="27" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="19" bodyend="29" declfile="include/duffy/ArrayMechanisms.hh" declline="27" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a7383833d1a743d1cf913e8748e03e30d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V product</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>product</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="28" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="31" bodyend="41" declfile="include/duffy/ArrayMechanisms.hh" declline="28" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a1f180ea2ca6f8377075ebe0078a3a535" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V sumReciprocals</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>sumReciprocals</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="29" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="43" bodyend="56" declfile="include/duffy/ArrayMechanisms.hh" declline="29" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a259e88a526330c4e69811f4722c472e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V sumAbsoluteValues</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>sumAbsoluteValues</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="30" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="58" bodyend="69" declfile="include/duffy/ArrayMechanisms.hh" declline="30" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1acbc48d749bdc03cf251b6db7e93df4c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V mean</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>mean</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="34" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="72" bodyend="77" declfile="include/duffy/ArrayMechanisms.hh" declline="34" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1acdb15569682a2e0bf2c6f8a8f2df74c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V weightedArithMean</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x, const Vector&lt; V, I &gt; &amp;w)</argsstring>
        <name>weightedArithMean</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="37" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="80" bodyend="94" declfile="include/duffy/ArrayMechanisms.hh" declline="37" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1abc6df0dcf265521ed3239d9292fb7c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V geometricMean</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>geometricMean</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="40" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="97" bodyend="107" declfile="include/duffy/ArrayMechanisms.hh" declline="40" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a13d345e8be1ef4121580faf897843983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V harmonicMean</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>harmonicMean</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="43" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="110" bodyend="115" declfile="include/duffy/ArrayMechanisms.hh" declline="43" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a1961ee6c6a6ab7d95cad63dcb8963707" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V quadraticMean</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>quadraticMean</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="46" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="118" bodyend="121" declfile="include/duffy/ArrayMechanisms.hh" declline="46" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1ada1be3fbf31a833d8f891a1d9fbb9f02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V sumSquares</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>sumSquares</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="49" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="124" bodyend="134" declfile="include/duffy/ArrayMechanisms.hh" declline="49" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a5213d504673342d3276c3335cc092339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet</ref>&lt; std::string, double &gt;</type>
        <definition>SimplePropertySet&lt;std::string, double&gt; allAverages</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>allAverages</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="52" column="33" bodyfile="src/ArrayMechanisms.cc" bodystart="138" bodyend="154" declfile="include/duffy/ArrayMechanisms.hh" declline="52" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1aabe7146d0ab655df7dea0dda59e33af6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V deviationFromMean</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>deviationFromMean</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="58" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="158" bodyend="170" declfile="include/duffy/ArrayMechanisms.hh" declline="58" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a7f43379194df79cb9bfc98918b3d107d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V standardDeviation</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>standardDeviation</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="59" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="173" bodyend="187" declfile="include/duffy/ArrayMechanisms.hh" declline="59" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a039fe821f2cc2ebd29c145218b7e594c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V variance</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>variance</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="60" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="189" bodyend="194" declfile="include/duffy/ArrayMechanisms.hh" declline="60" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1afa77a0c5d6e72e2000a53be658c5362e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet</ref>&lt; std::string, double &gt;</type>
        <definition>SimplePropertySet&lt;std::string, double&gt; allDispersions</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>allDispersions</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="63" column="33" bodyfile="src/ArrayMechanisms.cc" bodystart="198" bodyend="208" declfile="include/duffy/ArrayMechanisms.hh" declline="63" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a57b30169c08bc835f06a3b4226d358e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V rthMoment</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x, const I &amp;r)</argsstring>
        <name>rthMoment</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="68" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="213" bodyend="216" declfile="include/duffy/ArrayMechanisms.hh" declline="68" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1abd89b7368c88dc0c18b171191ffce49c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V rthMomentMean</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x, const I &amp;r)</argsstring>
        <name>rthMomentMean</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="71" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="219" bodyend="222" declfile="include/duffy/ArrayMechanisms.hh" declline="71" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a957257f28fea6eeb6990ac8e4f952691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V rthMomentMean</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x, const Vector&lt; V, I &gt; &amp;freq, const I &amp;r)</argsstring>
        <name>rthMomentMean</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="72" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="224" bodyend="228" declfile="include/duffy/ArrayMechanisms.hh" declline="72" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1aa20bfe76f87b23f972d4ac012e6b54d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V rthMoment</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x, const I &amp;r, const V &amp;A)</argsstring>
        <name>rthMoment</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="76" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="231" bodyend="241" declfile="include/duffy/ArrayMechanisms.hh" declline="76" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1ae0e2e3e59d0a00971d76a4d0fc45951a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V rthMoment</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x, const Vector&lt; V, I &gt; &amp;freq, const I &amp;r, const V &amp;A)</argsstring>
        <name>rthMoment</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="79" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="243" bodyend="255" declfile="include/duffy/ArrayMechanisms.hh" declline="79" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1accd08ee829c11fff840fb28b56c66016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V median</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>median</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="83" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="258" bodyend="276" declfile="include/duffy/ArrayMechanisms.hh" declline="83" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a4dbe91f78965a3973c017e8fdc01d86c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>I</type>
        <definition>I occurs</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x, const V &amp;d)</argsstring>
        <name>occurs</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="86" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="279" bodyend="290" declfile="include/duffy/ArrayMechanisms.hh" declline="86" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a5b2af8b958fc1d86e138fb7220db2fae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V mode</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>mode</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="89" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="293" bodyend="321" declfile="include/duffy/ArrayMechanisms.hh" declline="89" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a51f76c32be87bbb64dc2b2fe77953108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V skewness</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>skewness</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="91" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="324" bodyend="327" declfile="include/duffy/ArrayMechanisms.hh" declline="91" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a1629e541754df6662b3c7bcf8c7f7e7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V maxValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>maxValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="95" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="331" bodyend="342" declfile="include/duffy/ArrayMechanisms.hh" declline="95" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a3fd6d636d86485d9e274d6003f9cf981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V minValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>minValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="96" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="344" bodyend="355" declfile="include/duffy/ArrayMechanisms.hh" declline="96" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a224fe3e8a6c63d545f98b44ebbb2bd77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V maxAbsValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>maxAbsValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="99" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="358" bodyend="369" declfile="include/duffy/ArrayMechanisms.hh" declline="99" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a1444de407d9592e80d0b9ebcb24d9c9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V minAbsValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>minAbsValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="100" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="371" bodyend="383" declfile="include/duffy/ArrayMechanisms.hh" declline="100" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a3b3c6f150e27a4d999b14733f81b172c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>I</type>
        <definition>I indexMaxValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>indexMaxValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="103" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="386" bodyend="401" declfile="include/duffy/ArrayMechanisms.hh" declline="103" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a71ec96ee72e5a63195e9627020c77b91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V indexMinValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>indexMinValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="104" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="403" bodyend="419" declfile="include/duffy/ArrayMechanisms.hh" declline="104" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1aaa5e1505fda32d2b536b574bd5f7fb0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>I</type>
        <definition>I indexMaxAbsValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>indexMaxAbsValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="106" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="421" bodyend="436" declfile="include/duffy/ArrayMechanisms.hh" declline="106" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a10dcf29732fc9a591206fed9dad7fdc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V indexMinAbsValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>indexMinAbsValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="107" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="439" bodyend="454" declfile="include/duffy/ArrayMechanisms.hh" declline="107" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1ae4c6b748a5a46e5d92733fb1d1a34edb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V maxValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB)</argsstring>
        <name>maxValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="110" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="457" bodyend="464" declfile="include/duffy/ArrayMechanisms.hh" declline="110" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a059efb34fbff2f079f2ca69e04669d95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V minValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB)</argsstring>
        <name>minValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="111" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="466" bodyend="471" declfile="include/duffy/ArrayMechanisms.hh" declline="111" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a26308a4ecf11e1f8094c7285d7d5f8d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V maxAbsValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB)</argsstring>
        <name>maxAbsValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="113" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="474" bodyend="479" declfile="include/duffy/ArrayMechanisms.hh" declline="113" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a9c1f380040474c6e32ab6d6da2a3a891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V minAbsValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB)</argsstring>
        <name>minAbsValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="114" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="481" bodyend="486" declfile="include/duffy/ArrayMechanisms.hh" declline="114" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a7feb2b4cbb0c06fa9146125c0e869513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V innerProduct</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB)</argsstring>
        <name>innerProduct</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="118" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="490" bodyend="501" declfile="include/duffy/ArrayMechanisms.hh" declline="118" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a75a652af753fedaf9991ce139cf6e66a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V l1Norm</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>l1Norm</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="119" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="503" bodyend="506" declfile="include/duffy/ArrayMechanisms.hh" declline="119" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a668d08308ea702fd8b718c9269666934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V l2Norm</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>l2Norm</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="120" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="509" bodyend="512" declfile="include/duffy/ArrayMechanisms.hh" declline="120" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1ae40b9d63ad56566ac2e6032014158066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V lpNorm</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x, const I &amp;p)</argsstring>
        <name>lpNorm</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="121" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="514" bodyend="524" declfile="include/duffy/ArrayMechanisms.hh" declline="121" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a61a3356be620e18abfb8e5ccc92945df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V lInfinityNorm</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>lInfinityNorm</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="122" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="526" bodyend="529" declfile="include/duffy/ArrayMechanisms.hh" declline="122" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1abe75e0a9b49ea9923c15a384761d13d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet</ref>&lt; std::string, double &gt;</type>
        <definition>SimplePropertySet&lt;std::string, double&gt; allNorms</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>allNorms</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="124" column="33" bodyfile="src/ArrayMechanisms.cc" bodystart="531" bodyend="540" declfile="include/duffy/ArrayMechanisms.hh" declline="124" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1acd4e52a95d6941dfb88a4c1a88a7b9e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V l1Norm</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB)</argsstring>
        <name>l1Norm</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="127" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="550" bodyend="555" declfile="include/duffy/ArrayMechanisms.hh" declline="127" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1af986404a5cbb417ec449769a625929b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V l2Norm</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB)</argsstring>
        <name>l2Norm</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="128" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="558" bodyend="563" declfile="include/duffy/ArrayMechanisms.hh" declline="128" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a385d69301d86f6bbc380ef28a69e0c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V lpNorm</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB, const I &amp;p)</argsstring>
        <name>lpNorm</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="129" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="565" bodyend="570" declfile="include/duffy/ArrayMechanisms.hh" declline="129" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a1791ba9ec7602ca00189b3d031edf634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V lInfinityNorm</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB)</argsstring>
        <name>lInfinityNorm</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="130" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="572" bodyend="577" declfile="include/duffy/ArrayMechanisms.hh" declline="130" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a2da550c1edaab463f866ef24685a7053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet</ref>&lt; std::string, double &gt;</type>
        <definition>SimplePropertySet&lt;std::string, double&gt; allNorms</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB)</argsstring>
        <name>allNorms</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="132" column="33" bodyfile="src/ArrayMechanisms.cc" bodystart="542" bodyend="547" declfile="include/duffy/ArrayMechanisms.hh" declline="132" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1ac6a295c94e7d2e90ae8514dcf05377e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool positive</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>positive</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="139" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="584" bodyend="595" declfile="include/duffy/ArrayMechanisms.hh" declline="139" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1af844f9e94257e30adb2557f72bc776fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool negative</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>negative</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="140" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="597" bodyend="608" declfile="include/duffy/ArrayMechanisms.hh" declline="140" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a7c74d80e1384b34d96195b6fb7abea03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;v1, const Vector&lt; V, I &gt; &amp;v2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="144" column="15" bodyfile="src/ArrayMechanisms.cc" bodystart="611" bodyend="622" declfile="include/duffy/ArrayMechanisms.hh" declline="144" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a10d1dbb4bde9b31e016ae7f59e66d75e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;v1, const Vector&lt; V, I &gt; &amp;v2)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="145" column="15" bodyfile="src/ArrayMechanisms.cc" bodystart="625" bodyend="636" declfile="include/duffy/ArrayMechanisms.hh" declline="145" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a537b17e660b3bfc1ed9a5ea8eb5b8fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;v1, const Vector&lt; V, I &gt; &amp;v2)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="146" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="639" bodyend="650" declfile="include/duffy/ArrayMechanisms.hh" declline="146" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1ac246693b295956f27f5823380e5f0941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;v1, const Vector&lt; V, I &gt; &amp;v2)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="147" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="652" bodyend="663" declfile="include/duffy/ArrayMechanisms.hh" declline="147" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a5b73c0e302fb50e0a12d98287b641acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;v1, const Vector&lt; V, I &gt; &amp;v2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="148" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="666" bodyend="677" declfile="include/duffy/ArrayMechanisms.hh" declline="148" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a76316bb45bc18b42f0098871aa970fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;v1, const Vector&lt; V, I &gt; &amp;v2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="149" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="679" bodyend="685" declfile="include/duffy/ArrayMechanisms.hh" declline="149" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1abd5321c0d9d995769f70d91eca8e8e5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; V &gt;</type>
        <definition>std::vector&lt;V&gt; createSTLvector</definition>
        <argsstring>(const Vector&lt; V, int &gt; &amp;myVector)</argsstring>
        <name>createSTLvector</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, int &gt; &amp;</type>
          <declname>myVector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="154" column="25" bodyfile="src/ArrayMechanisms.cc" bodystart="688" bodyend="699" declfile="include/duffy/ArrayMechanisms.hh" declline="154" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a78a90de96c8a055b6921cb51fe868cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, int &gt;</type>
        <definition>Vector&lt;V, int&gt; createDatasimVector</definition>
        <argsstring>(const std::vector&lt; V &gt; &amp;mySTLvector)</argsstring>
        <name>createDatasimVector</name>
        <param>
          <type>const std::vector&lt; V &gt; &amp;</type>
          <declname>mySTLvector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="156" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="702" bodyend="713" declfile="include/duffy/ArrayMechanisms.hh" declline="156" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1ae92f1779b28708717fc43981b0d7e721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt;</type>
        <definition>Vector&lt;V, I&gt; cumulativeVector</definition>
        <argsstring>(const std::vector&lt; V &gt; &amp;x)</argsstring>
        <name>cumulativeVector</name>
        <param>
          <type>const std::vector&lt; V &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="159" column="22" bodyfile="src/ArrayMechanisms.cc" bodystart="715" bodyend="728" declfile="include/duffy/ArrayMechanisms.hh" declline="159" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1aa733a8c1b1c2946f0dee2369a2c0988d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt;</type>
        <definition>Vector&lt;V, I&gt; reverse</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>reverse</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="162" column="22" bodyfile="src/ArrayMechanisms.cc" bodystart="730" bodyend="741" declfile="include/duffy/ArrayMechanisms.hh" declline="162" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a7a738d11c1fc7a5a9204c8c2adb08402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void print</definition>
        <argsstring>(const Array&lt; V, I &gt; &amp;v)</argsstring>
        <name>print</name>
        <param>
          <type>const <ref refid="classArray" kindref="compound">Array</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="165" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="744" bodyend="757" declfile="include/duffy/ArrayMechanisms.hh" declline="165" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a499368a9dddb1f6b8d6fb75eb6b9297d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void print</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;v)</argsstring>
        <name>print</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="166" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="759" bodyend="770" declfile="include/duffy/ArrayMechanisms.hh" declline="166" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8hh_1a6ff31a903affcca53d6aa3b526b8be2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void print</definition>
        <argsstring>(Tensor&lt; V, I &gt; &amp;tensor)</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="classTensor" kindref="compound">Tensor</ref>&lt; V, I &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ArrayMechanisms.hh" line="167" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="772" bodyend="781" declfile="include/duffy/ArrayMechanisms.hh" declline="167" declcolumn="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>arraymechanisms.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>of<sp/>functions<sp/>for<sp/>common<sp/>vector<sp/>and<sp/>matrix<sp/>manipulation.<sp/>These</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>useful<sp/>utility<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Categories:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sums<sp/>and<sp/>averages<sp/>of<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mean,<sp/>median,<sp/>std,<sp/>variance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Maximum/minimum<sp/>values<sp/>associated<sp/>with<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inner<sp/>products,<sp/>norms<sp/>of<sp/>vectors<sp/>and<sp/>matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Comparing<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Converting<sp/>between<sp/>STL<sp/>vector<sp/>and<sp/>(Datasim)<sp/>Vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Simple<sp/>(but<sp/>useful)<sp/>print<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Datasim<sp/>Education<sp/>BV<sp/>2003-2005</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ArrayMechanisms_hh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ArrayMechanisms_hh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SimplePropertySet.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Range.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Tensor.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sums<sp/>and<sp/>averages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>sum(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);<sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>product(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);<sp/></highlight><highlight class="comment">//<sp/>Product<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>sumReciprocals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);<sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>of<sp/>reciprocals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>sumAbsoluteValues(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);<sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>of<sp/>absolute<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mean<sp/>value<sp/>==<sp/>sum()<sp/>/<sp/>N<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>mean(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Weighted<sp/>arithmetic<sp/>mean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>weightedArithMean(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>w);<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Geometric<sp/>mean<sp/>or<sp/>geometric<sp/>average<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>geometricMean(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Harmonic<sp/>mean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>harmonicMean(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);<sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Root<sp/>mean<sp/>square<sp/>(RMS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>quadraticMean(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sum<sp/>of<sp/>squares</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>sumSquares(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>function<sp/>returning<sp/>all<sp/>of<sp/>the<sp/>above<sp/>values<sp/>in<sp/>one<sp/>foul<sp/>swoop<sp/>(performance)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet&lt;std::string, double&gt;</ref><sp/>allAverages(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Measures<sp/>of<sp/>Dispersion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>deviationFromMean(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>standardDeviation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>variance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>function<sp/>returning<sp/>all<sp/>of<sp/>the<sp/>above<sp/>values<sp/>in<sp/>one<sp/>foul<sp/>swoop<sp/>(performance)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet&lt;std::string, double&gt;</ref><sp/>allDispersions(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Moments,<sp/>Skewness<sp/>and<sp/>Kurtosis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>rth<sp/>moment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>rthMoment(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/>r);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>rth<sp/>moment<sp/>about<sp/>the<sp/>Mean<sp/>m(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>rthMomentMean(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/>r);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>rthMomentMean(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>freq,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/>r);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>rth<sp/>moment<sp/>about<sp/>an<sp/>origin<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>rthMoment(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/>r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>A);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>rth<sp/>moment<sp/>about<sp/>an<sp/>origin<sp/>A<sp/>and<sp/>with<sp/>frequencies<sp/>of<sp/>each<sp/>element<sp/>in<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>rthMoment(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>freq,<sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/>r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>A);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mode:<sp/>either<sp/>the<sp/>middle<sp/>element<sp/>or<sp/>the<sp/>mean<sp/>of<sp/>the<sp/>two<sp/>middle<sp/>elements<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>median(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>occurrences<sp/>of<sp/>value<sp/>d<sp/>in<sp/>vector<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>I<sp/>occurs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>d);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>element<sp/>in<sp/>x<sp/>that<sp/>occurs<sp/>with<sp/>the<sp/>greatest<sp/>frequency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>mode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>skewness(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Extremum<sp/>operations<sp/>on<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>maxValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>minValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>and<sp/>min<sp/>of<sp/>the<sp/>absolute<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>maxAbsValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>minAbsValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Index<sp/>of<sp/>max<sp/>and<sp/>min<sp/>values<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>I<sp/>indexMaxValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>indexMinValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>I<sp/>indexMaxAbsValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>indexMinAbsValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Vector-vector<sp/>extremum<sp/>(difference<sp/>of<sp/>two<sp/>vectors)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>maxValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>minValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>maxAbsValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>minAbsValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Vector<sp/>and<sp/>matrix<sp/>norms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>innerProduct(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>l1Norm(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>l2Norm(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Euclidean<sp/>norm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>lpNorm(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/>p);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>lInfinityNorm(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);<sp/><sp/></highlight><highlight class="comment">//<sp/>L<sp/>infinity<sp/>norm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet&lt;std::string, double&gt;</ref><sp/>allNorms(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Same<sp/>vector<sp/>morms<sp/>as<sp/>above<sp/>except<sp/>for<sp/>the<sp/>difference<sp/>of<sp/>two<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>l1Norm(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>l2Norm(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Euclidean<sp/>norm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>lpNorm(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/>p);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/>lInfinityNorm(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>L<sp/>infinity<sp/>norm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet&lt;std::string, double&gt;</ref><sp/>allNorms(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functions<sp/>for<sp/>Operations<sp/>Research<sp/>and<sp/>Numerical<sp/>Linear<sp/>Algebra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparing<sp/>vectors<sp/>with<sp/>each<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Are<sp/>all<sp/>elements<sp/>of<sp/>a<sp/>vector<sp/>positive?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>positive(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>negative(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Is<sp/>v1<sp/>&lt;<sp/>v2?<sp/>etc.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&lt;<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v2);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&lt;=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v2);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&gt;<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v2);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&gt;=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v2);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>==<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v2);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>!=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v2);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utility<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>STL<sp/>vector<sp/>from<sp/>a<sp/>general<sp/>Vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V&gt;<sp/>std::vector&lt;V&gt;<sp/>createSTLvector<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,int&gt;</ref>&amp;<sp/>myVector);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>general<sp/>Vector<sp/>from<sp/>an<sp/>STL<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V&gt;<sp/><ref refid="classVector" kindref="compound">Vector&lt;V, int&gt;</ref><sp/>createDatasimVector<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;V&gt;&amp;<sp/>mySTLvector);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cumulative<sp/>vector<sp/>c[j]<sp/>=<sp/>c[j-1]<sp/>+<sp/>x[j]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I&gt;</ref><sp/>cumulativeVector<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;V&gt;&amp;<sp/>x);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>First<sp/>shall<sp/>be<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I&gt;</ref><sp/>reverse<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classArray" kindref="compound">Array&lt;V,I&gt;</ref>&amp;<sp/>v);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print<sp/>(<ref refid="classTensor" kindref="compound">Tensor&lt;V, I&gt;</ref>&amp;<sp/>tensor);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../src/ArrayMechanisms.cc&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/duffy/ArrayMechanisms.hh"/>
  </compounddef>
</doxygen>
