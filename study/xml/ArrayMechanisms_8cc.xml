<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="ArrayMechanisms_8cc" kind="file" language="C++">
    <compoundname>ArrayMechanisms.cc</compoundname>
    <includes refid="ArrayMechanisms_8hh" local="no">duffy/ArrayMechanisms.hh</includes>
    <includedby refid="ArrayMechanisms_8hh" local="yes">include/duffy/ArrayMechanisms.hh</includedby>
    <incdepgraph>
      <node id="13">
        <label>list</label>
      </node>
      <node id="4">
        <label>Property.hh</label>
        <link refid="Property_8hh"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>Set.hh</label>
        <link refid="Set_8hh"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>../../src/PropertyThing.cc</label>
        <link refid="PropertyThing_8cc"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>Vector.hh</label>
        <link refid="Vector_8hh"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>SimplePropertySet.hh</label>
        <link refid="SimplePropertySet_8hh"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ArrayStructure.hh</label>
        <link refid="ArrayStructure_8hh"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>../../src/Property.cc</label>
        <link refid="Property_8cc"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>Tensor.hh</label>
        <link refid="Tensor_8hh"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>cmath</label>
      </node>
      <node id="19">
        <label>Array.hh</label>
        <link refid="Array_8hh"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>../../src/Set.cc</label>
        <link refid="Set_8cc"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="36">
        <label>../../src/Matrix.cc</label>
        <link refid="Matrix_8cc"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>map</label>
      </node>
      <node id="2">
        <label>duffy/ArrayMechanisms.hh</label>
        <link refid="ArrayMechanisms_8hh"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>../../src/FullArray.cc</label>
        <link refid="FullArray_8cc"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>Range.hh</label>
        <link refid="Range_8hh"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>../../src/SimplePropertySet.cc</label>
        <link refid="SimplePropertySet_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>Matrix.hh</label>
        <link refid="Matrix_8hh"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>../../src/MatrixStructure.cc</label>
        <link refid="MatrixStructure_8cc"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>../../src/FullMatrix.cc</label>
        <link refid="FullMatrix_8cc"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>FullMatrix.hh</label>
        <link refid="FullMatrix_8hh"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>../../src/Tensor.cc</label>
        <link refid="Tensor_8cc"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>../../src/ArrayStructure.cc</label>
        <link refid="ArrayStructure_8cc"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>PropertyThing.hh</label>
        <link refid="PropertyThing_8hh"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>NumericMatrix.hh</label>
        <link refid="NumericMatrix_8hh"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>../../src/NumericMatrix.cc</label>
        <link refid="NumericMatrix_8cc"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>vector</label>
      </node>
      <node id="1">
        <label>src/ArrayMechanisms.cc</label>
        <link refid="ArrayMechanisms_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>iostream</label>
      </node>
      <node id="21">
        <label>cstddef</label>
      </node>
      <node id="27">
        <label>../../src/Vector.cc</label>
        <link refid="Vector_8cc"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>../../src/Array.cc</label>
        <link refid="Array_8cc"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>../../src/Range.cc</label>
        <link refid="Range_8cc"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>FullArray.hh</label>
        <link refid="FullArray_8hh"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>set</label>
      </node>
      <node id="15">
        <label>algorithm</label>
      </node>
      <node id="33">
        <label>MatrixStructure.hh</label>
        <link refid="MatrixStructure_8hh"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7">
        <label>src/LatticeMechanisms.cc</label>
        <link refid="LatticeMechanisms_8cc"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/duffy/MatrixMechanisms.hh</label>
        <link refid="MatrixMechanisms_8hh"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>src/ExcelDriver.cc</label>
        <link refid="ExcelDriver_8cc"/>
      </node>
      <node id="11">
        <label>tests/TestNewLatticeBasic.cc</label>
        <link refid="TestNewLatticeBasic_8cc"/>
      </node>
      <node id="10">
        <label>tests/TestNewLattice.cc</label>
        <link refid="TestNewLattice_8cc"/>
      </node>
      <node id="2">
        <label>include/duffy/ArrayMechanisms.hh</label>
        <link refid="ArrayMechanisms_8hh"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>src/ExcelMechanisms.cc</label>
        <link refid="ExcelMechanisms_8cc"/>
      </node>
      <node id="14">
        <label>tests/TestSTD.cc</label>
        <link refid="TestSTD_8cc"/>
      </node>
      <node id="9">
        <label>tests/TestLatticeBasic.cc</label>
        <link refid="TestLatticeBasic_8cc"/>
      </node>
      <node id="8">
        <label>tests/director.cc</label>
        <link refid="director_8cc"/>
      </node>
      <node id="15">
        <label>src/IEulerIBVPSolver.cc</label>
        <link refid="IEulerIBVPSolver_8cc"/>
      </node>
      <node id="4">
        <label>src/MatrixMechanisms.cc</label>
        <link refid="MatrixMechanisms_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ArrayMechanisms.cc</label>
        <link refid="ArrayMechanisms_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>tests/TestRanges.cc</label>
        <link refid="TestRanges_8cc"/>
      </node>
      <node id="12">
        <label>tests/TestIBVP.cc</label>
        <link refid="TestIBVP_8cc"/>
      </node>
      <node id="18">
        <label>tests/testBSPDE1.cc</label>
        <link refid="testBSPDE1_8cc"/>
      </node>
      <node id="17">
        <label>tests/TestAssocMatrix.cc</label>
        <link refid="TestAssocMatrix_8cc"/>
      </node>
      <node id="16">
        <label>tests/TestAssocArray.cc</label>
        <link refid="TestAssocArray_8cc"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="ArrayMechanisms_8cc_1a5bbfa6106f64000f9dd4d577e73837f2" prot="public" static="no">
        <name>ArrayMechanisms_CC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="14" column="9" bodyfile="src/ArrayMechanisms.cc" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ArrayMechanisms_8cc_1aea32fac5839587550db96af2d9c443a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V sum</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="19" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="19" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a7383833d1a743d1cf913e8748e03e30d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V product</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>product</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="31" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="31" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a1f180ea2ca6f8377075ebe0078a3a535" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V sumReciprocals</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>sumReciprocals</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="43" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="43" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a259e88a526330c4e69811f4722c472e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V sumAbsoluteValues</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>sumAbsoluteValues</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="58" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="58" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1acbc48d749bdc03cf251b6db7e93df4c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V mean</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>mean</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="72" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="72" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1acdb15569682a2e0bf2c6f8a8f2df74c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V weightedArithMean</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x, const Vector&lt; V, I &gt; &amp;w)</argsstring>
        <name>weightedArithMean</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="80" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="80" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1abc6df0dcf265521ed3239d9292fb7c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V geometricMean</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>geometricMean</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="97" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="97" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a13d345e8be1ef4121580faf897843983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V harmonicMean</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>harmonicMean</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="110" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="110" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a1961ee6c6a6ab7d95cad63dcb8963707" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V quadraticMean</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>quadraticMean</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="118" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1ada1be3fbf31a833d8f891a1d9fbb9f02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V sumSquares</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>sumSquares</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="124" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="124" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a5213d504673342d3276c3335cc092339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet</ref>&lt; std::string, double &gt;</type>
        <definition>SimplePropertySet&lt;std::string, double&gt; allAverages</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>allAverages</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="138" column="33" bodyfile="src/ArrayMechanisms.cc" bodystart="138" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1aabe7146d0ab655df7dea0dda59e33af6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V deviationFromMean</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>deviationFromMean</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="158" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="158" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a7f43379194df79cb9bfc98918b3d107d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V standardDeviation</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>standardDeviation</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="173" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="173" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a039fe821f2cc2ebd29c145218b7e594c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V variance</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>variance</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="189" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="189" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1afa77a0c5d6e72e2000a53be658c5362e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet</ref>&lt; std::string, double &gt;</type>
        <definition>SimplePropertySet&lt;std::string, double&gt; allDispersions</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>allDispersions</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="198" column="33" bodyfile="src/ArrayMechanisms.cc" bodystart="198" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a57b30169c08bc835f06a3b4226d358e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V rthMoment</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x, const I &amp;r)</argsstring>
        <name>rthMoment</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="213" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="213" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1abd89b7368c88dc0c18b171191ffce49c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V rthMomentMean</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x, const I &amp;r)</argsstring>
        <name>rthMomentMean</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="219" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a957257f28fea6eeb6990ac8e4f952691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V rthMomentMean</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x, const Vector&lt; V, I &gt; &amp;freq, const I &amp;r)</argsstring>
        <name>rthMomentMean</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="224" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="224" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1aa20bfe76f87b23f972d4ac012e6b54d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V rthMoment</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x, const I &amp;r, const V &amp;A)</argsstring>
        <name>rthMoment</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="231" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="231" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1ae0e2e3e59d0a00971d76a4d0fc45951a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V rthMoment</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x, const Vector&lt; V, I &gt; &amp;freq, const I &amp;r, const V &amp;A)</argsstring>
        <name>rthMoment</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="243" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="243" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1accd08ee829c11fff840fb28b56c66016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V median</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>median</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="258" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="258" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a4dbe91f78965a3973c017e8fdc01d86c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>I</type>
        <definition>I occurs</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x, const V &amp;d)</argsstring>
        <name>occurs</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="279" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="279" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a5b2af8b958fc1d86e138fb7220db2fae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V mode</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>mode</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="293" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="293" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a51f76c32be87bbb64dc2b2fe77953108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V skewness</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>skewness</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="324" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="324" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a1629e541754df6662b3c7bcf8c7f7e7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V maxValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>maxValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="331" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="331" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a3fd6d636d86485d9e274d6003f9cf981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V minValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>minValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="344" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="344" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a224fe3e8a6c63d545f98b44ebbb2bd77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V maxAbsValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>maxAbsValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="358" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="358" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a1444de407d9592e80d0b9ebcb24d9c9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V minAbsValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>minAbsValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="371" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="371" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a3b3c6f150e27a4d999b14733f81b172c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>I</type>
        <definition>I indexMaxValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>indexMaxValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="386" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="386" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a71ec96ee72e5a63195e9627020c77b91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V indexMinValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>indexMinValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="403" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="403" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1aaa5e1505fda32d2b536b574bd5f7fb0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>I</type>
        <definition>I indexMaxAbsValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>indexMaxAbsValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="421" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="421" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a10dcf29732fc9a591206fed9dad7fdc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V indexMinAbsValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>indexMinAbsValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="439" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="439" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1ae4c6b748a5a46e5d92733fb1d1a34edb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V maxValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB)</argsstring>
        <name>maxValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="457" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="457" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a059efb34fbff2f079f2ca69e04669d95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V minValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB)</argsstring>
        <name>minValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="466" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="466" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a26308a4ecf11e1f8094c7285d7d5f8d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V maxAbsValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB)</argsstring>
        <name>maxAbsValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="474" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="474" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a9c1f380040474c6e32ab6d6da2a3a891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V minAbsValue</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB)</argsstring>
        <name>minAbsValue</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="481" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="481" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a04996c27306bd339cb3776f24044deb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V innerProduct</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x, const Vector&lt; V, I &gt; &amp;y)</argsstring>
        <name>innerProduct</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="490" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="490" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a75a652af753fedaf9991ce139cf6e66a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V l1Norm</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>l1Norm</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="503" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="503" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a668d08308ea702fd8b718c9269666934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V l2Norm</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>l2Norm</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="509" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="509" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1ae40b9d63ad56566ac2e6032014158066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V lpNorm</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x, const I &amp;p)</argsstring>
        <name>lpNorm</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="514" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="514" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a61a3356be620e18abfb8e5ccc92945df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V lInfinityNorm</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>lInfinityNorm</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="526" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="526" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1abe75e0a9b49ea9923c15a384761d13d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet</ref>&lt; std::string, double &gt;</type>
        <definition>SimplePropertySet&lt;std::string, double&gt; allNorms</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>allNorms</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="531" column="33" bodyfile="src/ArrayMechanisms.cc" bodystart="531" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a2da550c1edaab463f866ef24685a7053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet</ref>&lt; std::string, double &gt;</type>
        <definition>SimplePropertySet&lt;std::string, double&gt; allNorms</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB)</argsstring>
        <name>allNorms</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="542" column="33" bodyfile="src/ArrayMechanisms.cc" bodystart="542" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1acd4e52a95d6941dfb88a4c1a88a7b9e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V l1Norm</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB)</argsstring>
        <name>l1Norm</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="550" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="550" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1af986404a5cbb417ec449769a625929b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V l2Norm</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB)</argsstring>
        <name>l2Norm</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="558" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="558" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a385d69301d86f6bbc380ef28a69e0c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V lpNorm</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB, const I &amp;p)</argsstring>
        <name>lpNorm</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <param>
          <type>const I &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="565" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="565" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a1791ba9ec7602ca00189b3d031edf634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V lInfinityNorm</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;vectorA, const Vector&lt; V, I &gt; &amp;vectorB)</argsstring>
        <name>lInfinityNorm</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="572" column="17" bodyfile="src/ArrayMechanisms.cc" bodystart="572" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1ac6a295c94e7d2e90ae8514dcf05377e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool positive</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>positive</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="584" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="584" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1af844f9e94257e30adb2557f72bc776fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool negative</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>negative</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="597" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="597" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a7c74d80e1384b34d96195b6fb7abea03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;v1, const Vector&lt; V, I &gt; &amp;v2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="611" column="15" bodyfile="src/ArrayMechanisms.cc" bodystart="611" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a10d1dbb4bde9b31e016ae7f59e66d75e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;v1, const Vector&lt; V, I &gt; &amp;v2)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="625" column="15" bodyfile="src/ArrayMechanisms.cc" bodystart="625" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a537b17e660b3bfc1ed9a5ea8eb5b8fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;v1, const Vector&lt; V, I &gt; &amp;v2)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="639" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="639" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1ac246693b295956f27f5823380e5f0941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;v1, const Vector&lt; V, I &gt; &amp;v2)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="652" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="652" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a5b73c0e302fb50e0a12d98287b641acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;v1, const Vector&lt; V, I &gt; &amp;v2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="666" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="666" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a76316bb45bc18b42f0098871aa970fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;v1, const Vector&lt; V, I &gt; &amp;v2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="679" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="679" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1abd5321c0d9d995769f70d91eca8e8e5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; V &gt;</type>
        <definition>std::vector&lt;V&gt; createSTLvector</definition>
        <argsstring>(const Vector&lt; V, int &gt; &amp;myVector)</argsstring>
        <name>createSTLvector</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, int &gt; &amp;</type>
          <declname>myVector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="688" column="25" bodyfile="src/ArrayMechanisms.cc" bodystart="688" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a78a90de96c8a055b6921cb51fe868cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, int &gt;</type>
        <definition>Vector&lt;V, int&gt; createDatasimVector</definition>
        <argsstring>(const std::vector&lt; V &gt; &amp;mySTLvector)</argsstring>
        <name>createDatasimVector</name>
        <param>
          <type>const std::vector&lt; V &gt; &amp;</type>
          <declname>mySTLvector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="702" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="702" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1ae92f1779b28708717fc43981b0d7e721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt;</type>
        <definition>Vector&lt;V, I&gt; cumulativeVector</definition>
        <argsstring>(const std::vector&lt; V &gt; &amp;x)</argsstring>
        <name>cumulativeVector</name>
        <param>
          <type>const std::vector&lt; V &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="715" column="22" bodyfile="src/ArrayMechanisms.cc" bodystart="715" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1aa733a8c1b1c2946f0dee2369a2c0988d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt;</type>
        <definition>Vector&lt;V, I&gt; reverse</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;x)</argsstring>
        <name>reverse</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="730" column="22" bodyfile="src/ArrayMechanisms.cc" bodystart="730" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a7a738d11c1fc7a5a9204c8c2adb08402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void print</definition>
        <argsstring>(const Array&lt; V, I &gt; &amp;v)</argsstring>
        <name>print</name>
        <param>
          <type>const <ref refid="classArray" kindref="compound">Array</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="744" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="744" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a499368a9dddb1f6b8d6fb75eb6b9297d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void print</definition>
        <argsstring>(const Vector&lt; V, I &gt; &amp;v)</argsstring>
        <name>print</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="759" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="759" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="ArrayMechanisms_8cc_1a6ff31a903affcca53d6aa3b526b8be2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void print</definition>
        <argsstring>(Tensor&lt; V, I &gt; &amp;tensor)</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="classTensor" kindref="compound">Tensor</ref>&lt; V, I &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ArrayMechanisms.cc" line="772" column="20" bodyfile="src/ArrayMechanisms.cc" bodystart="772" bodyend="781"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>arraymechanisms.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2003-8-1<sp/>Initial<sp/>code<sp/>DD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2003-80-6<sp/>DD<sp/>major<sp/>code<sp/>review<sp/>and<sp/>changes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2004-4-3<sp/>DD<sp/>testing<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2004-4-9<sp/>DD<sp/>Code<sp/>review<sp/>and<sp/>final<sp/>fiat<sp/>(for<sp/>time<sp/>being)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2005-6-19<sp/>DD<sp/>print<sp/>function<sp/>for<sp/>Tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2005-1-8<sp/>DD<sp/>big<sp/>fix<sp/>in<sp/>l2Norm<sp/>(wrong<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Datasim<sp/>Education<sp/>BV<sp/>2003-2004</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ArrayMechanisms_CC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="ArrayMechanisms_8cc_1a5bbfa6106f64000f9dd4d577e73837f2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ArrayMechanisms_CC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ArrayMechanisms_8hh" kindref="compound">duffy/ArrayMechanisms.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sums<sp/>and<sp/>averages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="ArrayMechanisms_8cc_1aea32fac5839587550db96af2d9c443a0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1aea32fac5839587550db96af2d9c443a0" kindref="member">sum</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>x[x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()];</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()+1;<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>x[j];</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="ArrayMechanisms_8cc_1a7383833d1a743d1cf913e8748e03e30d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a7383833d1a743d1cf913e8748e03e30d" kindref="member">product</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Product<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>x[x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()];</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()<sp/>+<sp/>1;<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>*=<sp/>x[j];</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="ArrayMechanisms_8cc_1a1f180ea2ca6f8377075ebe0078a3a535" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a1f180ea2ca6f8377075ebe0078a3a535" kindref="member">sumReciprocals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)<sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>of<sp/>reciprocals<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Precondition<sp/>(PREC):<sp/>x<sp/>is<sp/>(strictly)<sp/>positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>V(0.0);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>1.0/x[j];</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="ArrayMechanisms_8cc_1a259e88a526330c4e69811f4722c472e6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a259e88a526330c4e69811f4722c472e6" kindref="member">sumAbsoluteValues</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)<sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>of<sp/>reciprocals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>fabs(x[x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()]);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()+1;<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>fabs(x[j]);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mean<sp/>value<sp/>==<sp/>sum()<sp/>/<sp/>N<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="ArrayMechanisms_8cc_1acbc48d749bdc03cf251b6db7e93df4c4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1acbc48d749bdc03cf251b6db7e93df4c4" kindref="member">mean</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1aea32fac5839587550db96af2d9c443a0" kindref="member">sum</ref>(x)<sp/>/<sp/>V(x.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Weighted<sp/>arithmetic<sp/>mean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="ArrayMechanisms_8cc_1acdb15569682a2e0bf2c6f8a8f2df74c9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1acdb15569682a2e0bf2c6f8a8f2df74c9" kindref="member">weightedArithMean</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>w)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PREC:<sp/>x<sp/>and<sp/>w<sp/>have<sp/>the<sp/>same<sp/>size;<sp/>start<sp/>indexes<sp/>not<sp/>necessarily<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PREC:<sp/>sum(w)<sp/>is<sp/>not<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>V(0.0);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>w[j]<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans<sp/>/<sp/><ref refid="ArrayMechanisms_8cc_1aea32fac5839587550db96af2d9c443a0" kindref="member">sum</ref>(w);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Geometric<sp/>mean<sp/>or<sp/>geometric<sp/>average<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="ArrayMechanisms_8cc_1abc6df0dcf265521ed3239d9292fb7c62" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1abc6df0dcf265521ed3239d9292fb7c62" kindref="member">geometricMean</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>x[x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()];</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()<sp/>+<sp/>1;<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>*=<sp/>x[j];</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pow(ans,<sp/>1.0<sp/>/<sp/>x.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>()<sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Harmonic<sp/>mean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="ArrayMechanisms_8cc_1a13d345e8be1ef4121580faf897843983" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a13d345e8be1ef4121580faf897843983" kindref="member">harmonicMean</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PREC:<sp/>sumReciprocals(x)<sp/>not<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>V(x.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>())<sp/>/<sp/><ref refid="ArrayMechanisms_8cc_1a1f180ea2ca6f8377075ebe0078a3a535" kindref="member">sumReciprocals</ref>(x);</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Root<sp/>mean<sp/>square<sp/>(RMS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="ArrayMechanisms_8cc_1a1961ee6c6a6ab7d95cad63dcb8963707" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a1961ee6c6a6ab7d95cad63dcb8963707" kindref="member">quadraticMean</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(<sp/><ref refid="ArrayMechanisms_8cc_1ada1be3fbf31a833d8f891a1d9fbb9f02" kindref="member">sumSquares</ref>(x)<sp/>/<sp/>V(x.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>())<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sum<sp/>of<sp/>squares</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="ArrayMechanisms_8cc_1ada1be3fbf31a833d8f891a1d9fbb9f02" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1ada1be3fbf31a833d8f891a1d9fbb9f02" kindref="member">sumSquares</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>V(0.0);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>(x[j]<sp/>*<sp/>x[j]);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>function<sp/>returning<sp/>all<sp/>of<sp/>the<sp/>above<sp/>values<sp/>in<sp/>one<sp/>foul<sp/>swoop<sp/>(performance)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="ArrayMechanisms_8cc_1a5213d504673342d3276c3335cc092339" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet&lt;std::string, double&gt;</ref><sp/><ref refid="ArrayMechanisms_8cc_1a5213d504673342d3276c3335cc092339" kindref="member">allAverages</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet&lt;std::string, double&gt;</ref><sp/>result;<sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classSimplePropertySet_1a8663619c5669177f23286672ad49ceca" kindref="member">add</ref>(<ref refid="classProperty" kindref="compound">Property&lt;std::string, double&gt;</ref><sp/>(</highlight><highlight class="stringliteral">&quot;SUM&quot;</highlight><highlight class="normal">,<sp/><ref refid="ArrayMechanisms_8cc_1aea32fac5839587550db96af2d9c443a0" kindref="member">sum</ref>(x)));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classSimplePropertySet_1a8663619c5669177f23286672ad49ceca" kindref="member">add</ref>(<ref refid="classProperty" kindref="compound">Property&lt;std::string, double&gt;</ref><sp/>(</highlight><highlight class="stringliteral">&quot;PRODUCT&quot;</highlight><highlight class="normal">,<sp/><ref refid="ArrayMechanisms_8cc_1a7383833d1a743d1cf913e8748e03e30d" kindref="member">product</ref>(x)));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classSimplePropertySet_1a8663619c5669177f23286672ad49ceca" kindref="member">add</ref>(<ref refid="classProperty" kindref="compound">Property&lt;std::string, double&gt;</ref><sp/>(</highlight><highlight class="stringliteral">&quot;SUMREC&quot;</highlight><highlight class="normal">,<sp/><ref refid="ArrayMechanisms_8cc_1a1f180ea2ca6f8377075ebe0078a3a535" kindref="member">sumReciprocals</ref>(x)));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classSimplePropertySet_1a8663619c5669177f23286672ad49ceca" kindref="member">add</ref>(<ref refid="classProperty" kindref="compound">Property&lt;std::string, double&gt;</ref><sp/>(</highlight><highlight class="stringliteral">&quot;SUMABSVAL&quot;</highlight><highlight class="normal">,<sp/><ref refid="ArrayMechanisms_8cc_1a259e88a526330c4e69811f4722c472e6" kindref="member">sumAbsoluteValues</ref>(x)));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classSimplePropertySet_1a8663619c5669177f23286672ad49ceca" kindref="member">add</ref>(<ref refid="classProperty" kindref="compound">Property&lt;std::string, double&gt;</ref><sp/>(</highlight><highlight class="stringliteral">&quot;MEAN&quot;</highlight><highlight class="normal">,<sp/><ref refid="ArrayMechanisms_8cc_1acbc48d749bdc03cf251b6db7e93df4c4" kindref="member">mean</ref>(x)));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classSimplePropertySet_1a8663619c5669177f23286672ad49ceca" kindref="member">add</ref>(<ref refid="classProperty" kindref="compound">Property&lt;std::string, double&gt;</ref><sp/>(</highlight><highlight class="stringliteral">&quot;GMEAN&quot;</highlight><highlight class="normal">,<sp/><ref refid="ArrayMechanisms_8cc_1abc6df0dcf265521ed3239d9292fb7c62" kindref="member">geometricMean</ref>(x)));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classSimplePropertySet_1a8663619c5669177f23286672ad49ceca" kindref="member">add</ref>(<ref refid="classProperty" kindref="compound">Property&lt;std::string, double&gt;</ref><sp/>(</highlight><highlight class="stringliteral">&quot;HMEAN&quot;</highlight><highlight class="normal">,<sp/><ref refid="ArrayMechanisms_8cc_1a13d345e8be1ef4121580faf897843983" kindref="member">harmonicMean</ref>(x)));</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classSimplePropertySet_1a8663619c5669177f23286672ad49ceca" kindref="member">add</ref>(<ref refid="classProperty" kindref="compound">Property&lt;std::string, double&gt;</ref><sp/>(</highlight><highlight class="stringliteral">&quot;RMS&quot;</highlight><highlight class="normal">,<sp/><ref refid="ArrayMechanisms_8cc_1a1961ee6c6a6ab7d95cad63dcb8963707" kindref="member">quadraticMean</ref>(x)));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classSimplePropertySet_1a8663619c5669177f23286672ad49ceca" kindref="member">add</ref>(<ref refid="classProperty" kindref="compound">Property&lt;std::string, double&gt;</ref><sp/>(</highlight><highlight class="stringliteral">&quot;SUMSQ&quot;</highlight><highlight class="normal">,<sp/><ref refid="ArrayMechanisms_8cc_1ada1be3fbf31a833d8f891a1d9fbb9f02" kindref="member">sumSquares</ref>(x)));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Measures<sp/>of<sp/>Dispersion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="ArrayMechanisms_8cc_1aabe7146d0ab655df7dea0dda59e33af6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1aabe7146d0ab655df7dea0dda59e33af6" kindref="member">deviationFromMean</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1acbc48d749bdc03cf251b6db7e93df4c4" kindref="member">mean</ref><sp/>=<sp/><ref refid="ArrayMechanisms_8cc_1acbc48d749bdc03cf251b6db7e93df4c4" kindref="member">mean</ref>(x);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>V(0.0);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>std::fabs(x[j]<sp/>-<sp/><ref refid="ArrayMechanisms_8cc_1acbc48d749bdc03cf251b6db7e93df4c4" kindref="member">mean</ref>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans<sp/>/<sp/>x.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>();</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="ArrayMechanisms_8cc_1a7f43379194df79cb9bfc98918b3d107d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a7f43379194df79cb9bfc98918b3d107d" kindref="member">standardDeviation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>myMean<sp/>=<sp/><ref refid="ArrayMechanisms_8cc_1acbc48d749bdc03cf251b6db7e93df4c4" kindref="member">mean</ref>(x);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>tmp;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>V(0.0);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>x[j]<sp/>-<sp/>myMean;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>tmp*tmp;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(ans<sp/>/<sp/>V(x.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>()));</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="ArrayMechanisms_8cc_1a039fe821f2cc2ebd29c145218b7e594c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a039fe821f2cc2ebd29c145218b7e594c" kindref="member">variance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>s<sp/>=<sp/><ref refid="ArrayMechanisms_8cc_1a7f43379194df79cb9bfc98918b3d107d" kindref="member">standardDeviation</ref>(x);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s*s;</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>function<sp/>returning<sp/>all<sp/>of<sp/>the<sp/>above<sp/>values<sp/>in<sp/>one<sp/>foul<sp/>swoop<sp/>(performance)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="ArrayMechanisms_8cc_1afa77a0c5d6e72e2000a53be658c5362e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet&lt;std::string, double&gt;</ref><sp/><ref refid="ArrayMechanisms_8cc_1afa77a0c5d6e72e2000a53be658c5362e" kindref="member">allDispersions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet&lt;std::string, double&gt;</ref><sp/>result;<sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classSimplePropertySet_1a8663619c5669177f23286672ad49ceca" kindref="member">add</ref>(<ref refid="classProperty" kindref="compound">Property&lt;std::string, double&gt;</ref><sp/>(</highlight><highlight class="stringliteral">&quot;MDEV&quot;</highlight><highlight class="normal">,<sp/><ref refid="ArrayMechanisms_8cc_1aabe7146d0ab655df7dea0dda59e33af6" kindref="member">deviationFromMean</ref>(x)));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classSimplePropertySet_1a8663619c5669177f23286672ad49ceca" kindref="member">add</ref>(<ref refid="classProperty" kindref="compound">Property&lt;std::string, double&gt;</ref><sp/>(</highlight><highlight class="stringliteral">&quot;STD&quot;</highlight><highlight class="normal">,<sp/><ref refid="ArrayMechanisms_8cc_1a7f43379194df79cb9bfc98918b3d107d" kindref="member">standardDeviation</ref>(x)));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classSimplePropertySet_1a8663619c5669177f23286672ad49ceca" kindref="member">add</ref>(<ref refid="classProperty" kindref="compound">Property&lt;std::string, double&gt;</ref><sp/>(</highlight><highlight class="stringliteral">&quot;VARIANCE&quot;</highlight><highlight class="normal">,<sp/><ref refid="ArrayMechanisms_8cc_1a039fe821f2cc2ebd29c145218b7e594c" kindref="member">variance</ref>(x)));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Moments,<sp/>Skewness<sp/>and<sp/>Kurtosis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>rth<sp/>moment<sp/>about<sp/>the<sp/>value<sp/>0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="ArrayMechanisms_8cc_1a57b30169c08bc835f06a3b4226d358e3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a57b30169c08bc835f06a3b4226d358e3" kindref="member">rthMoment</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/><ref refid="namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723" kindref="member">r</ref>)</highlight></codeline>
<codeline lineno="214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a57b30169c08bc835f06a3b4226d358e3" kindref="member">rthMoment</ref>(x,<sp/><ref refid="namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723" kindref="member">r</ref>,<sp/>0.0);</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>rth<sp/>moment<sp/>about<sp/>the<sp/>Mean<sp/>m(r)<sp/>as<sp/>a<sp/>special<sp/>origin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="ArrayMechanisms_8cc_1abd89b7368c88dc0c18b171191ffce49c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1abd89b7368c88dc0c18b171191ffce49c" kindref="member">rthMomentMean</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/><ref refid="namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723" kindref="member">r</ref>)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a57b30169c08bc835f06a3b4226d358e3" kindref="member">rthMoment</ref>(x,<sp/><ref refid="namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723" kindref="member">r</ref>,<sp/><ref refid="ArrayMechanisms_8cc_1acbc48d749bdc03cf251b6db7e93df4c4" kindref="member">mean</ref>(x));</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="ArrayMechanisms_8cc_1a957257f28fea6eeb6990ac8e4f952691" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1abd89b7368c88dc0c18b171191ffce49c" kindref="member">rthMomentMean</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>freq,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/><ref refid="namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723" kindref="member">r</ref>)</highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a57b30169c08bc835f06a3b4226d358e3" kindref="member">rthMoment</ref>(x,<sp/>freq,<sp/><ref refid="namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723" kindref="member">r</ref>,<sp/><ref refid="ArrayMechanisms_8cc_1acbc48d749bdc03cf251b6db7e93df4c4" kindref="member">mean</ref>(x));</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>rth<sp/>moment<sp/>about<sp/>an<sp/>origin<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="ArrayMechanisms_8cc_1aa20bfe76f87b23f972d4ac012e6b54d4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a57b30169c08bc835f06a3b4226d358e3" kindref="member">rthMoment</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/><ref refid="namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723" kindref="member">r</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>A)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>V(0.0);<sp/>V<sp/>pr<sp/>=<sp/>V(<ref refid="namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723" kindref="member">r</ref>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>std::pow(x[j]<sp/>-<sp/>A,<sp/>pr);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans<sp/>/<sp/>x.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>();</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="ArrayMechanisms_8cc_1ae0e2e3e59d0a00971d76a4d0fc45951a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a57b30169c08bc835f06a3b4226d358e3" kindref="member">rthMoment</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>freq,<sp/></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/><ref refid="namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723" kindref="member">r</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>A)</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>V(0.0);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>vr<sp/>=<sp/>V(<ref refid="namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723" kindref="member">r</ref>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>freq[j]<sp/>*<sp/>pow(x[j]<sp/>-<sp/>A,<sp/>vr);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans<sp/>/<sp/><ref refid="ArrayMechanisms_8cc_1aea32fac5839587550db96af2d9c443a0" kindref="member">sum</ref>(freq);</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mode:<sp/>either<sp/>the<sp/>middel<sp/>element<sp/>or<sp/>the<sp/>mean<sp/>of<sp/>the<sp/>two<sp/>middle<sp/>elements<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="ArrayMechanisms_8cc_1accd08ee829c11fff840fb28b56c66016" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1accd08ee829c11fff840fb28b56c66016" kindref="member">median</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;V&gt;<sp/>v<sp/>=<sp/><ref refid="ArrayMechanisms_8cc_1abd5321c0d9d995769f70d91eca8e8e5e" kindref="member">createSTLvector</ref>(x);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>stable_sort(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>v<sp/>is<sp/>sorted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de" kindref="member">N</ref><sp/>=<sp/>v.size();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de" kindref="member">N</ref>/2)*2<sp/>==<sp/><ref refid="TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de" kindref="member">N</ref>)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Even<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(v[<ref refid="TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de" kindref="member">N</ref>/2]<sp/>+<sp/>v[(<ref refid="TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de" kindref="member">N</ref>/2)<sp/>-<sp/>1])<sp/>*<sp/>V(0.5);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v[<ref refid="TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de" kindref="member">N</ref>/2];</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>occurrences<sp/>of<sp/>value<sp/>d<sp/>in<sp/>vector<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="ArrayMechanisms_8cc_1a4dbe91f78965a3973c017e8fdc01d86c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>I<sp/><ref refid="ArrayMechanisms_8cc_1a4dbe91f78965a3973c017e8fdc01d86c" kindref="member">occurs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>d)</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>I<sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>==<sp/>x[j])</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result++;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>element<sp/>in<sp/>x<sp/>that<sp/>occurs<sp/>with<sp/>the<sp/>greatest<sp/>frequency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="ArrayMechanisms_8cc_1a5b2af8b958fc1d86e138fb7220db2fae" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a5b2af8b958fc1d86e138fb7220db2fae" kindref="member">mode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>that<sp/>occurs<sp/>with<sp/>the<sp/>greatest<sp/>frequency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exx.<sp/>Code<sp/>can<sp/>be<sp/>optimized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;V,<sp/>I&gt;<sp/>elements;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>unique<sp/>list<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements[x[j]]<sp/>=<sp/><ref refid="ArrayMechanisms_8cc_1a4dbe91f78965a3973c017e8fdc01d86c" kindref="member">occurs</ref>(x,<sp/>x[j]);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::map&lt;V,<sp/>I&gt;::iterator<sp/>i<sp/>=<sp/>elements.begin();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>I<sp/>ans<sp/>=<sp/>(*i).second;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>result<sp/>=<sp/>(*i).first;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>elements.end())</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ans<sp/>&lt;<sp/>(*i).second)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(*i).second;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="ArrayMechanisms_8cc_1a51f76c32be87bbb64dc2b2fe77953108" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a51f76c32be87bbb64dc2b2fe77953108" kindref="member">skewness</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="ArrayMechanisms_8cc_1acbc48d749bdc03cf251b6db7e93df4c4" kindref="member">mean</ref>(x)<sp/>-<sp/><ref refid="ArrayMechanisms_8cc_1a5b2af8b958fc1d86e138fb7220db2fae" kindref="member">mode</ref>(x))<sp/>/<sp/><ref refid="ArrayMechanisms_8cc_1a7f43379194df79cb9bfc98918b3d107d" kindref="member">standardDeviation</ref>(x);</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Extremum<sp/>operations<sp/>on<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="ArrayMechanisms_8cc_1a1629e541754df6662b3c7bcf8c7f7e7a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a1629e541754df6662b3c7bcf8c7f7e7a" kindref="member">maxValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>x[x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()];</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()<sp/>+<sp/>1;<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ans<sp/>&lt;<sp/>x[j])</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>x[j];</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="ArrayMechanisms_8cc_1a3fd6d636d86485d9e274d6003f9cf981" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a3fd6d636d86485d9e274d6003f9cf981" kindref="member">minValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>x[x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()];</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()<sp/>+<sp/>1;<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ans<sp/>&gt;<sp/>x[j])</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>x[j];</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>and<sp/>min<sp/>of<sp/>the<sp/>absolute<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358" refid="ArrayMechanisms_8cc_1a224fe3e8a6c63d545f98b44ebbb2bd77" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a224fe3e8a6c63d545f98b44ebbb2bd77" kindref="member">maxAbsValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>std::fabs(x[x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()]);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()<sp/>+<sp/>1;<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ans<sp/>&lt;<sp/>std::fabs(x[j]))</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>std::fabs(x[j]);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="ArrayMechanisms_8cc_1a1444de407d9592e80d0b9ebcb24d9c9f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a1444de407d9592e80d0b9ebcb24d9c9f" kindref="member">minAbsValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="372"><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>std::fabs(x[x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()]);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()<sp/>+<sp/>1;<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ans<sp/>&gt;<sp/>std::fabs(x[j]))</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>std::fabs(x[j]);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Index<sp/>of<sp/>max<sp/>and<sp/>min<sp/>values<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386" refid="ArrayMechanisms_8cc_1a3b3c6f150e27a4d999b14733f81b172c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>I<sp/><ref refid="ArrayMechanisms_8cc_1a3b3c6f150e27a4d999b14733f81b172c" kindref="member">indexMaxValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>I<sp/>index<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>x[x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()];</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()<sp/>+<sp/>1;<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ans<sp/>&lt;<sp/>x[j])</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>x[j];</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="ArrayMechanisms_8cc_1a71ec96ee72e5a63195e9627020c77b91" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a71ec96ee72e5a63195e9627020c77b91" kindref="member">indexMinValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>I<sp/>index<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>x[x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()];</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()<sp/>+<sp/>1;<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ans<sp/>&gt;<sp/>x[j])</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>x[j];</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421" refid="ArrayMechanisms_8cc_1aaa5e1505fda32d2b536b574bd5f7fb0f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>I<sp/><ref refid="ArrayMechanisms_8cc_1aaa5e1505fda32d2b536b574bd5f7fb0f" kindref="member">indexMaxAbsValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>I<sp/>index<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>std::fabs(x[x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()]);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()<sp/>+<sp/>1;<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ans<sp/>&lt;<sp/>std::fabs(x[j]))</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>std::fabs(x[j]);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439" refid="ArrayMechanisms_8cc_1a10dcf29732fc9a591206fed9dad7fdc7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a10dcf29732fc9a591206fed9dad7fdc7" kindref="member">indexMinAbsValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>I<sp/>index<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>std::fabs(x[x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()]);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()<sp/>+<sp/>1;<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ans<sp/>&gt;<sp/>std::fabs(x[j]))</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>std::fabs(x[j]);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Vector-vector<sp/>extremum<sp/>(difference<sp/>of<sp/>two<sp/>vectors)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457" refid="ArrayMechanisms_8cc_1ae4c6b748a5a46e5d92733fb1d1a34edb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a1629e541754df6662b3c7bcf8c7f7e7a" kindref="member">maxValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB)</highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PREC:<sp/>A<sp/>and<sp/>B<sp/>have<sp/>same<sp/>size<sp/>(holds<sp/>for<sp/>all<sp/>the<sp/>following<sp/>functions<sp/>too)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref><sp/>vecDiff<sp/>=<sp/>vectorA<sp/>-<sp/>vectorB;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a1629e541754df6662b3c7bcf8c7f7e7a" kindref="member">maxValue</ref>(vecDiff);</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="ArrayMechanisms_8cc_1a059efb34fbff2f079f2ca69e04669d95" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a3fd6d636d86485d9e274d6003f9cf981" kindref="member">minValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref><sp/>vecDiff<sp/>=<sp/>vectorA<sp/>-<sp/>vectorB;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a3fd6d636d86485d9e274d6003f9cf981" kindref="member">minValue</ref>(vecDiff);</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474" refid="ArrayMechanisms_8cc_1a26308a4ecf11e1f8094c7285d7d5f8d8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a224fe3e8a6c63d545f98b44ebbb2bd77" kindref="member">maxAbsValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB)</highlight></codeline>
<codeline lineno="475"><highlight class="normal">{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref><sp/>vecDiff<sp/>=<sp/>vectorA<sp/>-<sp/>vectorB;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a224fe3e8a6c63d545f98b44ebbb2bd77" kindref="member">maxAbsValue</ref>(vecDiff);</highlight></codeline>
<codeline lineno="479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481" refid="ArrayMechanisms_8cc_1a9c1f380040474c6e32ab6d6da2a3a891" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a1444de407d9592e80d0b9ebcb24d9c9f" kindref="member">minAbsValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB)</highlight></codeline>
<codeline lineno="482"><highlight class="normal">{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref><sp/>vecDiff<sp/>=<sp/>vectorA<sp/>-<sp/>vectorB;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a1444de407d9592e80d0b9ebcb24d9c9f" kindref="member">minAbsValue</ref>(vecDiff);</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Vector<sp/>and<sp/>matrix<sp/>norms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490" refid="ArrayMechanisms_8cc_1a04996c27306bd339cb3776f24044deb4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a04996c27306bd339cb3776f24044deb4" kindref="member">innerProduct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>y)</highlight></codeline>
<codeline lineno="491"><highlight class="normal">{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PREC:<sp/>x<sp/>and<sp/>y<sp/>have<sp/>same<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>V(0.0);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>x[j]<sp/>*<sp/>y[j];</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503" refid="ArrayMechanisms_8cc_1a75a652af753fedaf9991ce139cf6e66a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a75a652af753fedaf9991ce139cf6e66a" kindref="member">l1Norm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="504"><highlight class="normal">{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a259e88a526330c4e69811f4722c472e6" kindref="member">sumAbsoluteValues</ref>(x);</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>&lt;class<sp/>V,<sp/>class<sp/>I&gt;<sp/>V<sp/>ManyToManyRelationorm(const<sp/>Vector&lt;V,I&gt;&amp;<sp/>x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="ArrayMechanisms_8cc_1a668d08308ea702fd8b718c9269666934" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a668d08308ea702fd8b718c9269666934" kindref="member">l2Norm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="510"><highlight class="normal">{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(<ref refid="ArrayMechanisms_8cc_1ada1be3fbf31a833d8f891a1d9fbb9f02" kindref="member">sumSquares</ref>(x));</highlight></codeline>
<codeline lineno="512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514" refid="ArrayMechanisms_8cc_1ae40b9d63ad56566ac2e6032014158066" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1ae40b9d63ad56566ac2e6032014158066" kindref="member">lpNorm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/>p)</highlight></codeline>
<codeline lineno="515"><highlight class="normal">{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>ans<sp/>=<sp/>V(0.0);<sp/>V<sp/>myPower<sp/>=<sp/>V(p);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>std::pow(x[j],<sp/>myPower);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pow(ans,<sp/>V(1.0)/<sp/>myPower);</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526" refid="ArrayMechanisms_8cc_1a61a3356be620e18abfb8e5ccc92945df" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a61a3356be620e18abfb8e5ccc92945df" kindref="member">lInfinityNorm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="527"><highlight class="normal">{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a224fe3e8a6c63d545f98b44ebbb2bd77" kindref="member">maxAbsValue</ref>(x);</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531" refid="ArrayMechanisms_8cc_1abe75e0a9b49ea9923c15a384761d13d8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet&lt;std::string, double&gt;</ref><sp/><ref refid="ArrayMechanisms_8cc_1abe75e0a9b49ea9923c15a384761d13d8" kindref="member">allNorms</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="532"><highlight class="normal">{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet&lt;std::string, double&gt;</ref><sp/>result;<sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classSimplePropertySet_1a8663619c5669177f23286672ad49ceca" kindref="member">add</ref>(<ref refid="classProperty" kindref="compound">Property&lt;std::string, double&gt;</ref><sp/>(</highlight><highlight class="stringliteral">&quot;l1&quot;</highlight><highlight class="normal">,<sp/><ref refid="ArrayMechanisms_8cc_1a75a652af753fedaf9991ce139cf6e66a" kindref="member">l1Norm</ref>(x)));</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classSimplePropertySet_1a8663619c5669177f23286672ad49ceca" kindref="member">add</ref>(<ref refid="classProperty" kindref="compound">Property&lt;std::string, double&gt;</ref><sp/>(</highlight><highlight class="stringliteral">&quot;l2&quot;</highlight><highlight class="normal">,<sp/>ManyToManyRelationorm(x)));</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classSimplePropertySet_1a8663619c5669177f23286672ad49ceca" kindref="member">add</ref>(<ref refid="classProperty" kindref="compound">Property&lt;std::string, double&gt;</ref><sp/>(</highlight><highlight class="stringliteral">&quot;linf&quot;</highlight><highlight class="normal">,<sp/><ref refid="ArrayMechanisms_8cc_1a61a3356be620e18abfb8e5ccc92945df" kindref="member">lInfinityNorm</ref>(x)));</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542" refid="ArrayMechanisms_8cc_1a2da550c1edaab463f866ef24685a7053" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/><ref refid="classSimplePropertySet" kindref="compound">SimplePropertySet&lt;std::string, double&gt;</ref><sp/><ref refid="ArrayMechanisms_8cc_1abe75e0a9b49ea9923c15a384761d13d8" kindref="member">allNorms</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB)</highlight></codeline>
<codeline lineno="543"><highlight class="normal">{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref><sp/>vecDiff<sp/>=<sp/>vectorA<sp/>-<sp/>vectorB;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1abe75e0a9b49ea9923c15a384761d13d8" kindref="member">allNorms</ref>(vecDiff);</highlight></codeline>
<codeline lineno="547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Same<sp/>vector<sp/>morms<sp/>as<sp/>above<sp/>except<sp/>for<sp/>the<sp/>difference<sp/>of<sp/>two<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550" refid="ArrayMechanisms_8cc_1acd4e52a95d6941dfb88a4c1a88a7b9e6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a75a652af753fedaf9991ce139cf6e66a" kindref="member">l1Norm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB)</highlight></codeline>
<codeline lineno="551"><highlight class="normal">{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref><sp/>vecDiff<sp/>=<sp/>vectorA<sp/>-<sp/>vectorB;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a75a652af753fedaf9991ce139cf6e66a" kindref="member">l1Norm</ref>(vecDiff);</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>&lt;class<sp/>V,<sp/>class<sp/>I&gt;<sp/>V<sp/>ManyToManyRelationorm(const<sp/>Vector&lt;V,I&gt;&amp;<sp/>vectorA,<sp/>const<sp/>Vector&lt;V,I&gt;&amp;<sp/>vectorB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558" refid="ArrayMechanisms_8cc_1af986404a5cbb417ec449769a625929b0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a668d08308ea702fd8b718c9269666934" kindref="member">l2Norm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB)</highlight></codeline>
<codeline lineno="559"><highlight class="normal">{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref><sp/>vecDiff<sp/>=<sp/>vectorA<sp/>-<sp/>vectorB;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a668d08308ea702fd8b718c9269666934" kindref="member">l2Norm</ref>(vecDiff);</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565" refid="ArrayMechanisms_8cc_1a385d69301d86f6bbc380ef28a69e0c51" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1ae40b9d63ad56566ac2e6032014158066" kindref="member">lpNorm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/>p)</highlight></codeline>
<codeline lineno="566"><highlight class="normal">{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref><sp/>vecDiff<sp/>=<sp/>vectorA<sp/>-<sp/>vectorB;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1ae40b9d63ad56566ac2e6032014158066" kindref="member">lpNorm</ref>(vecDiff,<sp/>p);</highlight></codeline>
<codeline lineno="570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572" refid="ArrayMechanisms_8cc_1a1791ba9ec7602ca00189b3d031edf634" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/>V<sp/><ref refid="ArrayMechanisms_8cc_1a61a3356be620e18abfb8e5ccc92945df" kindref="member">lInfinityNorm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>vectorB)</highlight></codeline>
<codeline lineno="573"><highlight class="normal">{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref><sp/>vecDiff<sp/>=<sp/>vectorA<sp/>-<sp/>vectorB;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a61a3356be620e18abfb8e5ccc92945df" kindref="member">lInfinityNorm</ref>(vecDiff);</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functions<sp/>for<sp/>Operations<sp/>Research</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparing<sp/>vectors<sp/>with<sp/>each<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Are<sp/>all<sp/>elements<sp/>of<sp/>a<sp/>vector<sp/>positive?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="ArrayMechanisms_8cc_1ac6a295c94e7d2e90ae8514dcf05377e5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1ac6a295c94e7d2e90ae8514dcf05377e5" kindref="member">positive</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>zero<sp/>=<sp/>V(0.0);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x[j]<sp/>&lt;=<sp/>zero)</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597" refid="ArrayMechanisms_8cc_1af844f9e94257e30adb2557f72bc776fe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1af844f9e94257e30adb2557f72bc776fe" kindref="member">negative</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="598"><highlight class="normal">{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>zero<sp/>=<sp/>V(0.0);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x[j]<sp/>&gt;=<sp/>zero)</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Is<sp/>v1<sp/>&lt;<sp/>v2?<sp/>etc.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611" refid="ArrayMechanisms_8cc_1a7c74d80e1384b34d96195b6fb7abea03" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a7c74d80e1384b34d96195b6fb7abea03" kindref="member">operator &lt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v2)</highlight></codeline>
<codeline lineno="612"><highlight class="normal">{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>in<sp/>the<sp/>matrix;<sp/>when<sp/>the<sp/>condition<sp/>is<sp/>NOT<sp/>true<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(the<sp/>inverse<sp/>of<sp/>the<sp/>inequality)<sp/>then<sp/>exit<sp/>and<sp/>return<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>v1.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>v1.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v1[j]<sp/>&gt;=<sp/>v2[j])</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625" refid="ArrayMechanisms_8cc_1a10d1dbb4bde9b31e016ae7f59e66d75e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a10d1dbb4bde9b31e016ae7f59e66d75e" kindref="member">operator &lt;= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v2)</highlight></codeline>
<codeline lineno="626"><highlight class="normal">{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>in<sp/>the<sp/>matrix;<sp/>when<sp/>the<sp/>condition<sp/>is<sp/>NOT<sp/>true<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(the<sp/>inverse<sp/>of<sp/>the<sp/>inequality)<sp/>then<sp/>exit<sp/>and<sp/>return<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>v1.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>v1.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v1[j]<sp/>&gt;<sp/>v2[j])</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639" refid="ArrayMechanisms_8cc_1a537b17e660b3bfc1ed9a5ea8eb5b8fe5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a537b17e660b3bfc1ed9a5ea8eb5b8fe5" kindref="member">operator &gt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v2)</highlight></codeline>
<codeline lineno="640"><highlight class="normal">{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>in<sp/>the<sp/>matrix;<sp/>when<sp/>the<sp/>condition<sp/>is<sp/>NOT<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(the<sp/>inverse<sp/>of<sp/>the<sp/>inequality)<sp/>then<sp/>exit<sp/>and<sp/>return<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>v1.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>v1.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v1[j]<sp/>&lt;=<sp/>v2[j])</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652" refid="ArrayMechanisms_8cc_1ac246693b295956f27f5823380e5f0941" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1ac246693b295956f27f5823380e5f0941" kindref="member">operator &gt;= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v2)</highlight></codeline>
<codeline lineno="653"><highlight class="normal">{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>in<sp/>the<sp/>matrix;<sp/>when<sp/>the<sp/>condition<sp/>is<sp/>NOT<sp/>true<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(the<sp/>inverse<sp/>of<sp/>the<sp/>inequality)<sp/>then<sp/>exit<sp/>and<sp/>return<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>v1.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>v1.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v1[j]<sp/>&lt;<sp/>v2[j])</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666" refid="ArrayMechanisms_8cc_1a5b73c0e302fb50e0a12d98287b641acb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a5b73c0e302fb50e0a12d98287b641acb" kindref="member">operator == </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v2)</highlight></codeline>
<codeline lineno="667"><highlight class="normal">{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>in<sp/>the<sp/>matrix;<sp/>when<sp/>the<sp/>condition<sp/>is<sp/>NOT<sp/>true<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(the<sp/>inverse<sp/>of<sp/>the<sp/>inequality)<sp/>then<sp/>exit<sp/>and<sp/>return<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>v1.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>v1.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v1[j]<sp/>!=<sp/>v2[j])</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679" refid="ArrayMechanisms_8cc_1a76316bb45bc18b42f0098871aa970fac" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a76316bb45bc18b42f0098871aa970fac" kindref="member">operator != </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v2)</highlight></codeline>
<codeline lineno="680"><highlight class="normal">{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v1<sp/>==<sp/>v2)<sp/></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utility<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688" refid="ArrayMechanisms_8cc_1abd5321c0d9d995769f70d91eca8e8e5e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V&gt;<sp/>std::vector&lt;V&gt;<sp/><ref refid="ArrayMechanisms_8cc_1abd5321c0d9d995769f70d91eca8e8e5e" kindref="member">createSTLvector</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,int&gt;</ref>&amp;<sp/>myVector)</highlight></codeline>
<codeline lineno="689"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>STL<sp/>vector<sp/>from<sp/>a<sp/>general<sp/>Vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;V&gt;<sp/>result(myVector.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>result.size();<sp/>i++)</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>myVector[i+myVector.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()];</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702" refid="ArrayMechanisms_8cc_1a78a90de96c8a055b6921cb51fe868cef" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V&gt;<sp/><ref refid="classVector" kindref="compound">Vector&lt;V, int&gt;</ref><sp/><ref refid="ArrayMechanisms_8cc_1a78a90de96c8a055b6921cb51fe868cef" kindref="member">createDatasimVector</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;V&gt;&amp;<sp/>mySTLvector)</highlight></codeline>
<codeline lineno="703"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>general<sp/>Vector<sp/>from<sp/>an<sp/>STL<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, int&gt;</ref><sp/>result(mySTLvector.size());</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>result.MinIndex();<sp/>i<sp/>&lt;<sp/>mySTLvector.size();<sp/>i++,<sp/>j++)</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[j]<sp/>=<sp/>mySTLvector[i];</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715" refid="ArrayMechanisms_8cc_1ae92f1779b28708717fc43981b0d7e721" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I&gt;</ref><sp/><ref refid="ArrayMechanisms_8cc_1ae92f1779b28708717fc43981b0d7e721" kindref="member">cumulativeVector</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;V&gt;&amp;<sp/>x)</highlight></codeline>
<codeline lineno="716"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Cumulative<sp/>vector<sp/>c[j]<sp/>=<sp/>c[j-1]<sp/>+<sp/>x[j]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, int&gt;</ref><sp/>result(x.Size(),<sp/>x.MaxIndex());</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>result[x.MinIndex()]<sp/>=<sp/>x[x.MinIndex()];</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>x.MinIndex()<sp/>+<sp/>1;<sp/>i<sp/>&lt;=<sp/>x.MaxIndex();<sp/>i++)</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>result[i-1]<sp/>+<sp/>x[i];</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730" refid="ArrayMechanisms_8cc_1aa733a8c1b1c2946f0dee2369a2c0988d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I&gt;</ref><sp/><ref refid="ArrayMechanisms_8cc_1aa733a8c1b1c2946f0dee2369a2c0988d" kindref="member">reverse</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="731"><highlight class="normal">{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I&gt;</ref><sp/>result(x);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>k<sp/>=<sp/>result.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>k<sp/>&lt;=<sp/>result.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>k++)</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[k]<sp/>=<sp/>x[x.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>()<sp/>-<sp/>k<sp/>+<sp/>x.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()];</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="744" refid="ArrayMechanisms_8cc_1a7a738d11c1fc7a5a9204c8c2adb08402" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a7a738d11c1fc7a5a9204c8c2adb08402" kindref="member">print</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classArray" kindref="compound">Array&lt;V,I&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="745"><highlight class="normal">{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\nMinIndex:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>,<sp/>MaxIndex:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nARR:[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>v.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>v.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>v[j]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759" refid="ArrayMechanisms_8cc_1a499368a9dddb1f6b8d6fb75eb6b9297d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a7a738d11c1fc7a5a9204c8c2adb08402" kindref="member">print</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\nMinIndex:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>,<sp/>MaxIndex:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nARR:[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>j<sp/>=<sp/>v.<ref refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" kindref="member">MinIndex</ref>();<sp/>j<sp/>&lt;=<sp/>v.<ref refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" kindref="member">MaxIndex</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>v[j]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772" refid="ArrayMechanisms_8cc_1a6ff31a903affcca53d6aa3b526b8be2a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ArrayMechanisms_8cc_1a7a738d11c1fc7a5a9204c8c2adb08402" kindref="member">print</ref><sp/>(<ref refid="classTensor" kindref="compound">Tensor&lt;V, I&gt;</ref>&amp;<sp/>tensor)</highlight></codeline>
<codeline lineno="773"><highlight class="normal">{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Tensor,<sp/>Rows<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tensor.<ref refid="classTensor_1a1d19abc6ebc88dcd1e31a9035d4f42f1" kindref="member">Rows</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Columns<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tensor.<ref refid="classTensor_1acb5f71b7416a3361164821b624933dd3" kindref="member">Columns</ref>()<sp/>&lt;&lt;<sp/></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Third<sp/>Dimension<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tensor.<ref refid="classTensor_1a4e12d325ed245411efd1d65c13110368" kindref="member">sizeThird</ref>()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>tensor.<ref refid="classTensor_1aa95268c48800c8ca1dd6243b59a09543" kindref="member">MinThirdIndex</ref>();<sp/>k&lt;=<sp/>tensor.<ref refid="classTensor_1a6266f47513cc5b5924573ac58390b7cb" kindref="member">MaxThirdIndex</ref>();<sp/>k++)</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ArrayMechanisms_8cc_1a7a738d11c1fc7a5a9204c8c2adb08402" kindref="member">print</ref><sp/>(tensor[k]);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/ArrayMechanisms.cc"/>
  </compounddef>
</doxygen>
