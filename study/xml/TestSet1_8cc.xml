<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="TestSet1_8cc" kind="file" language="C++">
    <compoundname>TestSet1.cc</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">set</includes>
    <includes local="no">string</includes>
    <incdepgraph>
      <node id="1">
        <label>tests/TestSet1.cc</label>
        <link refid="TestSet1_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="3">
        <label>set</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="TestSet1_8cc_1a1279cd779f5c62d5b1506dcb120f3019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void print</definition>
        <argsstring>(const std::set&lt; T &gt; &amp;mySet, const std::string &amp;name)</argsstring>
        <name>print</name>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>mySet</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestSet1.cc" line="16" column="18" bodyfile="tests/TestSet1.cc" bodystart="16" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="TestSet1_8cc_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestSet1.cc" line="32" column="5" bodyfile="tests/TestSet1.cc" bodystart="32" bodyend="83"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Testset1.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creating<sp/>sets.<sp/>Simple<sp/>functions<sp/>for<sp/>starters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>1.<sp/>Create<sp/>sets<sp/>with<sp/>string<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>Compare<sp/>sets<sp/>with<sp/>&apos;==&apos;<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>3.<sp/>Swap<sp/>two<sp/>sets<sp/>using<sp/>the<sp/>swap()<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>4.<sp/>Assigning<sp/>sets<sp/>to<sp/>each<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Datasim<sp/>Education<sp/>2003-2006</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="TestSet1_8cc_1a1279cd779f5c62d5b1506dcb120f3019" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="TestSet1_8cc_1a1279cd779f5c62d5b1506dcb120f3019" kindref="member">print</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;&amp;<sp/>mySet,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>contents<sp/>of<sp/>a<sp/>set.<sp/>Notice<sp/>the<sp/>presence<sp/>of<sp/>a<sp/>const<sp/>iterator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>size<sp/>of<sp/>set<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mySet.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;::const_iterator<sp/>i;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>mySet.begin();<sp/>i<sp/>!=<sp/>mySet.end();<sp/>++i)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(*i)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="TestSet1_8cc_1ae66f6b31b5ad750f1fe042a706a4e3d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="TestSet1_8cc_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/><ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>unique<sp/>(new<sp/>elements)<sp/>added</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>.insert(</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>.insert(</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>.insert(</highlight><highlight class="stringliteral">&quot;sigma&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;First<sp/>Size:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref><sp/>(<ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>extra<sp/>elements<sp/>to<sp/>second<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.insert(</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>&quot;Interest<sp/>rate&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.insert(</highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>&quot;Strike<sp/>price&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.insert(</highlight><highlight class="stringliteral">&quot;S&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>&quot;Current<sp/>underlying<sp/>price&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.insert(</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>&quot;Cost<sp/>of<sp/>carry&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSet1_8cc_1a1279cd779f5c62d5b1506dcb120f3019" kindref="member">print</ref>(<ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Second<sp/>set&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.erase(</highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSet1_8cc_1a1279cd779f5c62d5b1506dcb120f3019" kindref="member">print</ref>(<ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Second<sp/>set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Second<sp/>Size:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Are<sp/>the<sp/>sets<sp/>the<sp/>same?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref><sp/>==<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Sets<sp/>have<sp/>same<sp/>elements\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>same<sp/>elements\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>bit<sp/>of<sp/>swapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>swap(<ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>,<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>third<sp/>=<sp/><ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>print<sp/>the<sp/>sets<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSet1_8cc_1a1279cd779f5c62d5b1506dcb120f3019" kindref="member">print</ref>(<ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>,<sp/></highlight><highlight class="stringliteral">&quot;First<sp/>set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSet1_8cc_1a1279cd779f5c62d5b1506dcb120f3019" kindref="member">print</ref>(<ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Second<sp/>set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSet1_8cc_1a1279cd779f5c62d5b1506dcb120f3019" kindref="member">print</ref>(third,<sp/></highlight><highlight class="stringliteral">&quot;Third<sp/>set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>creat<sp/>a<sp/>set<sp/>representing<sp/>Executive<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>execOption(<ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>execOption.insert(</highlight><highlight class="stringliteral">&quot;lambda&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>jump<sp/>rate,<sp/>see<sp/>Haug<sp/>1998</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSet1_8cc_1a1279cd779f5c62d5b1506dcb120f3019" kindref="member">print</ref>(execOption,<sp/></highlight><highlight class="stringliteral">&quot;An<sp/>Executive<sp/>Option&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/TestSet1.cc"/>
  </compounddef>
</doxygen>
