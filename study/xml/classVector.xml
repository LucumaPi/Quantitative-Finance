<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="classVector" kind="class" language="C++" prot="public">
    <compoundname>Vector</compoundname>
    <basecompoundref refid="classArray" prot="public" virt="non-virtual">Array&lt; V, I, S &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>V</declname>
        <defname>V</defname>
      </param>
      <param>
        <type>class</type>
        <declname>I</declname>
        <defname>I</defname>
        <defval>int</defval>
      </param>
      <param>
        <type>class</type>
        <declname>S</declname>
        <defname>S</defname>
        <defval><ref refid="classFullArray" kindref="compound">FullArray</ref>&lt;V&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classVector_1a765046708d9d87fdd6bff0f552cfe5fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vector&lt; V, I, S &gt;::Vector</definition>
        <argsstring>()</argsstring>
        <name>Vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="19" column="1" bodyfile="src/Vector.cc" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a739cc1db2c630929a3f832fb08fd7580" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vector&lt; V, I, S &gt;::Vector</definition>
        <argsstring>(I size)</argsstring>
        <name>Vector</name>
        <param>
          <type>I</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="20" column="1" bodyfile="src/Vector.cc" bodystart="46" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a0005126cfc5b0d8021b44c895a10efb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vector&lt; V, I, S &gt;::Vector</definition>
        <argsstring>(I size, I start)</argsstring>
        <name>Vector</name>
        <param>
          <type>I</type>
          <declname>size</declname>
        </param>
        <param>
          <type>I</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="21" column="1" bodyfile="src/Vector.cc" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1ad5f2b58884b5ede9f73fe3088e24b7ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vector&lt; V, I, S &gt;::Vector</definition>
        <argsstring>(I size, I start, const V &amp;val)</argsstring>
        <name>Vector</name>
        <param>
          <type>I</type>
          <declname>size</declname>
        </param>
        <param>
          <type>I</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="22" column="1" bodyfile="src/Vector.cc" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1ae544cce04c5c298f42170a84fc78feaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vector&lt; V, I, S &gt;::Vector</definition>
        <argsstring>(const Vector&lt; V, I, S &gt; &amp;source)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="23" column="1" bodyfile="src/Vector.cc" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a96a0c65cc8ddb0fa8f56605b27530be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vector&lt; V, I, S &gt;::Vector</definition>
        <argsstring>(const Array&lt; V, I, S &gt; &amp;source)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classArray" kindref="compound">Array</ref>&lt; V, I, S &gt; &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="24" column="1" bodyfile="src/Vector.cc" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a742d398867e106120e62421c1fa4df28" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>Vector&lt; V, I, S &gt;::~Vector</definition>
        <argsstring>()</argsstring>
        <name>~Vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="25" column="9" bodyfile="src/Vector.cc" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1ad1e72c9605dbcaecd4fb0b406bd9e949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
        <definition>Vector&lt; V, I, S &gt; &amp; Vector&lt; V, I, S &gt;::operator=</definition>
        <argsstring>(const Vector&lt; V, I, S &gt; &amp;source)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="29" column="8" bodyfile="src/Vector.cc" bodystart="82" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a4d3ac08839678685a6cc72df5d629588" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt;</type>
        <definition>Vector&lt; V, I, S &gt; Vector&lt; V, I, S &gt;::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>BUG BUG DAMN IT result[i] = - result[i];</para>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="30" column="8" bodyfile="src/Vector.cc" bodystart="95" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a9fd95354ab6ee0b1f9d6176485a5d07e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt;</type>
        <definition>Vector&lt; V, I, S &gt; Vector&lt; V, I, S &gt;::operator/</definition>
        <argsstring>(const V &amp;a) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="51" column="8" bodyfile="src/Vector.cc" bodystart="185" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a078a9a245b2da118666687141b6267ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt;</type>
        <definition>Vector&lt; V, I, S &gt; Vector&lt; V, I, S &gt;::operator+</definition>
        <argsstring>(const Vector&lt; V, I, S &gt; &amp;v) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="53" column="8" bodyfile="src/Vector.cc" bodystart="201" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a64db21574df8fc0fb6f88806946883c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt;</type>
        <definition>Vector&lt; V, I, S &gt; Vector&lt; V, I, S &gt;::operator-</definition>
        <argsstring>(const Vector&lt; V, I, S &gt; &amp;v) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="54" column="8" bodyfile="src/Vector.cc" bodystart="216" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1ac859efad576cfb8d04cdb765da020610" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt;</type>
        <definition>Vector&lt;V, I, S&gt; Vector&lt; V, I, S &gt;::operator*</definition>
        <argsstring>(const Vector&lt; V, I, S &gt; &amp;v) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="55" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a2c7a743ad1d7aacf4a12dc03adbfb985" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt;</type>
        <definition>Vector&lt;V, I, S&gt; Vector&lt; V, I, S &gt;::operator/</definition>
        <argsstring>(const Vector&lt; V, I, S &gt; &amp;v) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="56" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1ac28c73a1721c117307df604977747ce4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
        <definition>Vector&lt; V, I, S &gt; &amp; Vector&lt; V, I, S &gt;::operator+=</definition>
        <argsstring>(const V &amp;v)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="58" column="8" bodyfile="src/Vector.cc" bodystart="232" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1aa34b7c6deb116fa3bf6c1c15129dde1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
        <definition>Vector&lt; V, I, S &gt; &amp; Vector&lt; V, I, S &gt;::operator-=</definition>
        <argsstring>(const V &amp;v)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="59" column="8" bodyfile="src/Vector.cc" bodystart="242" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a0bed077f3b8953872d58ca79e679acc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
        <definition>Vector&lt; V, I, S &gt; &amp; Vector&lt; V, I, S &gt;::operator*=</definition>
        <argsstring>(const V &amp;v)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="60" column="8" bodyfile="src/Vector.cc" bodystart="252" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a8b918b3139b18e5e27a8756bdd6ae3af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
        <definition>Vector&lt; V, I, S &gt; &amp; Vector&lt; V, I, S &gt;::operator/=</definition>
        <argsstring>(const V &amp;v)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="61" column="8" bodyfile="src/Vector.cc" bodystart="262" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a8432fd96e8676fad86aed380d109758d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
        <definition>Vector&lt; V, I, S &gt; &amp; Vector&lt; V, I, S &gt;::operator+=</definition>
        <argsstring>(const Vector&lt; V, I, S &gt; &amp;v)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="63" column="8" bodyfile="src/Vector.cc" bodystart="272" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a95fab83dcb33c37fbc2d4ad08d5bd4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
        <definition>Vector&lt; V, I, S &gt; &amp; Vector&lt; V, I, S &gt;::operator-=</definition>
        <argsstring>(const Vector&lt; V, I, S &gt; &amp;v)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="64" column="8" bodyfile="src/Vector.cc" bodystart="283" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1aad9d123cf2ae44d7321401a7d37905d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
        <definition>Vector&lt; V, I, S &gt; &amp; Vector&lt; V, I, S &gt;::operator*=</definition>
        <argsstring>(const Vector&lt; V, I, S &gt; &amp;v)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="65" column="8" bodyfile="src/Vector.cc" bodystart="294" bodyend="302"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classVector_1a06bf0d108a6880772a9c401b2c1c9f9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V1</type>
          </param>
          <param>
            <type>class I1</type>
          </param>
          <param>
            <type>class S1</type>
          </param>
        </templateparamlist>
        <type>friend <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt;</type>
        <definition>Vector&lt;V, I, S&gt; operator+</definition>
        <argsstring>(const Vector&lt; V1, I1, S1 &gt; &amp;v, const V1 &amp;a)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V1, I1, S1 &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const V1 &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="33" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classVector_1aee35e383ba8ded77bfb4a81e632ba90e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V1</type>
          </param>
          <param>
            <type>class I1</type>
          </param>
          <param>
            <type>class S1</type>
          </param>
        </templateparamlist>
        <type>friend <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt;</type>
        <definition>Vector&lt;V, I, S&gt; operator+</definition>
        <argsstring>(const V1 &amp;a, const Vector&lt; V1, I1, S1 &gt; &amp;v)</argsstring>
        <name>operator+</name>
        <param>
          <type>const V1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V1, I1, S1 &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="36" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classVector_1a46de9a6a17d4e83aea535fedd523e534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V1</type>
          </param>
          <param>
            <type>class I1</type>
          </param>
          <param>
            <type>class S1</type>
          </param>
        </templateparamlist>
        <type>friend <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt;</type>
        <definition>Vector&lt;V, I, S&gt; operator-</definition>
        <argsstring>(const Vector&lt; V1, I1, S1 &gt; &amp;v, const V1 &amp;a)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V1, I1, S1 &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const V1 &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="39" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classVector_1ac4ee0f91525669ef041d18ad8c7b65e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V1</type>
          </param>
          <param>
            <type>class I1</type>
          </param>
          <param>
            <type>class S1</type>
          </param>
        </templateparamlist>
        <type>friend <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt;</type>
        <definition>Vector&lt;V, I, S&gt; operator-</definition>
        <argsstring>(const V1 &amp;a, const Vector&lt; V1, I1, S1 &gt; &amp;v)</argsstring>
        <name>operator-</name>
        <param>
          <type>const V1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V1, I1, S1 &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="42" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classVector_1a8d4e3f3229aae77567c5fbf56687f540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V1</type>
          </param>
          <param>
            <type>class I1</type>
          </param>
          <param>
            <type>class S1</type>
          </param>
        </templateparamlist>
        <type>friend <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt;</type>
        <definition>Vector&lt;V, I, S&gt; operator*</definition>
        <argsstring>(const Vector&lt; V1, I1, S1 &gt; &amp;v, const V1 &amp;a)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V1, I1, S1 &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const V1 &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="45" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classVector_1aabeaa89ffa7b5582fb0ad3d8b7168e92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V1</type>
          </param>
          <param>
            <type>class I1</type>
          </param>
          <param>
            <type>class S1</type>
          </param>
        </templateparamlist>
        <type>friend <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt;</type>
        <definition>Vector&lt;V, I, S&gt; operator*</definition>
        <argsstring>(const V1 &amp;a, const Vector&lt; V1, I1, S1 &gt; &amp;v)</argsstring>
        <name>operator*</name>
        <param>
          <type>const V1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V1, I1, S1 &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="49" column="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>Vector&lt; V, I &gt;</label>
        <link refid="classVector"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; V, I &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Vector&lt; V, I, S &gt;</label>
        <link refid="classVector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Array&lt; V, I, S &gt;</label>
        <link refid="classArray"/>
      </node>
      <node id="3">
        <label>Vector&lt; double, long &gt;</label>
        <link refid="classVector"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; double, long &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Vector&lt; V, I, S &gt;</label>
        <link refid="classVector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Array&lt; V, I, S &gt;</label>
        <link refid="classArray"/>
      </node>
    </collaborationgraph>
    <location file="include/duffy/Vector.hh" line="15" column="1" bodyfile="include/duffy/Vector.hh" bodystart="14" bodyend="66"/>
    <listofallmembers>
      <member refid="classArray_1a825b1a1333fbf75a9a2d8812d02a58e4" prot="public" virt="non-virtual"><scope>Vector</scope><name>Array</name></member>
      <member refid="classArray_1a0c477151b2e9ee7cee999e635c0a53ad" prot="public" virt="non-virtual"><scope>Vector</scope><name>Array</name></member>
      <member refid="classArray_1a16fff3c418cff090289bd944d54e0c18" prot="public" virt="non-virtual"><scope>Vector</scope><name>Array</name></member>
      <member refid="classArray_1ad5271fd679b4a99a110724c4afba2569" prot="public" virt="non-virtual"><scope>Vector</scope><name>Array</name></member>
      <member refid="classArray_1aa3192a8b393ea5fa18885d5db3c152f4" prot="public" virt="non-virtual"><scope>Vector</scope><name>Array</name></member>
      <member refid="classArray_1a8ce7791cd1ec7ba63ec71772a7144965" prot="public" virt="non-virtual"><scope>Vector</scope><name>MaxIndex</name></member>
      <member refid="classArray_1acffe058a1dd631b05fb71a83e27b445a" prot="public" virt="non-virtual"><scope>Vector</scope><name>MinIndex</name></member>
      <member refid="classVector_1a8d4e3f3229aae77567c5fbf56687f540" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator*</name></member>
      <member refid="classVector_1aabeaa89ffa7b5582fb0ad3d8b7168e92" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator*</name></member>
      <member refid="classVector_1ac859efad576cfb8d04cdb765da020610" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator*</name></member>
      <member refid="classVector_1a0bed077f3b8953872d58ca79e679acc7" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator*=</name></member>
      <member refid="classVector_1aad9d123cf2ae44d7321401a7d37905d6" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator*=</name></member>
      <member refid="classVector_1a06bf0d108a6880772a9c401b2c1c9f9a" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator+</name></member>
      <member refid="classVector_1aee35e383ba8ded77bfb4a81e632ba90e" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator+</name></member>
      <member refid="classVector_1a078a9a245b2da118666687141b6267ad" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator+</name></member>
      <member refid="classVector_1ac28c73a1721c117307df604977747ce4" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator+=</name></member>
      <member refid="classVector_1a8432fd96e8676fad86aed380d109758d" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator+=</name></member>
      <member refid="classVector_1a4d3ac08839678685a6cc72df5d629588" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator-</name></member>
      <member refid="classVector_1a46de9a6a17d4e83aea535fedd523e534" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator-</name></member>
      <member refid="classVector_1ac4ee0f91525669ef041d18ad8c7b65e7" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator-</name></member>
      <member refid="classVector_1a64db21574df8fc0fb6f88806946883c5" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator-</name></member>
      <member refid="classVector_1aa34b7c6deb116fa3bf6c1c15129dde1f" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator-=</name></member>
      <member refid="classVector_1a95fab83dcb33c37fbc2d4ad08d5bd4b5" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator-=</name></member>
      <member refid="classVector_1a9fd95354ab6ee0b1f9d6176485a5d07e" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator/</name></member>
      <member refid="classVector_1a2c7a743ad1d7aacf4a12dc03adbfb985" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator/</name></member>
      <member refid="classVector_1a8b918b3139b18e5e27a8756bdd6ae3af" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator/=</name></member>
      <member refid="classVector_1ad1e72c9605dbcaecd4fb0b406bd9e949" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator=</name></member>
      <member refid="classArray_1ac27f5b9655cda7daecc9d09298a454bf" prot="public" virt="non-virtual" ambiguityscope="Array::"><scope>Vector</scope><name>operator=</name></member>
      <member refid="classArray_1a75935c222b8e83ce9e5918196d80a445" prot="public" virt="virtual"><scope>Vector</scope><name>operator[]</name></member>
      <member refid="classArray_1a3e1537efaf9501fc6fe5c75654d3d63e" prot="public" virt="virtual"><scope>Vector</scope><name>operator[]</name></member>
      <member refid="classArray_1a69342621906b355e8244466f9eeece71" prot="public" virt="non-virtual"><scope>Vector</scope><name>Size</name></member>
      <member refid="classVector_1a765046708d9d87fdd6bff0f552cfe5fd" prot="public" virt="non-virtual"><scope>Vector</scope><name>Vector</name></member>
      <member refid="classVector_1a739cc1db2c630929a3f832fb08fd7580" prot="public" virt="non-virtual"><scope>Vector</scope><name>Vector</name></member>
      <member refid="classVector_1a0005126cfc5b0d8021b44c895a10efb9" prot="public" virt="non-virtual"><scope>Vector</scope><name>Vector</name></member>
      <member refid="classVector_1ad5f2b58884b5ede9f73fe3088e24b7ba" prot="public" virt="non-virtual"><scope>Vector</scope><name>Vector</name></member>
      <member refid="classVector_1ae544cce04c5c298f42170a84fc78feaa" prot="public" virt="non-virtual"><scope>Vector</scope><name>Vector</name></member>
      <member refid="classVector_1a96a0c65cc8ddb0fa8f56605b27530be4" prot="public" virt="non-virtual"><scope>Vector</scope><name>Vector</name></member>
      <member refid="classArray_1a1b1a13c1a2d5be706c18eda75f0941dd" prot="public" virt="virtual"><scope>Vector</scope><name>~Array</name></member>
      <member refid="classVector_1a742d398867e106120e62421c1fa4df28" prot="public" virt="virtual"><scope>Vector</scope><name>~Vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
