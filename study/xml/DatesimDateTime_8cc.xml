<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="DatesimDateTime_8cc" kind="file" language="C++">
    <compoundname>DatesimDateTime.cc</compoundname>
    <includes refid="DatesimDateTime_8hh" local="no">duffy/DatesimDateTime.hh</includes>
    <includes local="no">stdio.h</includes>
    <incdepgraph>
      <node id="1">
        <label>src/DatesimDateTime.cc</label>
        <link refid="DatesimDateTime_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ctime</label>
      </node>
      <node id="2">
        <label>duffy/DatesimDateTime.hh</label>
        <link refid="DatesimDateTime_8hh_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>TemporalType.hh</label>
        <link refid="TemporalType_8hh_source"/>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>DateTime.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/****************************************************************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/>Prog.<sp/>Name<sp/>:<sp/>DDatasimDate.CXX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/>Copyright<sp/><sp/>:<sp/>Datasim<sp/>b.v.<sp/>1990<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/>Author<sp/><sp/><sp/><sp/><sp/>:<sp/>Eric<sp/>Manshande<sp/>&amp;<sp/>Henri<sp/>Schenau<sp/><sp/>14-3-1990<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*<sp/>Descr.<sp/><sp/><sp/><sp/><sp/>:<sp/>This<sp/>file<sp/>contains<sp/>the<sp/>class<sp/>DatasimDate.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*****************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Last<sp/>modification<sp/>DatasimDates:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>D<sp/>Duffy<sp/>2003-12-28<sp/>New<sp/>version<sp/>(after<sp/>13<sp/>years!)<sp/>kick<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Many<sp/>thanks<sp/>to<sp/>Eric<sp/>and<sp/>Henry;<sp/>we<sp/>won&apos;t<sp/>see<sp/>your<sp/>kind<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2005-4-15<sp/>DD<sp/>print()<sp/>function<sp/>and<sp/>set_to_dtime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;duffy/DatesimDateTime.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DatasimDateTime::secs_to_DatasimDateTime(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>hour,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>minute,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>second,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>over)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/>calculate<sp/>the<sp/>time<sp/>of<sp/>the<sp/>day<sp/>(hour,<sp/>minute,<sp/>second)<sp/>from</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>given<sp/>seconds<sp/>(which<sp/>is<sp/>the<sp/>number<sp/>of<sp/>seconds<sp/>past<sp/>midnight).</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>the<sp/>number<sp/>of<sp/>seconds<sp/>is<sp/>more<sp/>than<sp/>seconds<sp/>in<sp/>one<sp/>day,<sp/>the</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/>parameter<sp/>&apos;over&apos;<sp/>will<sp/>point<sp/>to<sp/>that<sp/>number<sp/>of<sp/>days<sp/>(seconds<sp/>div<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/>day_seconds)<sp/>if<sp/>the<sp/>parameter<sp/>has<sp/>been<sp/>passed<sp/>(it<sp/>is<sp/>a<sp/>default</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>argument,<sp/>default<sp/>=<sp/>0),<sp/>otherwise<sp/>it<sp/>will<sp/>remain<sp/>0<sp/>(null<sp/>pointer).</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;seconds<sp/>=<sp/>%lu\n&quot;</highlight><highlight class="normal">,<sp/>seconds);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(over<sp/>!=<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parameter<sp/>has<sp/>been<sp/>passed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*over<sp/>=<sp/>seconds<sp/>/<sp/>day_seconds;<sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>days<sp/>in<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>seconds<sp/>%=<sp/>day_seconds;<sp/><sp/><sp/><sp/><sp/>//<sp/>rest<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;seconds<sp/>after<sp/>days<sp/>subtr.<sp/>=<sp/>%lu\n&quot;</highlight><highlight class="normal">,<sp/>seconds);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>hour<sp/>=<sp/>seconds<sp/>/<sp/>3600;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>hours<sp/>from<sp/>midnight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>seconds<sp/>%<sp/>3600;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>minute<sp/>=<sp/>h<sp/>/<sp/>60;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calc.<sp/>minutes<sp/>after<sp/>&apos;hour&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>second<sp/>=<sp/>h<sp/>%<sp/>60;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calc<sp/>seconds<sp/>after<sp/>&apos;minute&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;hour<sp/>=<sp/>%d\nminute<sp/>=<sp/>%d\nsecond<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>hour,<sp/>minute,<sp/>second);</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">secTy<sp/>DatasimDateTime::secs(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hours,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>minutes,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>secos)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/>return<sp/>the<sp/>number<sp/>of<sp/>seconds<sp/>after<sp/>midnight<sp/>(12:00<sp/>AM)<sp/>from</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/>hours,<sp/>minutes<sp/>and<sp/>seconds.<sp/>If<sp/>one<sp/>of<sp/>them<sp/>is<sp/>&lt;<sp/>0<sp/>then<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/>return<sp/>0.<sp/>(=midnight).<sp/>The<sp/>number<sp/>of<sp/>hours,<sp/>minutes<sp/>and<sp/>seconds</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/>may<sp/>be<sp/>any<sp/>value<sp/>(&gt;<sp/>0).</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hours<sp/>&lt;<sp/>0<sp/>OR<sp/>minutes<sp/>&lt;<sp/>0<sp/>OR<sp/>secos<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minutes<sp/>+=<sp/>(secos<sp/>/<sp/>60);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#minutes<sp/>in<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secos<sp/>%=<sp/>60;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rest<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hours<sp/>+=<sp/>(minutes<sp/>/<sp/>60);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#hours<sp/>in<sp/>minutes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minutes<sp/>%=<sp/>60;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rest<sp/>minutes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hours<sp/>%=<sp/>24;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>discard<sp/>day-limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(hours<sp/>*<sp/>60l<sp/>*<sp/>60l<sp/>+<sp/>minutes<sp/>*<sp/>60l<sp/>+<sp/>secos);</highlight><highlight class="comment">//<sp/>total</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>seconds<sp/>after<sp/>12:00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DatasimDateTime::hour_test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hour)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/>test<sp/>if<sp/>hours<sp/>has<sp/>a<sp/>valid<sp/>value.<sp/>It<sp/>must<sp/>be<sp/>between<sp/>0<sp/>and<sp/>23,<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/>(so<sp/>24<sp/>is<sp/>an<sp/>invalid<sp/>value).<sp/>An<sp/>invalid<sp/>hour<sp/>will<sp/>give<sp/>a<sp/>returnvalue</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/>of<sp/>-1,<sp/>a<sp/>valid<sp/>value<sp/>will<sp/>be<sp/>returned.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hour<sp/>&gt;<sp/>23<sp/>OR<sp/>hour<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(hour);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DatasimDateTime::min_test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minutes)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/>test<sp/>if<sp/>minutes<sp/>has<sp/>a<sp/>valid<sp/>value.<sp/>It<sp/>must<sp/>be<sp/>between<sp/>0<sp/>and<sp/>59,<sp/></highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/>(so<sp/>60<sp/>is<sp/>an<sp/>invalid<sp/>value).<sp/>An<sp/>invalid<sp/>value<sp/>will<sp/>give<sp/>a<sp/>returnvalue</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>of<sp/>-1,<sp/>a<sp/>valid<sp/>value<sp/>will<sp/>be<sp/>returned.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minutes<sp/>&gt;<sp/>59<sp/>OR<sp/>minutes<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(minutes);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DatasimDateTime::sec_test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secos)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/>test<sp/>if<sp/>seconds<sp/>has<sp/>a<sp/>valid<sp/>value.<sp/>It<sp/>must<sp/>be<sp/>between<sp/>0<sp/>and<sp/>59,<sp/></highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/>(so<sp/>60<sp/>is<sp/>an<sp/>invalid<sp/>value).<sp/>An<sp/>invalid<sp/>value<sp/>will<sp/>give<sp/>a<sp/>returnvalue</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/>of<sp/>-1,<sp/>a<sp/>valid<sp/>value<sp/>will<sp/>be<sp/>returned.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secos<sp/>&gt;<sp/>59<sp/>OR<sp/>secos<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(secos);</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">DatasimDateTime::DatasimDateTime(secTy<sp/>secs,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>over)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/>construct<sp/>a<sp/>time<sp/>from<sp/>a<sp/>number<sp/>of<sp/>seconds.<sp/>If<sp/>the<sp/>number<sp/>of<sp/></highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/>seconds<sp/>passes<sp/>a<sp/>day-limit<sp/>and<sp/>the<sp/>default<sp/>argument<sp/>&apos;*over&apos;<sp/>has</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/>been<sp/>passed,<sp/>*over<sp/>will<sp/>be<sp/>set<sp/>to<sp/>the<sp/>number<sp/>of<sp/>days<sp/>past.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secs<sp/>&gt;=<sp/>day_seconds<sp/>AND<sp/>over<sp/>!=<sp/>0)<sp/><sp/></highlight><highlight class="comment">//<sp/>past<sp/>day-limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>par.<sp/>&apos;*over&apos;<sp/>passed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>*over<sp/>=<sp/>secs<sp/>/<sp/>day_seconds;<sp/></highlight><highlight class="comment">//<sp/>#days<sp/>past</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>secs<sp/>%=<sp/>day_seconds;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rest<sp/>of<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>seconds<sp/>=<sp/>secs;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal">DatasimDateTime::DatasimDateTime(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref>&amp;<sp/>DatasimDateTime_2)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/>this<sp/>constructor<sp/>is<sp/>for<sp/>the<sp/>copy<sp/>in<sp/>initialization.<sp/>It<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/>really<sp/>necessary<sp/>to<sp/>declare<sp/>this<sp/>one<sp/>because<sp/>a<sp/>bitwise<sp/>copy<sp/>(before</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/>2.00)<sp/>has<sp/>the<sp/>same<sp/>effect.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>seconds<sp/>=<sp/>DatasimDateTime_2.seconds;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal">DatasimDateTime::DatasimDateTime()</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/>default<sp/>constructor.<sp/>Gives<sp/>the<sp/>time<sp/>at<sp/>the<sp/>moment<sp/>of<sp/>creation.</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/>because<sp/>this<sp/>function<sp/>uses<sp/>ANSI<sp/>structures<sp/>and<sp/>function,<sp/>it<sp/></highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/>should<sp/>be<sp/>machine<sp/>independant.</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>local_time;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>to<sp/>hold<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>*t_ptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>struct<sp/>to<sp/>contain<sp/>time,<sp/>date<sp/>etc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>local_time<sp/>=<sp/>time(NULL);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>time<sp/>(and<sp/>date)<sp/>from<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>t_ptr<sp/>=<sp/>localtime(&amp;local_time);<sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>struct<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hour_t<sp/>=<sp/>hour_test(t_ptr-&gt;tm_hour);<sp/></highlight><highlight class="comment">//<sp/>test<sp/>hour.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_t<sp/>=<sp/>min_test(t_ptr-&gt;tm_min);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>minute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sec_t<sp/>=<sp/>sec_test(t_ptr-&gt;tm_sec);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>seconds<sp/>=<sp/>secs(hour_t,<sp/>min_t,<sp/>sec_t);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cal.<sp/>seconds<sp/>from<sp/>midnight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DatasimDateTime::ret_hour()</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/>return<sp/>the<sp/>hour<sp/>of<sp/>the<sp/>day<sp/>from<sp/>this<sp/>DatasimDateTime.</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/>m,<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hour,<sp/>minute<sp/>and<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>secs_to_DatasimDateTime(h,<sp/>m,<sp/>s);<sp/></highlight><highlight class="comment">//<sp/>get<sp/>hour,minute<sp/>and<sp/>seconds<sp/>of<sp/>day</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(h);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>hour<sp/>of<sp/>day</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DatasimDateTime::ret_minute()</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/><sp/>return<sp/>the<sp/>minute<sp/>(0..59)<sp/>past<sp/>last<sp/>hour<sp/>from<sp/>this<sp/>DatasimDateTime.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/>m,<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hour,<sp/>minute<sp/>and<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>secs_to_DatasimDateTime(h,<sp/>m,<sp/>s);<sp/></highlight><highlight class="comment">//<sp/>get<sp/>hour,minute<sp/>and<sp/>seconds<sp/>of<sp/>day</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(m);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>minute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DatasimDateTime::ret_second()</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/><sp/>return<sp/>the<sp/>second<sp/>(0..59)<sp/>past<sp/>last<sp/>minute<sp/>from<sp/>this<sp/>DatasimDateTime.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/>m,<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hour,<sp/>minute<sp/>and<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>secs_to_DatasimDateTime(h,<sp/>m,<sp/>s);<sp/></highlight><highlight class="comment">//<sp/>get<sp/>hour,minute<sp/>and<sp/>seconds<sp/>of<sp/>day</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(s);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DatasimDateTime::operator==(<ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime_2)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/>compare<sp/>two<sp/>DatasimDateTimes.<sp/>Return<sp/>true<sp/>if<sp/>they<sp/>are<sp/>on<sp/>the<sp/>same<sp/>time,<sp/></highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/><sp/>else<sp/>return<sp/>false.<sp/>They<sp/>need<sp/>not<sp/>be<sp/>the<sp/>same<sp/>objects.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seconds<sp/>==<sp/>DatasimDateTime_2.seconds)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">};</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DatasimDateTime::operator!=(<ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime_2)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/><sp/>compare<sp/>two<sp/>DatasimDateTimes.<sp/>Return<sp/>true<sp/>if<sp/>they<sp/>are<sp/>not<sp/>on<sp/>the<sp/>same<sp/>time,<sp/></highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/><sp/>else<sp/>return<sp/>false.<sp/>They<sp/>need<sp/>not<sp/>be<sp/>the<sp/>same<sp/>objects.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seconds<sp/>!=<sp/>DatasimDateTime_2.seconds)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DatasimDateTime::operator&gt;(<ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime_2)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>this<sp/>DatasimDateTime<sp/>is<sp/>later<sp/>than<sp/>DatasimDateTime_2,<sp/>return<sp/>true,<sp/>else<sp/>return<sp/>false.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seconds<sp/>&gt;<sp/>DatasimDateTime_2.seconds)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DatasimDateTime::operator&lt;(<ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime_2)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>this<sp/>DatasimDateTime<sp/>is<sp/>earlier<sp/>than<sp/>DatasimDateTime_2,<sp/>return<sp/>true,<sp/>else<sp/>return<sp/>false.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seconds<sp/>&lt;<sp/>DatasimDateTime_2.seconds)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DatasimDateTime::operator&gt;=(<ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime_2)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>DatasimDateTime_2<sp/>is<sp/>earlier<sp/>than<sp/>this<sp/>DatasimDateTime<sp/>return<sp/>true,<sp/>else<sp/>return<sp/>false.</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seconds<sp/>&gt;=<sp/>DatasimDateTime_2.seconds)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DatasimDateTime::operator&lt;=(<ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime_2)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>DatasimDateTime_2<sp/>is<sp/>later<sp/>than<sp/>this<sp/>DatasimDateTime<sp/>return<sp/>true,<sp/>else<sp/>return<sp/>false.</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seconds<sp/>&lt;=<sp/>DatasimDateTime_2.seconds)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime::operator++()</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/><sp/>add<sp/>1<sp/>second<sp/>to<sp/>this<sp/>DatasimDateTime<sp/>and<sp/>return<sp/>it.<sp/>Discard<sp/>the<sp/>overflow</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/><sp/>fi<sp/>there<sp/>is<sp/>one.</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>seconds++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>second<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>seconds<sp/>%=<sp/>day_seconds;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>discard<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>second<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime::operator--()</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/><sp/>subtract<sp/>1<sp/>second<sp/>from<sp/>this<sp/>DatasimDateTime<sp/>and<sp/>return<sp/>it.<sp/>Discard<sp/>an<sp/></highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/><sp/>underflow<sp/>if<sp/>there<sp/>is<sp/>one.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>seconds<sp/>=<sp/>seconds<sp/>+<sp/>day_seconds<sp/>-<sp/>1;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>second<sp/>earlier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>seconds<sp/>%=<sp/>day_seconds;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>discard<sp/>underflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>second<sp/>earlier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime::operator+(<ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>t2)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/><sp/>add<sp/>two<sp/>DatasimDateTimes.<sp/>If<sp/>the<sp/>resulting<sp/>time<sp/>passes<sp/>a<sp/>day-limit,<sp/>discard</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>overflow.<sp/>return<sp/>the<sp/>added<sp/>time.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>secTy<sp/>tot_sec<sp/>=<sp/>seconds<sp/>+<sp/>t2.seconds;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>total<sp/>#<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>tot_sec<sp/>%=<sp/>day_seconds;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>discard<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>t(tot_sec);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>DatasimDateTime<sp/>from<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(t);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>added<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime::operator+(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>secos)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/><sp/>return<sp/>this<sp/>DatasimDateTime<sp/>+<sp/>#seconds.<sp/>If<sp/>the<sp/>resulting<sp/>time<sp/>passes<sp/>a<sp/>day-limit</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/><sp/>discard<sp/>the<sp/>overflow.<sp/>#seconds<sp/>May<sp/>be<sp/>negative.</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secos<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+<sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref>(secos);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>DatasimDateTime,<sp/>discard<sp/>ovf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+<sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref>(secos<sp/>*<sp/>-1);<sp/></highlight><highlight class="comment">//<sp/>construct<sp/>DatasimDateTime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>DatasimDateTime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime::operator-(<ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>t2)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/><sp/>subtract<sp/>DatasimDateTime_2<sp/>from<sp/>this<sp/>DatasimDateTime.<sp/>If<sp/>the<sp/>resulting<sp/>time<sp/>passes<sp/></highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/><sp/>a<sp/>day-limit,<sp/>discard<sp/>the<sp/>underflow.<sp/>return<sp/>the<sp/>new<sp/>time.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>tmp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>temporary<sp/>DatasimDateTime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&gt;=<sp/>t2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>result<sp/>will<sp/>be<sp/>pos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref>(seconds<sp/>-<sp/>t2.seconds);<sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>seconds<sp/>and<sp/>constr.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>result<sp/>will<sp/>be<sp/>negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref>(day_seconds<sp/>-<sp/>t2.seconds<sp/>+<sp/>seconds);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>positive<sp/>and<sp/>construct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>added<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime::operator-(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nr_secs)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/><sp/>return<sp/>this<sp/>DatasimDateTime<sp/>-<sp/>#seconds.<sp/>If<sp/>the<sp/>resulting<sp/>time<sp/>passes<sp/>a<sp/>day-limit</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/><sp/>discard<sp/>the<sp/>underflow.<sp/>#seconds<sp/>May<sp/>be<sp/>negative.</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nr_secs<sp/>&gt;=<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#seconds<sp/>is<sp/>positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-<sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref>(nr_secs);<sp/></highlight><highlight class="comment">//<sp/>construct<sp/>DatasimDateTime,<sp/>discard<sp/>ovf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#seconds<sp/>is<sp/>negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-<sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref>(nr_secs<sp/>*<sp/>-1);<sp/></highlight><highlight class="comment">//<sp/>construct<sp/>DatasimDateTime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>DatasimDateTime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime::operator+=(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>secos)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/><sp/>add<sp/>a<sp/>number<sp/>of<sp/>seconds<sp/>to<sp/>this<sp/>DatasimDateTime<sp/>and<sp/>return<sp/>it.<sp/>If<sp/>the</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*<sp/><sp/>DatasimDateTime<sp/>passes<sp/>a<sp/>time<sp/>limit,<sp/>discard<sp/>the<sp/>overflow.<sp/>The<sp/>number</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/><sp/>of<sp/>seconds<sp/>may<sp/>be<sp/>positive<sp/>or<sp/>negative.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+<sp/>secos;<sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>operator+,<sp/>add<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>new<sp/>this<sp/>DatasimDateTime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime::operator+=(<ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime_2)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/><sp/>add<sp/>DatasimDateTime_2<sp/>to<sp/>this<sp/>DatasimDateTime<sp/>and<sp/>return<sp/>it.<sp/>If<sp/>the<sp/></highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/><sp/>DatasimDateTime<sp/>passes<sp/>a<sp/>day-limit,<sp/>the<sp/>overflow<sp/>is<sp/>discarded.</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+<sp/>DatasimDateTime_2;<sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>DatasimDateTime_2<sp/>to<sp/>this<sp/>DatasimDateTime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime::operator-=(<ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime_2)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/><sp/>subtract<sp/>DatasimDateTime_2<sp/>from<sp/>this<sp/>DatasimDateTime<sp/>(so<sp/>this<sp/>DatasimDateTime<sp/>will<sp/>be<sp/>changed)</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>return<sp/>it.<sp/>If<sp/>the<sp/>DatasimDateTime<sp/>passes<sp/>day-limit,<sp/>the<sp/>overflow<sp/>will</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*<sp/><sp/>be<sp/>discarded.</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-<sp/>DatasimDateTime_2;<sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>operator-,<sp/>subtract<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime::operator-=(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>secos)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*<sp/><sp/>subtract<sp/>a<sp/>number<sp/>of<sp/>seconds<sp/>from<sp/>this<sp/>DatasimDateTime<sp/>(so<sp/>this<sp/>DatasimDateTime<sp/>will</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*<sp/><sp/>be<sp/>changed)<sp/>and<sp/>return<sp/>it.<sp/>when<sp/>the<sp/>time<sp/>passes<sp/>a<sp/>day-limit,<sp/>the</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/><sp/>underflow<sp/>will<sp/>be<sp/>discarded.<sp/>The<sp/>number<sp/>of<sp/>secons<sp/>may<sp/>be<sp/>positive</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*<sp/><sp/>or<sp/>negative.</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-<sp/>secos;<sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>operator-,<sp/>add<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>new<sp/>this<sp/>DatasimDateTime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime::operator=(<ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime_2)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/><sp/>assign<sp/>DatasimDateTime_2<sp/>to<sp/>this<sp/>DatasimDateTime.<sp/>Check<sp/>ik<sp/>they<sp/>are<sp/>the<sp/>same<sp/>objects</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*<sp/><sp/>(this<sp/>is<sp/>not<sp/>really<sp/>necessary)<sp/>and<sp/>return<sp/>the<sp/>new<sp/>DatasimDateTime<sp/>(a<sp/>reference).</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;DatasimDateTime_2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>beware<sp/>of<sp/>t<sp/>=<sp/>t;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seconds<sp/>=<sp/>DatasimDateTime_2.seconds;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>multiple<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime::add_period(secTy<sp/>secos,<sp/>secTy<sp/>mins,<sp/>secTy<sp/>hours)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*<sp/><sp/>add<sp/>a<sp/>period<sp/>of<sp/>time<sp/>to<sp/>this<sp/>DatasimDateTime.<sp/>The<sp/>number<sp/>of<sp/>seconds<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*<sp/><sp/>any<sp/>value<sp/>(may<sp/>be<sp/>&gt;<sp/>59),<sp/>the<sp/>number<sp/>of<sp/>minutes<sp/>can<sp/>be<sp/>any<sp/>value</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*<sp/><sp/>(may<sp/>be<sp/>&gt;<sp/>59)<sp/>and<sp/>also<sp/>the<sp/>number<sp/>of<sp/>hours<sp/>can<sp/>be<sp/>any<sp/>value<sp/>(may</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*<sp/><sp/>be<sp/>&gt;<sp/>23).<sp/>If<sp/>a<sp/>day-limit<sp/>is<sp/>passed,<sp/>the<sp/>overflow<sp/>will<sp/>be<sp/>discarded.</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal">{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>tmp<sp/>=<sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref>(<sp/>secs(secos,<sp/>mins,<sp/>hours)<sp/>);<sp/></highlight><highlight class="comment">//<sp/>construct<sp/>DatasimDateTime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+<sp/>tmp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>DatasimDateTimes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>new<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime::sub_period(secTy<sp/>secos,<sp/>secTy<sp/>mins,<sp/>secTy<sp/>hours)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*<sp/><sp/>subtract<sp/>a<sp/>period<sp/>of<sp/>time<sp/>from<sp/>this<sp/>DatasimDateTime.<sp/>The<sp/>number<sp/>of<sp/>seconds<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*<sp/><sp/>any<sp/>value<sp/>(may<sp/>be<sp/>&gt;<sp/>59),<sp/>the<sp/>number<sp/>of<sp/>minutes<sp/>can<sp/>be<sp/>any<sp/>value</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*<sp/><sp/>(may<sp/>be<sp/>&gt;<sp/>59)<sp/>and<sp/>also<sp/>the<sp/>number<sp/>of<sp/>hours<sp/>can<sp/>be<sp/>any<sp/>value<sp/>(may</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*<sp/><sp/>be<sp/>&gt;<sp/>23).<sp/>If<sp/>a<sp/>day-limit<sp/>is<sp/>passed,<sp/>the<sp/>underrflow<sp/>will<sp/>be<sp/>discarded.</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>tmp<sp/>=<sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref>(<sp/>secs(secos,<sp/>mins,<sp/>hours)<sp/>);<sp/></highlight><highlight class="comment">//<sp/>construct<sp/>DatasimDateTime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-<sp/>tmp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>DatasimDateTime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>new<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime::add_hours(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hours)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*<sp/><sp/>return<sp/>a<sp/>number<sp/>of<sp/>hours<sp/>added<sp/>to<sp/>this<sp/>DatasimDateTime.<sp/>If<sp/>the<sp/>DatasimDateTime<sp/>passes</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*<sp/><sp/>a<sp/>day-limit,<sp/>the<sp/>overflow<sp/>will<sp/>be<sp/>discarded.<sp/>The<sp/>number<sp/>of<sp/>hours</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*<sp/><sp/>may<sp/>be<sp/>positive<sp/>or<sp/>negative.</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>tmp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>temporary<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hours<sp/>&gt;=<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>positive<sp/>#hours</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>add_period(0,<sp/>0,<sp/>hours);<sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>hours</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>negative<sp/>#hours</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>sub_period(0,<sp/>0,<sp/>hours<sp/>*<sp/>-1);<sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>hours</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime::sub_hours(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hours)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>*<sp/><sp/>return<sp/>a<sp/>number<sp/>of<sp/>hours<sp/>subtracted<sp/>from<sp/>this<sp/>DatasimDateTime.<sp/>If<sp/>the<sp/>DatasimDateTime<sp/></highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>*<sp/><sp/>passes<sp/>a<sp/>day-limit,<sp/>the<sp/>overflow<sp/>will<sp/>be<sp/>discarded.<sp/>The<sp/>number<sp/>of<sp/>hours</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*<sp/><sp/>may<sp/>be<sp/>positive<sp/>or<sp/>negative.</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>tmp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>temporary<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hours<sp/>&gt;=<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>positive<sp/>#hours</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>sub_period(0,<sp/>0,<sp/>hours);<sp/><sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>#hours</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>negative<sp/>#hours</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>add_period(0,<sp/>0,<sp/>hours<sp/>*<sp/>-1);<sp/></highlight><highlight class="comment">//<sp/>add<sp/>#hours</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime::add_minutes(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>minutes)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*<sp/><sp/>return<sp/>a<sp/>number<sp/>of<sp/>minutes<sp/>added<sp/>to<sp/>this<sp/>DatasimDateTime.<sp/>If<sp/>the<sp/>DatasimDateTime<sp/>passes</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/>*<sp/><sp/>a<sp/>day-limit,<sp/>the<sp/>overflow<sp/>will<sp/>be<sp/>discarded.<sp/>The<sp/>number<sp/>of<sp/>minutes</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/>*<sp/><sp/>may<sp/>be<sp/>positive<sp/>or<sp/>negative.</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>tmp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>temporary<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minutes<sp/>&gt;=<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>positive<sp/>#minutes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>add_period(0,<sp/>minutes);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>#minutes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>negative<sp/>#minutes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>sub_period(0,<sp/>minutes<sp/>*<sp/>-1);<sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>minutes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>DatasimDateTime::sub_minutes(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>minutes)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*<sp/><sp/>return<sp/>a<sp/>number<sp/>of<sp/>minutes<sp/>subtracted<sp/>from<sp/>this<sp/>DatasimDateTime.<sp/>If<sp/>the<sp/>DatasimDateTime<sp/></highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*<sp/><sp/>passes<sp/>a<sp/>day-limit,<sp/>the<sp/>overflow<sp/>will<sp/>be<sp/>discarded.<sp/>The<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*<sp/><sp/>minutes<sp/>may<sp/>be<sp/>positive<sp/>or<sp/>negative.</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDatasimDateTime" kindref="compound">DatasimDateTime</ref><sp/>tmp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>temporary<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minutes<sp/>&gt;=<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>positive<sp/>#minutes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>sub_period(0,<sp/>minutes);<sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>#minutes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>negative<sp/>#minutes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>add_period(0,<sp/>minutes<sp/>*<sp/>-1);<sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>#minutes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tmp);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DatasimDateTime::print()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="491"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dtime::delim<sp/>=<sp/>&apos;:&apos;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delim<sp/>=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hour<sp/>=<sp/>0,<sp/>min<sp/>=<sp/>0,<sp/>sec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>secs_to_dtime(hour,<sp/>min,<sp/>sec);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%02d%c%02d%c%02d&quot;</highlight><highlight class="normal">,<sp/>hour,<sp/>delim,<sp/>min,<sp/>delim,<sp/>sec);</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DatasimDateTime::secs_to_dtime(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>hour,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>minute,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>second,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>over)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>*<sp/><sp/>calculate<sp/>the<sp/>time<sp/>of<sp/>the<sp/>day<sp/>(hour,<sp/>minute,<sp/>second)<sp/>from</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>given<sp/>seconds<sp/>(which<sp/>is<sp/>the<sp/>number<sp/>of<sp/>seconds<sp/>past<sp/>midnight).</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>the<sp/>number<sp/>of<sp/>seconds<sp/>is<sp/>more<sp/>than<sp/>seconds<sp/>in<sp/>one<sp/>day,<sp/>the</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>*<sp/><sp/>parameter<sp/>&apos;over&apos;<sp/>will<sp/>point<sp/>to<sp/>that<sp/>number<sp/>of<sp/>days<sp/>(seconds<sp/>div<sp/></highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>*<sp/><sp/>day_seconds)<sp/>if<sp/>the<sp/>parameter<sp/>has<sp/>been<sp/>passed<sp/>(it<sp/>is<sp/>a<sp/>default</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*<sp/><sp/>argument,<sp/>default<sp/>=<sp/>0),<sp/>otherwise<sp/>it<sp/>will<sp/>remain<sp/>0<sp/>(null<sp/>pointer).</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="comment">//printf(&quot;seconds<sp/>=<sp/>%lu\n&quot;,<sp/>seconds);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(over<sp/>!=<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parameter<sp/>has<sp/>been<sp/>passed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*over<sp/>=<sp/>seconds<sp/>/<sp/>day_seconds;<sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>days<sp/>in<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>seconds<sp/>%=<sp/>day_seconds;<sp/><sp/><sp/><sp/><sp/>//<sp/>rest<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment">//printf(&quot;seconds<sp/>after<sp/>days<sp/>subtr.<sp/>=<sp/>%lu\n&quot;,<sp/>seconds);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>hour<sp/>=<sp/>seconds<sp/>/<sp/>3600;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>hours<sp/>from<sp/>midnight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>seconds<sp/>%<sp/>3600;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>minute<sp/>=<sp/>h<sp/>/<sp/>60;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calc.<sp/>minutes<sp/>after<sp/>&apos;hour&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>second<sp/>=<sp/>h<sp/>%<sp/>60;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calc<sp/>seconds<sp/>after<sp/>&apos;minute&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//printf(&quot;hour<sp/>=<sp/>%d\nminute<sp/>=<sp/>%d\nsecond<sp/>=<sp/>%d\n&quot;,<sp/>hour,<sp/>minute,<sp/>second);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/DatesimDateTime.cc"/>
  </compounddef>
</doxygen>
