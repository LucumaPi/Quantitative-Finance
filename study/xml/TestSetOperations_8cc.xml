<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="TestSetOperations_8cc" kind="file" language="C++">
    <compoundname>TestSetOperations.cc</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">set</includes>
    <includes local="no">string</includes>
    <includes local="no">algorithm</includes>
    <incdepgraph>
      <node id="4">
        <label>string</label>
      </node>
      <node id="1">
        <label>tests/TestSetOperations.cc</label>
        <link refid="TestSetOperations_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="3">
        <label>set</label>
      </node>
      <node id="5">
        <label>algorithm</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="TestSetOperations_8cc_1a37609edc4ee4244047729d8ce29ff122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void print</definition>
        <argsstring>(const std::set&lt; T &gt; &amp;l, const std::string &amp;name)</argsstring>
        <name>print</name>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestSetOperations.cc" line="29" column="18" bodyfile="tests/TestSetOperations.cc" bodystart="29" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="TestSetOperations_8cc_1a58f6535f8198f8c942660b07a1dc1743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool subset</definition>
        <argsstring>(const std::set&lt; T &gt; &amp;super, const std::set&lt; T &gt; &amp;sub)</argsstring>
        <name>subset</name>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>super</declname>
        </param>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestSetOperations.cc" line="45" column="18" bodyfile="tests/TestSetOperations.cc" bodystart="45" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="TestSetOperations_8cc_1a5dc29942d8e2fb8832d4527e1516110d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool superset</definition>
        <argsstring>(const std::set&lt; T &gt; &amp;super, const std::set&lt; T &gt; &amp;sub)</argsstring>
        <name>superset</name>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>super</declname>
        </param>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestSetOperations.cc" line="54" column="18" bodyfile="tests/TestSetOperations.cc" bodystart="54" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="TestSetOperations_8cc_1a49ce21c7fb0f30867ca92edd6d951d1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void UnionSet</definition>
        <argsstring>(const std::set&lt; T &gt; &amp;s1, const std::set&lt; T &gt; &amp;s2, std::set&lt; T &gt; &amp;myunion)</argsstring>
        <name>UnionSet</name>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>std::set&lt; T &gt; &amp;</type>
          <declname>myunion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestSetOperations.cc" line="66" column="18" bodyfile="tests/TestSetOperations.cc" bodystart="66" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="TestSetOperations_8cc_1a0c725f9d3727a797b2cbfe5ebe380ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DifferenceSet</definition>
        <argsstring>(const std::set&lt; T &gt; &amp;s1, const std::set&lt; T &gt; &amp;s2, std::set&lt; T &gt; &amp;mydiff)</argsstring>
        <name>DifferenceSet</name>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>std::set&lt; T &gt; &amp;</type>
          <declname>mydiff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestSetOperations.cc" line="75" column="18" bodyfile="tests/TestSetOperations.cc" bodystart="75" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="TestSetOperations_8cc_1ac0e5b69710d850f6e9d4555f964b60b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void IntersectionSet</definition>
        <argsstring>(const std::set&lt; T &gt; &amp;s1, const std::set&lt; T &gt; &amp;s2, std::set&lt; T &gt; &amp;myintersect)</argsstring>
        <name>IntersectionSet</name>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>std::set&lt; T &gt; &amp;</type>
          <declname>myintersect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestSetOperations.cc" line="83" column="18" bodyfile="tests/TestSetOperations.cc" bodystart="83" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="TestSetOperations_8cc_1ad047be612789ce938d427099378b4320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SymmetricDifferenceSet</definition>
        <argsstring>(const std::set&lt; T &gt; &amp;s1, const std::set&lt; T &gt; &amp;s2, std::set&lt; T &gt; &amp;mysdiff)</argsstring>
        <name>SymmetricDifferenceSet</name>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>std::set&lt; T &gt; &amp;</type>
          <declname>mysdiff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestSetOperations.cc" line="90" column="18" bodyfile="tests/TestSetOperations.cc" bodystart="90" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="TestSetOperations_8cc_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestSetOperations.cc" line="99" column="5" bodyfile="tests/TestSetOperations.cc" bodystart="99" bodyend="200"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>TestSetOperations.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>of<sp/>set.Concerned<sp/>with<sp/>interactions<sp/>between<sp/>sets.<sp/>In<sp/>particular,<sp/>we<sp/>look</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>at<sp/>some<sp/>set-like<sp/>operations:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>set_union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>includes<sp/>(is<sp/>A<sp/>a<sp/>subset<sp/>of<sp/>B?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>set_intersection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>set_difference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>set_symmetric_difference<sp/>(see<sp/>section<sp/>20.28<sp/>in<sp/>Musser)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>These<sp/>algorithms<sp/>are<sp/>in<sp/>&lt;algorithm&gt;<sp/>and<sp/>they<sp/>use<sp/>the<sp/>assumption<sp/>that<sp/>all<sp/>elements<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>sorted<sp/>using<sp/>the<sp/>operator<sp/>&lt;.<sp/>Another<sp/>variant<sp/>allows<sp/>us<sp/>to<sp/>use<sp/>a<sp/>comparitor<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>We<sp/>use<sp/>an<sp/>insert<sp/>iterator<sp/>to<sp/>compute<sp/>these<sp/>set<sp/>functions<sp/>(thanks<sp/>to<sp/>JD).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Finally,<sp/>a<sp/>number<sp/>of<sp/>generic<sp/>algorithms<sp/>are<sp/>defined<sp/>that<sp/>promotes<sp/>Information<sp/>Hiding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>so<sp/>that<sp/>STL<sp/>is<sp/>a<sp/>bit<sp/>more<sp/>user-friendly.<sp/>In<sp/>particular,<sp/>we<sp/>do<sp/>not<sp/>have<sp/>to<sp/>worry<sp/>about</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>iterating<sp/>or<sp/>using<sp/>insert<sp/>iterators<sp/>in<sp/>client<sp/>code.<sp/>This<sp/>approach<sp/>would<sp/>form<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>beginnings<sp/>of<sp/>a<sp/>Microkernel<sp/>pattern<sp/>for<sp/>STL<sp/>(see<sp/>the<sp/>patterns<sp/>book<sp/>by<sp/>Buschmann).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Datasim<sp/>Education<sp/>1998-2003</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="TestSetOperations_8cc_1a37609edc4ee4244047729d8ce29ff122" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="TestSetOperations_8cc_1a37609edc4ee4244047729d8ce29ff122" kindref="member">print</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;&amp;<sp/>l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>contents<sp/>of<sp/>a<sp/>set.<sp/>Notice<sp/>the<sp/>presence<sp/>of<sp/>a<sp/>constant<sp/>iterator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>size<sp/>of<sp/>set<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>l.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n[<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;::const_iterator<sp/>i;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>l.begin();<sp/>i<sp/>!=<sp/>l.end();<sp/>++i)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="TestSetOperations_8cc_1a58f6535f8198f8c942660b07a1dc1743" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TestSetOperations_8cc_1a58f6535f8198f8c942660b07a1dc1743" kindref="member">subset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;&amp;<sp/>super,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;&amp;<sp/>sub)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Is<sp/>one<sp/>set<sp/>a<sp/>subset<sp/>of<sp/>another<sp/>set?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sub<sp/>is<sp/>a<sp/>subset<sp/>of<sp/>superset<sp/>iff<sp/>superset<sp/>includes<sp/>sub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>includes(super.begin(),<sp/>super.end(),<sp/>sub.begin(),<sp/>sub.end());</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="TestSetOperations_8cc_1a5dc29942d8e2fb8832d4527e1516110d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TestSetOperations_8cc_1a5dc29942d8e2fb8832d4527e1516110d" kindref="member">superset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;&amp;<sp/>super,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;&amp;<sp/>sub)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Is<sp/>one<sp/>set<sp/>a<sp/>superset<sp/>of<sp/>another<sp/>set?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>superset<sp/>contains<sp/>sub<sp/>iff<sp/>sub<sp/>is<sp/>s<sp/>subset<sp/>of<sp/>superset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="TestSetOperations_8cc_1a58f6535f8198f8c942660b07a1dc1743" kindref="member">subset</ref>(super,<sp/>sub);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Applying<sp/>Information<sp/>Hiding<sp/>to<sp/>the<sp/>union<sp/>of<sp/>two<sp/>sets.<sp/>The<sp/>same<sp/>principles<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>applied<sp/>to<sp/>the<sp/>other<sp/>set<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="TestSetOperations_8cc_1a49ce21c7fb0f30867ca92edd6d951d1a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="TestSetOperations_8cc_1a49ce21c7fb0f30867ca92edd6d951d1a" kindref="member">UnionSet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;&amp;<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;&amp;<sp/>s2,<sp/>std::set&lt;T&gt;&amp;<sp/>myunion)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Union<sp/>of<sp/>two<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;::iterator<sp/>i<sp/>=<sp/>myunion.begin();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>std::insert_iterator&lt;std::set&lt;int&gt;<sp/>&gt;<sp/>insertiter(myunion,<sp/>i);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>set_union(s1.begin(),<sp/>s1.end(),<sp/>s2.begin(),<sp/>s2.end(),<sp/>insertiter);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="TestSetOperations_8cc_1a0c725f9d3727a797b2cbfe5ebe380ffe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="TestSetOperations_8cc_1a0c725f9d3727a797b2cbfe5ebe380ffe" kindref="member">DifferenceSet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;&amp;<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;&amp;<sp/>s2,<sp/>std::set&lt;T&gt;&amp;<sp/>mydiff)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Difference<sp/>of<sp/>two<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;::iterator<sp/>i<sp/>=<sp/>mydiff.begin();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>std::insert_iterator&lt;std::set&lt;int&gt;<sp/>&gt;<sp/>insertiter(mydiff,<sp/>i);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>set_difference(s1.begin(),<sp/>s1.end(),<sp/>s2.begin(),<sp/>s2.end(),<sp/>insertiter);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83" refid="TestSetOperations_8cc_1ac0e5b69710d850f6e9d4555f964b60b9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="TestSetOperations_8cc_1ac0e5b69710d850f6e9d4555f964b60b9" kindref="member">IntersectionSet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;&amp;<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;&amp;<sp/>s2,<sp/>std::set&lt;T&gt;&amp;<sp/>myintersect)</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Intersection<sp/>of<sp/>two<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;::iterator<sp/>i<sp/>=<sp/>myintersect.begin();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>std::insert_iterator&lt;std::set&lt;int&gt;<sp/>&gt;<sp/>insertiter(myintersect,<sp/>i);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>set_intersection(s1.begin(),<sp/>s1.end(),<sp/>s2.begin(),<sp/>s2.end(),<sp/>insertiter);</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90" refid="TestSetOperations_8cc_1ad047be612789ce938d427099378b4320" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="TestSetOperations_8cc_1ad047be612789ce938d427099378b4320" kindref="member">SymmetricDifferenceSet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;&amp;<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;&amp;<sp/>s2,<sp/>std::set&lt;T&gt;&amp;<sp/>mysdiff)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Symmetric<sp/>difference<sp/>of<sp/>two<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;::iterator<sp/>i<sp/>=<sp/>mysdiff.begin();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>std::insert_iterator&lt;std::set&lt;int&gt;<sp/>&gt;<sp/>insertiter(mysdiff,<sp/>i);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>set_symmetric_difference(s1.begin(),<sp/>s1.end(),<sp/>s2.begin(),<sp/>s2.end(),<sp/>insertiter);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="TestSetOperations_8cc_1ae66f6b31b5ad750f1fe042a706a4e3d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="TestSetOperations_8cc_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/><ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>unique<sp/>(new<sp/>elements)<sp/>added</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>.insert(1);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>.insert(2);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>.insert(3);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSetOperations_8cc_1a37609edc4ee4244047729d8ce29ff122" kindref="member">print</ref><sp/>(<ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>,<sp/></highlight><highlight class="stringliteral">&quot;First<sp/>set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref><sp/>(<ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>subsethood<sp/>(in<sp/>other<sp/>words,<sp/>is<sp/>second<sp/>a<sp/>subset<sp/>of<sp/>first?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(includes(<ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>.begin(),<sp/><ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>.end(),<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.begin(),<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.end()))</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;OK,<sp/>second<sp/>set<sp/>is<sp/>a<sp/>subset<sp/>of<sp/>first<sp/>set\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;BAAH<sp/>Not<sp/>a<sp/>subset\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.erase(3);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Checking<sp/>for<sp/>subsethood<sp/>in<sp/>a<sp/>more<sp/>user-friendly<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="TestSetOperations_8cc_1a58f6535f8198f8c942660b07a1dc1743" kindref="member">subset</ref><sp/>(<ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>,<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>)<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Second<sp/>set<sp/>is<sp/>a<sp/>subset<sp/>of<sp/>first,<sp/>OK\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="TestSetOperations_8cc_1a5dc29942d8e2fb8832d4527e1516110d" kindref="member">superset</ref>(<ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>,<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>)<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;First<sp/>set<sp/>is<sp/>a<sp/>superset<sp/>of<sp/>second,<sp/>OK\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="TestSetOperations_8cc_1a5dc29942d8e2fb8832d4527e1516110d" kindref="member">superset</ref><sp/>(<ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>,<sp/><ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Second<sp/>set<sp/>is<sp/>a<sp/>NOT<sp/>a<sp/>superset<sp/>of<sp/>first,<sp/>OK\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.insert(51);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.insert(52);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSetOperations_8cc_1a37609edc4ee4244047729d8ce29ff122" kindref="member">print</ref>(<ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Second<sp/>set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>4<sp/>set<sp/>functions<sp/>use<sp/>an<sp/>insert<sp/>iterator.<sp/>This<sp/>has<sp/>the<sp/>effect<sp/>of<sp/>causing<sp/>an<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insertion<sp/>at<sp/>a<sp/>given<sp/>position<sp/>rather<sp/>than<sp/>the<sp/>usual<sp/>&apos;overwrite&apos;<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>union<sp/>of<sp/>two<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>myunion;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;::iterator<sp/>i<sp/>=<sp/>myunion.begin();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>std::insert_iterator&lt;std::set&lt;int&gt;<sp/>&gt;<sp/>insertiter(myunion,<sp/>i);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>set_union(<ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>.begin(),<sp/><ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>.end(),<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.begin(),<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.end(),<sp/>insertiter);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSetOperations_8cc_1a37609edc4ee4244047729d8ce29ff122" kindref="member">print</ref>(myunion,<sp/></highlight><highlight class="stringliteral">&quot;Union&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>the<sp/>union<sp/>of<sp/>two<sp/>sets<sp/>using<sp/>Information<sp/>Hiding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>myunion2;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSetOperations_8cc_1a49ce21c7fb0f30867ca92edd6d951d1a" kindref="member">UnionSet</ref>(<ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>,<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>,<sp/>myunion2);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSetOperations_8cc_1a37609edc4ee4244047729d8ce29ff122" kindref="member">print</ref><sp/>(myunion2,<sp/></highlight><highlight class="stringliteral">&quot;Union,<sp/>second<sp/>variant&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Intersecton<sp/>of<sp/>two<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>myintersect;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>myintersect.begin();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>std::insert_iterator&lt;std::set&lt;int&gt;<sp/>&gt;<sp/>insertiter2(myintersect,<sp/>i);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>set_intersection(<ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>.begin(),<sp/><ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>.end(),<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.begin(),<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.end(),<sp/>insertiter2);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSetOperations_8cc_1a37609edc4ee4244047729d8ce29ff122" kindref="member">print</ref>(myintersect,<sp/></highlight><highlight class="stringliteral">&quot;Intersection&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Intersection<sp/>using<sp/>Information<sp/>Hiding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>myintersect2;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSetOperations_8cc_1ac0e5b69710d850f6e9d4555f964b60b9" kindref="member">IntersectionSet</ref>(<ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>,<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>,<sp/>myintersect2);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSetOperations_8cc_1a37609edc4ee4244047729d8ce29ff122" kindref="member">print</ref><sp/>(myintersect2,<sp/></highlight><highlight class="stringliteral">&quot;Intersection,<sp/>version<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Difference<sp/>of<sp/>two<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>mydifference;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>mydifference.begin();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>std::insert_iterator&lt;std::set&lt;int&gt;<sp/>&gt;<sp/>insertiter3(mydifference,<sp/>i);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>set_difference(<ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>.begin(),<sp/><ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>.end(),<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.begin(),<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.end(),<sp/>insertiter3);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSetOperations_8cc_1a37609edc4ee4244047729d8ce29ff122" kindref="member">print</ref>(mydifference,<sp/></highlight><highlight class="stringliteral">&quot;Difference&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Difference<sp/>using<sp/>Information<sp/>Hiding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>mydiff2;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSetOperations_8cc_1a0c725f9d3727a797b2cbfe5ebe380ffe" kindref="member">DifferenceSet</ref>(<ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>,<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>,<sp/>mydiff2);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSetOperations_8cc_1a37609edc4ee4244047729d8ce29ff122" kindref="member">print</ref><sp/>(mydiff2,<sp/></highlight><highlight class="stringliteral">&quot;Difference,<sp/>version<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Symmetric<sp/>difference<sp/>of<sp/>two<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>mysymmdifference;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>mysymmdifference.begin();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>std::insert_iterator&lt;std::set&lt;int&gt;<sp/>&gt;<sp/>insertiter4(mysymmdifference,<sp/>i);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>set_symmetric_difference(<ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>.begin(),<sp/><ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>.end(),<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.begin(),<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>.end(),<sp/>insertiter4);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSetOperations_8cc_1a37609edc4ee4244047729d8ce29ff122" kindref="member">print</ref>(mysymmdifference,<sp/></highlight><highlight class="stringliteral">&quot;Symmetric<sp/>difference&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Symmetric<sp/>Difference<sp/>using<sp/>Information<sp/>Hiding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>mysdiff2;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSetOperations_8cc_1ad047be612789ce938d427099378b4320" kindref="member">SymmetricDifferenceSet</ref>(<ref refid="namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1" kindref="member">first</ref>,<sp/><ref refid="namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6" kindref="member">second</ref>,<sp/>mysdiff2);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TestSetOperations_8cc_1a37609edc4ee4244047729d8ce29ff122" kindref="member">print</ref><sp/>(mysdiff2,<sp/></highlight><highlight class="stringliteral">&quot;Symmetric<sp/>Difference,<sp/>version<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/TestSetOperations.cc"/>
  </compounddef>
</doxygen>
