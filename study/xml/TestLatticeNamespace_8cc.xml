<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="TestLatticeNamespace_8cc" kind="file" language="C++">
    <compoundname>TestLatticeNamespace.cc</compoundname>
    <includes refid="Lattice_8hh" local="no">duffy/Lattice.hh</includes>
    <includes local="no">cmath</includes>
    <includedby refid="TestLattice_8cc" local="yes">tests/TestLattice.cc</includedby>
    <includedby refid="TestNewLattice2_8cc" local="yes">tests/TestNewLattice2.cc</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/TestLatticeNamespace.cc</label>
        <link refid="TestLatticeNamespace_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Vector.hh</label>
        <link refid="Vector_8hh"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ArrayStructure.hh</label>
        <link refid="ArrayStructure_8hh"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>../../src/Lattice.cc</label>
        <link refid="Lattice_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>cmath</label>
      </node>
      <node id="2">
        <label>duffy/Lattice.hh</label>
        <link refid="Lattice_8hh"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Array.hh</label>
        <link refid="Array_8hh"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>../../src/FullArray.cc</label>
        <link refid="FullArray_8cc"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>../../src/ArrayStructure.cc</label>
        <link refid="ArrayStructure_8cc"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="6">
        <label>cstddef</label>
      </node>
      <node id="12">
        <label>../../src/Vector.cc</label>
        <link refid="Vector_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>../../src/Array.cc</label>
        <link refid="Array_8cc"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>FullArray.hh</label>
        <link refid="FullArray_8hh"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>src/TestLatticeNamespace.cc</label>
        <link refid="TestLatticeNamespace_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>tests/TestLattice.cc</label>
        <link refid="TestLattice_8cc"/>
      </node>
      <node id="3">
        <label>tests/TestNewLattice2.cc</label>
        <link refid="TestNewLattice2_8cc"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespaceStandardLattice">StandardLattice</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>testLatticeNamespace.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Using<sp/>namespaces<sp/>to<sp/>create<sp/>different<sp/>kinds<sp/>of<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BINOMIAL<sp/>lattices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2005-1-4<sp/>DD<sp/>Kick-off<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2006-3-10<sp/>DD<sp/>simplified<sp/>(no<sp/>global<sp/>data,<sp/>just<sp/>functions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Datasim<sp/>Education<sp/>BV<sp/>2005-2006</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Lattice_8hh" kindref="compound">duffy/Lattice.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="namespaceStandardLattice" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceStandardLattice" kindref="compound">StandardLattice</ref></highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Code<sp/>here<sp/>corresponds<sp/>to<sp/>forward<sp/>induction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="namespaceStandardLattice_1a0ced6d331b2856d61096bdc9aaab15cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLattice" kindref="compound">Lattice&lt;double, int, 2&gt;</ref><sp/><ref refid="namespaceStandardLattice_1a0ced6d331b2856d61096bdc9aaab15cd" kindref="member">createLattice</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de" kindref="member">N</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rootValue,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>up,<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>down)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>above<sp/>parameters<sp/>are<sp/>accessible<sp/>in<sp/>this<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>for<sp/>the<sp/>binomial<sp/>method<sp/>only!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLattice" kindref="compound">Lattice&lt;double, int, 2&gt;</ref><sp/>source(<ref refid="TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de" kindref="member">N</ref><sp/>+<sp/>1,<sp/>0.0);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si<sp/>=<sp/>source.<ref refid="classLattice_1a07442df63222c6627f46efc4ae91acf9" kindref="member">MinIndex</ref>();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source[si][source[si].<ref refid="classLattice_1a07442df63222c6627f46efc4ae91acf9" kindref="member">MinIndex</ref>()]<sp/>=<sp/>rootValue;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>from<sp/>the<sp/>min<sp/>index<sp/>to<sp/>the<sp/>end<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>source.MinIndex()<sp/>+<sp/>1;<sp/>j<sp/>&lt;=<sp/>source.MaxIndex();<sp/>j++)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>source[j].MinIndex();<sp/>i<sp/>&lt;<sp/>source[j].MaxIndex();<sp/>i++)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source[j][i]<sp/>=<sp/>down<sp/>*<sp/>source[j-1][i];</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source[j][i+1]<sp/>=<sp/>up<sp/>*<sp/>source[j-1][i];</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>source;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Code<sp/>here<sp/>corresponds<sp/>to<sp/>backward<sp/>induction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="namespaceStandardLattice_1a3e49a59024bcef068e558f70a756df05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceStandardLattice_1a3e49a59024bcef068e558f70a756df05" kindref="member">traverse</ref>(<ref refid="classLattice" kindref="compound">Lattice&lt;double, int, 2&gt;</ref>&amp;<sp/>lattice,<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, int&gt;</ref>&amp;<sp/><ref refid="classPayoff" kindref="compound">Payoff</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>discounting)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ei<sp/>=<sp/>lattice.<ref refid="classLattice_1a5cac27496a08f2a14d8e1d65732a4c34" kindref="member">MaxIndex</ref>();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lattice[ei]<sp/>=<sp/><ref refid="classPayoff" kindref="compound">Payoff</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>from<sp/>the<sp/>max<sp/>index<sp/>to<sp/>the<sp/>start<sp/>(min)<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="TestImpliedVolatility_8cc_1a927694c350b26693c65f7c8b73b3dba3" kindref="member">n</ref><sp/>=<sp/>lattice.<ref refid="classLattice_1a5cac27496a08f2a14d8e1d65732a4c34" kindref="member">MaxIndex</ref>()<sp/>-<sp/>1;<sp/><ref refid="TestImpliedVolatility_8cc_1a927694c350b26693c65f7c8b73b3dba3" kindref="member">n</ref><sp/>&gt;=<sp/>lattice.<ref refid="classLattice_1a07442df63222c6627f46efc4ae91acf9" kindref="member">MinIndex</ref>();<sp/><ref refid="TestImpliedVolatility_8cc_1a927694c350b26693c65f7c8b73b3dba3" kindref="member">n</ref>--)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>lattice[<ref refid="TestImpliedVolatility_8cc_1a927694c350b26693c65f7c8b73b3dba3" kindref="member">n</ref>].MinIndex();<sp/>i<sp/>&lt;=<sp/>lattice[<ref refid="TestImpliedVolatility_8cc_1a927694c350b26693c65f7c8b73b3dba3" kindref="member">n</ref>].<ref refid="classLattice_1a5cac27496a08f2a14d8e1d65732a4c34" kindref="member">MaxIndex</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lattice[<ref refid="TestImpliedVolatility_8cc_1a927694c350b26693c65f7c8b73b3dba3" kindref="member">n</ref>][i]<sp/>=<sp/>discounting<sp/>*<sp/>(p<sp/>*<sp/>lattice[<ref refid="TestImpliedVolatility_8cc_1a927694c350b26693c65f7c8b73b3dba3" kindref="member">n</ref>+1][i+1]<sp/>+<sp/>(1.0-p)<sp/>*<sp/>lattice[<ref refid="TestImpliedVolatility_8cc_1a927694c350b26693c65f7c8b73b3dba3" kindref="member">n</ref>+1][i]);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//lattice[n][i]<sp/>=<sp/>BackTrace(lattice[n+1][i+1],<sp/>lattice[n+1][i]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si<sp/>=<sp/>lattice.<ref refid="classLattice_1a07442df63222c6627f46efc4ae91acf9" kindref="member">MinIndex</ref>();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lattice[si][lattice[si].<ref refid="classLattice_1a07442df63222c6627f46efc4ae91acf9" kindref="member">MinIndex</ref>()];<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/TestLatticeNamespace.cc"/>
  </compounddef>
</doxygen>
