<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="Complex_8cc" kind="file" language="C++">
    <compoundname>Complex.cc</compoundname>
    <includes refid="Complex_8hh" local="no">duffy/Complex.hh</includes>
    <incdepgraph>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="2">
        <label>duffy/Complex.hh</label>
        <link refid="Complex_8hh_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Complex.cc</label>
        <link refid="Complex_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="Complex_8cc_1a72441d40ccdf70c6c1da4a4afc2263e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex mpi</definition>
        <argsstring>(const Complex &amp;z)</argsstring>
        <name>mpi</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="30" column="9" bodyfile="src/Complex.cc" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1a5785a70cbc18f01a89cdf4235832d1ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double real</definition>
        <argsstring>(const Complex &amp;c)</argsstring>
        <name>real</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="118" column="8" bodyfile="src/Complex.cc" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1aea92c8c79175ecec909cb59c935a0c92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double imag</definition>
        <argsstring>(const Complex &amp;c)</argsstring>
        <name>imag</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="123" column="8" bodyfile="src/Complex.cc" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1ae75939524940d4f2451ee0a5eb066848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rad</definition>
        <argsstring>(const Complex &amp;c)</argsstring>
        <name>rad</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="129" column="8" bodyfile="src/Complex.cc" bodystart="129" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1a3c3f09cbb99680921cde12c2029c8e6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double modulus</definition>
        <argsstring>(const Complex &amp;c)</argsstring>
        <name>modulus</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="135" column="8" bodyfile="src/Complex.cc" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1a45a3ff78ebe036a61d1382aea13de62a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double abs</definition>
        <argsstring>(const Complex &amp;c)</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="140" column="8" bodyfile="src/Complex.cc" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1abe3f055c0daea1aaeea0e669554422a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex operator*</definition>
        <argsstring>(const Complex &amp;c, double d)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="199" column="9" bodyfile="src/Complex.cc" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1a8f7c64a77e1e179f5362bbd9cf5315f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex operator*</definition>
        <argsstring>(double d, const Complex &amp;c)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="204" column="9" bodyfile="src/Complex.cc" bodystart="204" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1a930dab6ca7411b426ec2d30b27b7ea90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex operator+</definition>
        <argsstring>(const Complex &amp;c, double d)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="211" column="9" bodyfile="src/Complex.cc" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1a9e192c9a21e15575f5d9cbf8cb93c59c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex operator+</definition>
        <argsstring>(double d, const Complex &amp;c)</argsstring>
        <name>operator+</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="216" column="9" bodyfile="src/Complex.cc" bodystart="216" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1a5e9ee99637c205e3d2651412955f8e21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex operator-</definition>
        <argsstring>(const Complex &amp;c, double d)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="221" column="9" bodyfile="src/Complex.cc" bodystart="221" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1ac04e31ec5cbb8643690dd6c01bab7e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex operator-</definition>
        <argsstring>(double d, const Complex &amp;c)</argsstring>
        <name>operator-</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="226" column="9" bodyfile="src/Complex.cc" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1a396cd4aba5b5297abb4d57e455528e4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex conjugate</definition>
        <argsstring>(const Complex &amp;z)</argsstring>
        <name>conjugate</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="232" column="9" bodyfile="src/Complex.cc" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1afd49799b1e1745236282adafb1665e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex inverse</definition>
        <argsstring>(const Complex &amp;z)</argsstring>
        <name>inverse</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="237" column="9" bodyfile="src/Complex.cc" bodystart="237" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1aeb56775d93a065d4bd643a5ed679db8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex exp</definition>
        <argsstring>(const Complex &amp;c)</argsstring>
        <name>exp</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="244" column="9" bodyfile="src/Complex.cc" bodystart="244" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1af369383fdcdf6ec5e3a01b215e180c83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex cos</definition>
        <argsstring>(const Complex &amp;z)</argsstring>
        <name>cos</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="251" column="9" bodyfile="src/Complex.cc" bodystart="251" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1af22660b33d2d25b25b83167ef6cf4c5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex sin</definition>
        <argsstring>(const Complex &amp;z)</argsstring>
        <name>sin</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="261" column="9" bodyfile="src/Complex.cc" bodystart="261" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1ac205b42a2eec5378f97dfcc3d6428d93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex cosh</definition>
        <argsstring>(const Complex &amp;z)</argsstring>
        <name>cosh</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="271" column="9" bodyfile="src/Complex.cc" bodystart="271" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1aeaa6c0b46e054ab969bb0511f2bd74a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex sinh</definition>
        <argsstring>(const Complex &amp;z)</argsstring>
        <name>sinh</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="276" column="9" bodyfile="src/Complex.cc" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1a7d9d7cb3216b4415845459dfd948d138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex tanh</definition>
        <argsstring>(const Complex &amp;z)</argsstring>
        <name>tanh</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="281" column="9" bodyfile="src/Complex.cc" bodystart="281" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1a7e0e5dbe50bc627ea25a836ee2d0b3cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex sech</definition>
        <argsstring>(const Complex &amp;z)</argsstring>
        <name>sech</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="287" column="9" bodyfile="src/Complex.cc" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1ad3b049ea6a0d0b0eda2a7837643688eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex csch</definition>
        <argsstring>(const Complex &amp;z)</argsstring>
        <name>csch</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="292" column="9" bodyfile="src/Complex.cc" bodystart="292" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1ad26a758f4d68bdf9e590890bc0e19403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex coth</definition>
        <argsstring>(const Complex &amp;z)</argsstring>
        <name>coth</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="297" column="9" bodyfile="src/Complex.cc" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1aa853f765f528a0e309077c0739f55f97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex tan</definition>
        <argsstring>(const Complex &amp;c)</argsstring>
        <name>tan</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="302" column="9" bodyfile="src/Complex.cc" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1ae6ce3475f7257fa987d0bd4baf821be9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classComplex" kindref="compound">Complex</ref></type>
        <definition>Complex cgt</definition>
        <argsstring>(const Complex &amp;c)</argsstring>
        <name>cgt</name>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="307" column="9" bodyfile="src/Complex.cc" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="Complex_8cc_1add2323a504cf184eb6348f88892a87c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Complex &amp;cmp)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classComplex" kindref="compound">Complex</ref> &amp;</type>
          <declname>cmp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Complex.cc" line="312" column="1" bodyfile="src/Complex.cc" bodystart="312" bodyend="317"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>complex.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Code<sp/>file<sp/>for<sp/>the<sp/>class<sp/>of<sp/>complex<sp/>numbers<sp/>in<sp/>two<sp/>dimensional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>geometry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Last<sp/>modification<sp/>dates:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1993-6-27:<sp/>DD<sp/>new<sp/>functions<sp/>added,<sp/>mainly<sp/>member<sp/>functions<sp/>changed<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global<sp/>functions<sp/>and<sp/>many<sp/>new<sp/>special<sp/>functions<sp/>(e.g.<sp/>arc*.<sp/>sqrt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sinh,<sp/>...).<sp/>Also<sp/>operators<sp/>+<sp/>and<sp/>-<sp/>for<sp/>doubles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1993-7-2:<sp/>DD<sp/>Substantial<sp/>coding<sp/>and<sp/>additions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1993-11-11:<sp/>EB<sp/>initial<sp/>code,<sp/>name<sp/>is<sp/>now<sp/>Complex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1993-11-11:<sp/>EB<sp/>function<sp/>operator<sp/>=<sp/>(double<sp/>d)<sp/>added</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1993-11-23:<sp/>EB<sp/>function<sp/>/(Complex)<sp/>,<sp/>/<sp/>(double),<sp/>operator<sp/><sp/>==,<sp/>degenerate<sp/>modified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1993-11-26:<sp/>EB<sp/>functions<sp/>operator<sp/>&gt;,<sp/>operator<sp/>&lt;<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2005-2-5<sp/>DD<sp/>new<sp/>lease<sp/>of<sp/>life</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2005-11-30<sp/>DD<sp/>added<sp/>sech(z)<sp/>to<sp/>be<sp/>tested<sp/>by<sp/>muniangel<sp/>:)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2006-7-7<sp/>DD<sp/>constructor<sp/>com(double)<sp/>added</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Copyright<sp/>Datasim<sp/>Education<sp/>BV<sp/>1992-2006</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>information<sp/>contained<sp/>in<sp/>this<sp/>file<sp/>is<sp/>property<sp/>of<sp/>Datasim<sp/>Education<sp/>BV<sp/>Amsterdam<sp/>Nederland.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>information<sp/>contained<sp/>herein<sp/>is<sp/>subject<sp/>to<sp/>change<sp/>without<sp/>notice.<sp/>No<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>this<sp/>information<sp/>may<sp/>be<sp/>reproduced<sp/>or<sp/>transmitted<sp/>in<sp/>any<sp/>form<sp/>or<sp/>by<sp/>any<sp/>means,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>electronic<sp/>or<sp/>mechanical,<sp/>for<sp/>any<sp/>purpose,<sp/>without<sp/>the<sp/>express<sp/>written<sp/>permission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>Datasim<sp/>BV.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;duffy/Complex.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>mpi(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>z)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>z<sp/>by<sp/>i<sp/>==<sp/>sqrt(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>(-z.y,<sp/>z.x);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">Complex::Complex()</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Default<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">Complex::Complex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref><sp/>&amp;p)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>initialisor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>p.x;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>p.y;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">Complex::Complex(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>real)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>real;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">Complex::Complex(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>dx;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>dy;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">Complex::~Complex()</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>Complex::operator<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>doing<sp/>assign<sp/>to<sp/>myself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;c)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>c.x;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>c.y;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>Complex::operator<sp/>+=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>c.x;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>c.y;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>Complex::operator<sp/>-=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>c.x;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>-=<sp/>c.y;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>Complex::operator<sp/>/=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classComplex" kindref="compound">Complex</ref><sp/>tmp<sp/>=<sp/>(*this)<sp/>/<sp/>c;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>Complex::operator<sp/>*=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classComplex" kindref="compound">Complex</ref><sp/>tmp<sp/>=<sp/>(*this)<sp/>*<sp/>c;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Complex::xVal()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="109"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Complex::yVal()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="114"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>real(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c.x;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>imag(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c.y;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rad(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Distance<sp/>from<sp/>origin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>std::sqrt((c.x*c.x)<sp/>+<sp/>(c.y*c.y));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>modulus(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="136"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Distance<sp/>from<sp/>the<sp/>origin<sp/>(Same<sp/>as<sp/>the<sp/>rad()<sp/>function)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rad(c);</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>abs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Absolute<sp/>value<sp/>of<sp/>the<sp/>complex<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rad(c);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Complex::distance<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c2)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Euclidean<sp/>distance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt((x-c2.x)*(x-c2.x)<sp/>+<sp/>(y-c2.y)*(y-c2.y));</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Member<sp/>operator<sp/>overloading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>Complex::operator<sp/>-<sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="153"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>The<sp/>additive<sp/>inverse<sp/>of<sp/>the<sp/>current<sp/>complex<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>(-<sp/>x,<sp/>-<sp/>y);</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>Complex::add(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c2)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="158"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>two<sp/>complex<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classComplex" kindref="compound">Complex</ref><sp/>result;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>result.x<sp/>=<sp/>x<sp/>+<sp/>c2.x;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>result.y<sp/>=<sp/>y<sp/>+<sp/>c2.y;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>Complex::operator<sp/>+<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c2)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="167"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>two<sp/>complex<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>(x<sp/>+<sp/>c2.x,<sp/>y<sp/>+<sp/>c2.y);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>Complex::operator<sp/>-<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c2)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="171"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>two<sp/>complex<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>(x<sp/>-<sp/>c2.x,<sp/>y<sp/>-<sp/>c2.y);</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>Complex::operator<sp/>*<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c2)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="176"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>two<sp/>complex<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>((x<sp/>*<sp/>c2.x)<sp/>-<sp/>(y<sp/>*<sp/>c2.y),</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x<sp/>*<sp/>c2.y)<sp/>+<sp/>(y<sp/>*<sp/>c2.x));</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>Complex::operator<sp/>/<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c2)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="182"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Division<sp/>of<sp/>complex<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classComplex" kindref="compound">Complex</ref><sp/>res;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>modulus(c2);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>r<sp/>*<sp/>r;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classComplex" kindref="compound">Complex</ref><sp/>tmp1<sp/>=<sp/>conjugate(c2);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classComplex" kindref="compound">Complex</ref><sp/>tmp2<sp/>=<sp/>tmp1<sp/>*<sp/>(*this);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=tmp2/d;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>Complex::operator<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="194"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Division<sp/>of<sp/>the<sp/>complex<sp/>number<sp/>by<sp/>a<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>(x<sp/>/<sp/>d,<sp/>y<sp/>/<sp/>d);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Global<sp/>operator<sp/>overloading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>operator<sp/>*<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Scaling<sp/>by<sp/>a<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>(c.x<sp/>*<sp/>d,<sp/>c.y<sp/>*<sp/>d);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>operator<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Scaling<sp/>by<sp/>a<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reuse<sp/>already<sp/>made<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>operator<sp/>+<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d)</highlight></codeline>
<codeline lineno="212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>(c.x<sp/>+<sp/>d,<sp/>c.y);</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>operator<sp/>+<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>+<sp/>d;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>operator<sp/>-<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>(c.x<sp/>-<sp/>d,<sp/>c.y);</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>operator<sp/>-<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>(d<sp/>-<sp/>c.x,<sp/>-c.y);</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Other<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>conjugate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>z)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>The<sp/>complex<sp/>conjugate<sp/>of<sp/>a<sp/>complex<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>(z.x,<sp/>-z.y);</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>inverse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>z)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>The<sp/>multiplicative<sp/>inverse<sp/>of<sp/>the<sp/>complex<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X<sp/>+<sp/>iY<sp/>--&gt;<sp/>1.0<sp/>/(X<sp/>+<sp/>iY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>(1.0,0.0)<sp/>/<sp/>z;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complex<sp/>trigonometric<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>exp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Exponential<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ex<sp/>=<sp/>std::exp(c.x);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>(ex<sp/>*<sp/>cos(c.y),<sp/>ex<sp/>*<sp/>sin(c.y));</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>cos(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>z)</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Cosine<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classComplex" kindref="compound">Complex</ref><sp/>term1<sp/>=<sp/>exp(mpi(z));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classComplex" kindref="compound">Complex</ref><sp/>term2<sp/>=<sp/>exp(-<sp/>mpi(z));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classComplex" kindref="compound">Complex</ref><sp/>result<sp/>=<sp/>0.5<sp/>*<sp/>(term1<sp/>+<sp/>term2);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>sin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>z)</highlight></codeline>
<codeline lineno="262"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Sine<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classComplex" kindref="compound">Complex</ref><sp/>term1<sp/>=<sp/>exp(mpi(z));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classComplex" kindref="compound">Complex</ref><sp/>term2<sp/>=<sp/>exp(-<sp/>mpi(z));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classComplex" kindref="compound">Complex</ref><sp/>result<sp/>=<sp/>-<sp/>0.5<sp/>*<sp/>mpi(term1<sp/>-<sp/>term2);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>cosh(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>z)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Hyperbolic<sp/>cosine<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(exp(z)<sp/><sp/>+<sp/>exp(-<sp/>(z)))<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>sinh(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>z)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Hyperbolic<sp/>sine<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(exp(z)<sp/>-<sp/>exp(-<sp/>(z)))<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>tanh(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>z)</highlight></codeline>
<codeline lineno="282"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Hyperbolic<sp/>tangent<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sinh(z)<sp/>/<sp/>cosh(z);</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>sech(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>z)</highlight></codeline>
<codeline lineno="288"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Hyperbolic<sp/>secant<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref><sp/>(2.0,<sp/>0.0)/(exp(z)<sp/>+<sp/>exp(-z));</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>csch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>z)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Hyperbolic<sp/>cosecant<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref><sp/>(2.0,<sp/>0.0)/(exp(z)<sp/>-<sp/>exp(-z));</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>coth(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>z)</highlight></codeline>
<codeline lineno="298"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Hyperbolic<sp/>cotangent<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cosh(z)<sp/>/<sp/>sinh(z);</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>tan(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>The<sp/>tangent<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sin(c)<sp/>/<sp/>cos(c);</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><ref refid="classComplex" kindref="compound">Complex</ref><sp/>cgt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="308"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>The<sp/>cotangent<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cos(c)<sp/>/<sp/>sin(c);</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal">std::ostream&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classComplex" kindref="compound">Complex</ref>&amp;<sp/>cmp)</highlight></codeline>
<codeline lineno="313"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>complex<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cmp.x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cmp.y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/Complex.cc"/>
  </compounddef>
</doxygen>
