<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="ExcelMechanisms_8hh" kind="file" language="C++">
    <compoundname>ExcelMechanisms.hh</compoundname>
    <includes refid="Vector_8hh" local="yes">Vector.hh</includes>
    <includes refid="NumericMatrix_8hh" local="yes">NumericMatrix.hh</includes>
    <includes refid="Tensor_8hh" local="yes">Tensor.hh</includes>
    <includes refid="StringConversions_8hh" local="yes">StringConversions.hh</includes>
    <includes local="no">string</includes>
    <includes local="no">list</includes>
    <includedby refid="ExcelMechanisms_8cc" local="no">src/ExcelMechanisms.cc</includedby>
    <incdepgraph>
      <node id="25">
        <label>list</label>
      </node>
      <node id="2">
        <label>Vector.hh</label>
        <link refid="Vector_8hh"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/duffy/ExcelMechanisms.hh</label>
        <link refid="ExcelMechanisms_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ArrayStructure.hh</label>
        <link refid="ArrayStructure_8hh"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>StringConversions.hh</label>
        <link refid="StringConversions_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>../../src/StringConversions.cc</label>
        <link refid="StringConversions_8cc"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Tensor.hh</label>
        <link refid="Tensor_8hh"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Array.hh</label>
        <link refid="Array_8hh"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>string</label>
      </node>
      <node id="18">
        <label>../../src/Matrix.cc</label>
        <link refid="Matrix_8cc"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>../../src/FullArray.cc</label>
        <link refid="FullArray_8cc"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Matrix.hh</label>
        <link refid="Matrix_8hh"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>../../src/MatrixStructure.cc</label>
        <link refid="MatrixStructure_8cc"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>../../src/FullMatrix.cc</label>
        <link refid="FullMatrix_8cc"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>FullMatrix.hh</label>
        <link refid="FullMatrix_8hh"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>../../src/Tensor.cc</label>
        <link refid="Tensor_8cc"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>../../src/ArrayStructure.cc</label>
        <link refid="ArrayStructure_8cc"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>NumericMatrix.hh</label>
        <link refid="NumericMatrix_8hh"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>../../src/NumericMatrix.cc</label>
        <link refid="NumericMatrix_8cc"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="19">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>cstddef</label>
      </node>
      <node id="11">
        <label>../../src/Vector.cc</label>
        <link refid="Vector_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>../../src/Array.cc</label>
        <link refid="Array_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>FullArray.hh</label>
        <link refid="FullArray_8hh"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>MatrixStructure.hh</label>
        <link refid="MatrixStructure_8hh"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/duffy/ExcelMechanisms.hh</label>
        <link refid="ExcelMechanisms_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/ExcelMechanisms.cc</label>
        <link refid="ExcelMechanisms_8cc"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="ExcelMechanisms_8hh_1a590d2646d246756846f9f3af2adb37fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printOneExcel</definition>
        <argsstring>(const Vector&lt; double, long &gt; &amp;x, const Vector&lt; double, long &gt; &amp;functionResult, const std::string &amp;title=std::string(&quot;Title&quot;), const std::string &amp;horizontal=std::string(&quot;X&quot;), const std::string &amp;vertical=std::string(&quot;Y&quot;), const std::string &amp;legend=std::string(&quot;*&quot;))</argsstring>
        <name>printOneExcel</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>functionResult</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>std::string(&quot;Title&quot;)</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>horizontal</declname>
          <defval>std::string(&quot;X&quot;)</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>vertical</declname>
          <defval>std::string(&quot;Y&quot;)</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>legend</declname>
          <defval>std::string(&quot;*&quot;)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ExcelMechanisms.hh" line="19" column="6" bodyfile="src/ExcelMechanisms.cc" bodystart="28" bodyend="60" declfile="include/duffy/ExcelMechanisms.hh" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ExcelMechanisms_8hh_1abd7a7502659fd7fdba4b6057bcafd210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printInExcel</definition>
        <argsstring>(const Vector&lt; double, long &gt; &amp;x, const std::list&lt; std::string &gt; &amp;labels, const std::list&lt; Vector&lt; double, long &gt; &gt; &amp;functionResult, const std::string &amp;title=std::string(&quot;Title&quot;), const std::string &amp;horizontal=std::string(&quot;X&quot;), const std::string &amp;vertical=std::string(&quot;Y&quot;))</argsstring>
        <name>printInExcel</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::list&lt; std::string &gt; &amp;</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const std::list&lt; <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &gt; &amp;</type>
          <declname>functionResult</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>std::string(&quot;Title&quot;)</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>horizontal</declname>
          <defval>std::string(&quot;X&quot;)</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>vertical</declname>
          <defval>std::string(&quot;Y&quot;)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ExcelMechanisms.hh" line="28" column="6" bodyfile="src/ExcelMechanisms.cc" bodystart="62" bodyend="93" declfile="include/duffy/ExcelMechanisms.hh" declline="28" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ExcelMechanisms_8hh_1aeaadfb639eb159e4a9fda2bc24af25b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printMatrixInExcel</definition>
        <argsstring>(const NumericMatrix&lt; double, long &gt; &amp;matrix, const Vector&lt; double, long &gt; &amp;xarr, const Vector&lt; double, long &gt; &amp;yarr, const std::string &amp;SheetName=std::string(&quot;Matrix&quot;))</argsstring>
        <name>printMatrixInExcel</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; double, long &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>xarr</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>yarr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>SheetName</declname>
          <defval>std::string(&quot;Matrix&quot;)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ExcelMechanisms.hh" line="36" column="6" bodyfile="src/ExcelMechanisms.cc" bodystart="96" bodyend="125" declfile="include/duffy/ExcelMechanisms.hh" declline="36" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ExcelMechanisms_8hh_1ac1af554008147e356ae4de60600ef2b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printMatrixChartsInExcel</definition>
        <argsstring>(int freq, const NumericMatrix&lt; double, long &gt; &amp;matrix, const Vector&lt; double, long &gt; &amp;rowAarr, const Vector&lt; double, long &gt; &amp;colArr, const std::string &amp;SheetName=std::string(&quot;Matrix&quot;))</argsstring>
        <name>printMatrixChartsInExcel</name>
        <param>
          <type>int</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; double, long &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>rowAarr</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>colArr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>SheetName</declname>
          <defval>std::string(&quot;Matrix&quot;)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ExcelMechanisms.hh" line="41" column="6" bodyfile="src/ExcelMechanisms.cc" bodystart="127" bodyend="159" declfile="include/duffy/ExcelMechanisms.hh" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ExcelMechanisms_8hh_1a5c06f7e2edeb4aa0d33c7e36500d269c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printTensorInExcel</definition>
        <argsstring>(const Tensor&lt; double, long &gt; &amp;tensor, long freq=1)</argsstring>
        <name>printTensorInExcel</name>
        <param>
          <type>const <ref refid="classTensor" kindref="compound">Tensor</ref>&lt; double, long &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>long</type>
          <declname>freq</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ExcelMechanisms.hh" line="46" column="6" bodyfile="src/ExcelMechanisms.cc" bodystart="227" bodyend="252" declfile="include/duffy/ExcelMechanisms.hh" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ExcelMechanisms_8hh_1ab56a98bda136b6e7808598a780df43e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printTensorInExcel</definition>
        <argsstring>(const Tensor&lt; double, long &gt; &amp;tensor, const Vector&lt; double, long &gt; &amp;xarr, const Vector&lt; double, long &gt; &amp;yarr, const std::string &amp;SheetName=std::string(&quot;Tensor&quot;), long freq=1)</argsstring>
        <name>printTensorInExcel</name>
        <param>
          <type>const <ref refid="classTensor" kindref="compound">Tensor</ref>&lt; double, long &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>xarr</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>yarr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>SheetName</declname>
          <defval>std::string(&quot;Tensor&quot;)</defval>
        </param>
        <param>
          <type>long</type>
          <declname>freq</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ExcelMechanisms.hh" line="49" column="6" bodyfile="src/ExcelMechanisms.cc" bodystart="254" bodyend="289" declfile="include/duffy/ExcelMechanisms.hh" declline="49" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ExcelMechanisms_8hh_1ac9b48eb511f76a077cbadc60946c8634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printDifferenceInExcel</definition>
        <argsstring>(const Vector&lt; double, long &gt; &amp;x, const Vector&lt; double, long &gt; &amp;y1, const Vector&lt; double, long &gt; &amp;y2, const std::string &amp;title=std::string(&quot;Difference&quot;), const std::string &amp;horizontal=std::string(&quot;X Values&quot;), const std::string &amp;vertical=std::string(&quot;Y Values&quot;), const std::string &amp;legend=std::string(&quot;*&quot;), long freq=1)</argsstring>
        <name>printDifferenceInExcel</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>std::string(&quot;Difference&quot;)</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>horizontal</declname>
          <defval>std::string(&quot;X Values&quot;)</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>vertical</declname>
          <defval>std::string(&quot;Y Values&quot;)</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>legend</declname>
          <defval>std::string(&quot;*&quot;)</defval>
        </param>
        <param>
          <type>long</type>
          <declname>freq</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ExcelMechanisms.hh" line="54" column="6" declfile="include/duffy/ExcelMechanisms.hh" declline="54" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ExcelMechanisms_8hh_1a2d9828ad723373ba781ef1c33498ef3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printMatrixDifferenceInExcel</definition>
        <argsstring>(const NumericMatrix&lt; double, long &gt; &amp;matrix1, const NumericMatrix&lt; double, long &gt; &amp;matrix2, const Vector&lt; double, long &gt; &amp;xarr, const Vector&lt; double, long &gt; &amp;yarr, const std::string &amp;SheetName=std::string(&quot;Matrix&quot;))</argsstring>
        <name>printMatrixDifferenceInExcel</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; double, long &gt; &amp;</type>
          <declname>matrix1</declname>
        </param>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; double, long &gt; &amp;</type>
          <declname>matrix2</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>xarr</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>yarr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>SheetName</declname>
          <defval>std::string(&quot;Matrix&quot;)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ExcelMechanisms.hh" line="62" column="6" bodyfile="src/ExcelMechanisms.cc" bodystart="188" bodyend="224" declfile="include/duffy/ExcelMechanisms.hh" declline="62" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ExcelMechanisms_8hh_1a4d6e83cb634939b5c6f7253db0416a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printDiscreteFunctionValues</definition>
        <argsstring>(double(*f)(double x), double A, double B, long nSteps, const std::string &amp;title, const std::string &amp;horizontal, const std::string &amp;vertical, const std::string &amp;legend)</argsstring>
        <name>printDiscreteFunctionValues</name>
        <param>
          <type>double(*)(double x)</type>
          <declname>f</declname>
        </param>
        <param>
          <type>double</type>
          <declname>A</declname>
        </param>
        <param>
          <type>double</type>
          <declname>B</declname>
        </param>
        <param>
          <type>long</type>
          <declname>nSteps</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>horizontal</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>vertical</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>legend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/ExcelMechanisms.hh" line="67" column="6" bodyfile="src/ExcelMechanisms.cc" bodystart="292" bodyend="322" declfile="include/duffy/ExcelMechanisms.hh" declline="67" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>ExcelMechanisms.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Useful<sp/>functions<sp/>for<sp/>use<sp/>with<sp/>Excel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Datasim<sp/>Education<sp/>BV<sp/>2005-2006</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ExcelMechanisms_HH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ExcelMechanisms_HH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Vector_8hh" kindref="compound">Vector.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="NumericMatrix_8hh" kindref="compound">NumericMatrix.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Tensor_8hh" kindref="compound">Tensor.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="StringConversions_8hh" kindref="compound">StringConversions.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>one<sp/>line<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExcelMechanisms_8hh_1a590d2646d246756846f9f3af2adb37fa" kindref="member">printOneExcel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>x,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>functionResult,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>title<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Title&quot;</highlight><highlight class="normal">),<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>horizontal<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal">),<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>vertical<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Y&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>legend<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>multiple<sp/>lines<sp/>on<sp/>one<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExcelMechanisms_8hh_1abd7a7502659fd7fdba4b6057bcafd210" kindref="member">printInExcel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>x,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::list&lt;std::string&gt;&amp;<sp/>labels,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Names<sp/>of<sp/>each<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::list&lt;<ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref><sp/>&gt;&amp;<sp/>functionResult,<sp/></highlight><highlight class="comment">//<sp/>The<sp/>list<sp/>of<sp/>Y<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>title<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Title&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>horizontal<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal">),<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>vertical<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Y&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>a<sp/>matrix<sp/>as<sp/>cell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExcelMechanisms_8hh_1aeaadfb639eb159e4a9fda2bc24af25b3" kindref="member">printMatrixInExcel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;double, long&gt;</ref>&amp;<sp/>matrix,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>xarr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>yarr,<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>SheetName<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Matrix&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>a<sp/>matrix&apos;s<sp/>rows<sp/>as<sp/>line<sp/>graphs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExcelMechanisms_8hh_1ac1af554008147e356ae4de60600ef2b1" kindref="member">printMatrixChartsInExcel</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>freq,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;double, long&gt;</ref>&amp;<sp/>matrix,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>rowAarr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>colArr,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>SheetName<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Matrix&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>an<sp/>array<sp/>of<sp/>matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExcelMechanisms_8hh_1a5c06f7e2edeb4aa0d33c7e36500d269c" kindref="member">printTensorInExcel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTensor" kindref="compound">Tensor&lt;double, long&gt;</ref>&amp;<sp/>tensor,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>freq<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>each<sp/>matrix<sp/>in<sp/>tensor<sp/>with<sp/>associated<sp/>row/column<sp/>labels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExcelMechanisms_8hh_1a5c06f7e2edeb4aa0d33c7e36500d269c" kindref="member">printTensorInExcel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTensor" kindref="compound">Tensor&lt;double, long&gt;</ref>&amp;<sp/>tensor,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>xarr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>yarr,<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>SheetName<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Tensor&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>freq<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>vector<sp/>that<sp/>is<sp/>the<sp/>difference<sp/>of<sp/>two<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExcelMechanisms_8hh_1ac9b48eb511f76a077cbadc60946c8634" kindref="member">printDifferenceInExcel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>x,<sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>y1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>y2,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>title<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Difference&quot;</highlight><highlight class="normal">),<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>horizontal<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;X<sp/>Values&quot;</highlight><highlight class="normal">),<sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>vertical<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Y<sp/>Values&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>legend<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>freq<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Differences<sp/>of<sp/>two<sp/>matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExcelMechanisms_8hh_1a2d9828ad723373ba781ef1c33498ef3a" kindref="member">printMatrixDifferenceInExcel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;double, long&gt;</ref>&amp;<sp/>matrix1,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;double, long&gt;</ref>&amp;<sp/>matrix2,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>xarr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>yarr,<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>SheetName<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Matrix&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>discrete<sp/>values<sp/>of<sp/>a<sp/>continuous<sp/>function<sp/>on<sp/>interval<sp/>[A,B]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExcelMechanisms_8hh_1a4d6e83cb634939b5c6f7253db0416a6a" kindref="member">printDiscreteFunctionValues</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>(*f)<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classB" kindref="compound">B</ref>,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nSteps,<sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>title,<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>horizontal,<sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>vertical,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>legend);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/duffy/ExcelMechanisms.hh"/>
  </compounddef>
</doxygen>
