<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="TestSimpleBondPricing_8cc" kind="file" language="C++">
    <compoundname>TestSimpleBondPricing.cc</compoundname>
    <includes refid="SimpleBondPricing_8hh" local="no">duffy/SimpleBondPricing.hh</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="2">
        <label>duffy/SimpleBondPricing.hh</label>
        <link refid="SimpleBondPricing_8hh_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="5">
        <label>cassert</label>
      </node>
      <node id="1">
        <label>tests/TestSimpleBondPricing.cc</label>
        <link refid="TestSimpleBondPricing_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="6">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="TestSimpleBondPricing_8cc_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestSimpleBondPricing.cc" line="9" column="5" bodyfile="tests/TestSimpleBondPricing.cc" bodystart="9" bodyend="83"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>TestSimpleBondPricing.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Datasim<sp/>Education<sp/>BV<sp/>2006</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;duffy/SimpleBondPricing.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="10"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Future<sp/>value<sp/>of<sp/>a<sp/>sum<sp/>of<sp/>money<sp/>invested<sp/>today</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nPeriods<sp/>=<sp/>6;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>6<sp/>years</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P<sp/>=<sp/>10000000;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Amount<sp/>invested<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0.092;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>9.2%<sp/>interest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fv<sp/>=<sp/>Chapter3CPPBook::FutureValue(P,<sp/>nPeriods,<sp/>r);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout.setf(std::ios_base::fixed,<sp/>std::ios_base::floatfield);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Future<sp/>Value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fv<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>frequency<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fv2<sp/>=<sp/>Chapter3CPPBook::FutureValue(P,<sp/>nPeriods,<sp/>r,<sp/>frequency);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>cout.setf(0,<sp/>ios_base::floatfield);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Future<sp/>Value,<sp/>2<sp/>periods:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fv2<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Future<sp/>value<sp/>of<sp/>a<sp/>sum<sp/>of<sp/>money<sp/>invested<sp/>today,<sp/>m<sp/>periods<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>per<sp/>year.<sp/>r<sp/>is<sp/>annual<sp/>interest<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Using:<sp/>means<sp/>that<sp/>we<sp/>search<sp/>in<sp/>NS<sp/>for<sp/>the<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Chapter3CPPBook;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P0<sp/>=<sp/>10000000;<sp/></highlight><highlight class="comment">//<sp/>10<sp/>million</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>0.092;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>Twice<sp/>per<sp/>year</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>nPeriods<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;**Future<sp/>with<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>periods:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>FutureValue(P0,<sp/>nPeriods,<sp/>r,<sp/>m)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Future<sp/>value<sp/>of<sp/>an<sp/>ordinary<sp/>annuity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A<sp/>=<sp/>2000000;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>0.08;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>nPeriods<sp/>=<sp/>15;<sp/><sp/></highlight><highlight class="comment">//<sp/>15<sp/>years</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;**Ordinary<sp/>Annuity;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>OrdinaryAnnuity(A,<sp/>nPeriods,<sp/>r)<sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Present<sp/>Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Pn<sp/>=<sp/>5000000;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>0.10;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>nPeriods<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;**Present<sp/>value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>PresentValue(Pn,<sp/>nPeriods,<sp/>r)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Present<sp/>Value<sp/>of<sp/>a<sp/>series<sp/>of<sp/>future<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector</ref><sp/>futureValues(5);<sp/></highlight><highlight class="comment">//<sp/>For<sp/>five<sp/>years</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>4<sp/>years</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>futureValues[j]<sp/>=<sp/>100.0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>futureValues[4]<sp/>=<sp/>1100.0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>nPeriods<sp/>=<sp/>5;<sp/></highlight><highlight class="comment">//<sp/>Redundant<sp/>in<sp/>a<sp/>sense<sp/>since<sp/>this<sp/>is<sp/>in<sp/>the<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>0.0625;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;**Present<sp/>value,<sp/>series:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>PresentValue(futureValues,<sp/>nPeriods,<sp/>r)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Present<sp/>Value<sp/>of<sp/>an<sp/>ordinary<sp/>annuity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>A<sp/>=<sp/>100.0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>0.09;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>nPeriods<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;**PV,<sp/>ordinary<sp/>annuity:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>PresentValueOrdinaryAnnuity(A,<sp/>nPeriods,<sp/>r)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>test<sp/>periodic<sp/>testing<sp/>with<sp/>continuous<sp/>compounding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>P0<sp/>=<sp/>10000000;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>0.092;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>nPeriods<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>mm<sp/>=<sp/>1;<sp/>mm<sp/>&lt;=<sp/>10000000;<sp/>mm<sp/>*=12)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Periodic:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mm<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>FutureValue(P0,<sp/>nPeriods,<sp/>r,<sp/>mm)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Continuous<sp/>Compounding:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>FutureValueContinuous(P0,<sp/>nPeriods,<sp/>r);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/TestSimpleBondPricing.cc"/>
  </compounddef>
</doxygen>
