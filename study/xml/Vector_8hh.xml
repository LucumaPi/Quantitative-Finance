<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="Vector_8hh" kind="file" language="C++">
    <compoundname>Vector.hh</compoundname>
    <includes refid="Array_8hh" local="yes">Array.hh</includes>
    <includes refid="Vector_8cc" local="yes">../../src/Vector.cc</includes>
    <includedby refid="Range_8hh" local="yes">include/duffy/Range.hh</includedby>
    <includedby refid="Vector_8cc" local="no">src/Vector.cc</includedby>
    <includedby refid="NumericMatrix_8hh" local="yes">include/duffy/NumericMatrix.hh</includedby>
    <includedby refid="Lattice_8hh" local="yes">include/duffy/Lattice.hh</includedby>
    <includedby refid="LUSolver_8hh" local="yes">include/duffy/LUSolver.hh</includedby>
    <includedby refid="Mesher_8hh" local="yes">include/duffy/Mesher.hh</includedby>
    <includedby refid="ExcelDriver_8hh" local="yes">include/duffy/ExcelDriver.hh</includedby>
    <includedby refid="ExcelMechanisms_8hh" local="yes">include/duffy/ExcelMechanisms.hh</includedby>
    <includedby refid="StringConversions_8hh" local="yes">include/duffy/StringConversions.hh</includedby>
    <includedby refid="TestLatticeBackwardInduction_8cc" local="no">tests/TestLatticeBackwardInduction.cc</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/duffy/Vector.hh</label>
        <link refid="Vector_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ArrayStructure.hh</label>
        <link refid="ArrayStructure_8hh_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Array.hh</label>
        <link refid="Array_8hh_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="4">
        <label>cstddef</label>
      </node>
      <node id="5">
        <label>FullArray.hh</label>
        <link refid="FullArray_8hh_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/duffy/Vector.hh</label>
        <link refid="Vector_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>include/duffy/ExcelMechanisms.hh</label>
        <link refid="ExcelMechanisms_8hh_source"/>
      </node>
      <node id="20">
        <label>include/duffy/StringConversions.hh</label>
        <link refid="StringConversions_8hh_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>include/duffy/LUSolver.hh</label>
        <link refid="LUSolver_8hh_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>include/duffy/Tensor.hh</label>
        <link refid="Tensor_8hh_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/duffy/MatrixMechanisms.hh</label>
        <link refid="MatrixMechanisms_8hh_source"/>
      </node>
      <node id="16">
        <label>include/duffy/Lattice.hh</label>
        <link refid="Lattice_8hh_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/duffy/ArrayMechanisms.hh</label>
        <link refid="ArrayMechanisms_8hh_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/duffy/Range.hh</label>
        <link refid="Range_8hh_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>AssocMatrix.hh</label>
        <link refid="AssocMatrix_8hh_source"/>
      </node>
      <node id="10">
        <label>include/duffy/NumericMatrix.hh</label>
        <link refid="NumericMatrix_8hh_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/duffy/IEulerIBVPSolver.hh</label>
        <link refid="IEulerIBVPSolver_8hh_source"/>
      </node>
      <node id="19">
        <label>include/duffy/LatticeFactory.hh</label>
        <link refid="LatticeFactory_8hh_source"/>
      </node>
      <node id="9">
        <label>include/duffy/Mesher.hh</label>
        <link refid="Mesher_8hh_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/duffy/IBVP.hh</label>
        <link refid="IBVP_8hh_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/duffy/EEulerIBVPSolver.hh</label>
        <link refid="EEulerIBVPSolver_8hh_source"/>
      </node>
      <node id="17">
        <label>include/duffy/BinomialLatticeStrategy.hh</label>
        <link refid="BinomialLatticeStrategy_8hh_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>include/duffy/ExcelDriver.hh</label>
        <link refid="ExcelDriver_8hh_source"/>
      </node>
      <node id="18">
        <label>include/duffy/BinomialMethod.hh</label>
        <link refid="BinomialMethod_8hh_source"/>
      </node>
      <node id="6">
        <label>include/duffy/IBVPSolver.hh</label>
        <link refid="IBVPSolver_8hh_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classVector" prot="public">Vector</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="Vector_8hh_1a6553f392c54a87ee890ecddd59a26675" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void scale</definition>
        <argsstring>(Vector&lt; V, I &gt; &amp;v, const V &amp;a)</argsstring>
        <name>scale</name>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="72" column="20" bodyfile="src/Vector.cc" bodystart="311" bodyend="320" declfile="include/duffy/Vector.hh" declline="72" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8hh_1a5f15071d730549f04efa382b61747ff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void scale</definition>
        <argsstring>(const V &amp;a, Vector&lt; V, I &gt; &amp;v)</argsstring>
        <name>scale</name>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="73" column="20" bodyfile="src/Vector.cc" bodystart="322" bodyend="326" declfile="include/duffy/Vector.hh" declline="73" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8hh_1af8ed022403e1f5df6daa9094218a4c0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void add</definition>
        <argsstring>(Vector&lt; V, I &gt; &amp;v, const V &amp;a)</argsstring>
        <name>add</name>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="75" column="20" bodyfile="src/Vector.cc" bodystart="329" bodyend="337" declfile="include/duffy/Vector.hh" declline="75" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8hh_1a3cbb0860a42a282a26aa253ca68c6c17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void add</definition>
        <argsstring>(const V &amp;a, Vector&lt; V, I &gt; &amp;v)</argsstring>
        <name>add</name>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="76" column="20" bodyfile="src/Vector.cc" bodystart="340" bodyend="344" declfile="include/duffy/Vector.hh" declline="76" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8hh_1aa26460af602b9e4373900eff4dddad44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void scaleAndOffset</definition>
        <argsstring>(Vector&lt; V, I &gt; &amp;v, const V &amp;a, const V &amp;b)</argsstring>
        <name>scaleAndOffset</name>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="79" column="1" bodyfile="src/Vector.cc" bodystart="348" bodyend="356" declfile="include/duffy/Vector.hh" declline="79" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8hh_1a54791aa42dc417c7354e496ead4f4f3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void subtract</definition>
        <argsstring>(Vector&lt; V, I &gt; &amp;v, const V &amp;a)</argsstring>
        <name>subtract</name>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="81" column="20" bodyfile="src/Vector.cc" bodystart="359" bodyend="366" declfile="include/duffy/Vector.hh" declline="81" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8hh_1a0f66592839cd574711bf87a26a5b2a89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void subtract</definition>
        <argsstring>(const V &amp;a, Vector&lt; V, I &gt; &amp;v)</argsstring>
        <name>subtract</name>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="82" column="20" bodyfile="src/Vector.cc" bodystart="368" bodyend="378" declfile="include/duffy/Vector.hh" declline="82" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8hh_1ac65a469b31f9731cd9ad92430f432b71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void divide</definition>
        <argsstring>(Vector&lt; V, I &gt; &amp;v, const V &amp;a)</argsstring>
        <name>divide</name>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="84" column="20" bodyfile="src/Vector.cc" bodystart="381" bodyend="388" declfile="include/duffy/Vector.hh" declline="84" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8hh_1ac52a9d15dae2f25b50260dfbae3d724b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void toggleSign</definition>
        <argsstring>(Vector&lt; V, I &gt; &amp;v)</argsstring>
        <name>toggleSign</name>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="86" column="20" bodyfile="src/Vector.cc" bodystart="391" bodyend="398" declfile="include/duffy/Vector.hh" declline="86" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8hh_1af8510e3d2131a57d037a03f3c8e4596c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void assign</definition>
        <argsstring>(Vector&lt; V, I &gt; &amp;v, const V &amp;RHS)</argsstring>
        <name>assign</name>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/duffy/Vector.hh" line="89" column="20" bodyfile="src/Vector.cc" bodystart="400" bodyend="407" declfile="include/duffy/Vector.hh" declline="89" declcolumn="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Vector.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Vector<sp/>class<sp/>is<sp/>an<sp/>array<sp/>with<sp/>mathematical<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Datasim<sp/>Component<sp/>Technology<sp/>1999-2006</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VECTOR_HH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VECTOR_HH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Array.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Default<sp/>structure<sp/>is<sp/>FullArray<sp/>with<sp/>default<sp/>allocator.<sp/>Default<sp/>integral<sp/>type<sp/>is<sp/>int.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I=</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>FullArray&lt;V&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="14" refid="classVector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classVector" kindref="compound">Vector</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classArray" kindref="compound">Array</ref>&lt;V,<sp/>I,<sp/>S&gt;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructors<sp/>&amp;<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector</ref>(I<sp/>size);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor<sp/>with<sp/>size.<sp/>Start<sp/>index=1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector</ref>(I<sp/>size,<sp/>I<sp/>start);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor<sp/>with<sp/>size<sp/>&amp;<sp/>start<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector</ref>(I<sp/>size,<sp/>I<sp/>start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>val);<sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor<sp/>with<sp/>size<sp/>&amp;<sp/>start<sp/>index<sp/>+<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>source);<sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classArray" kindref="compound">Array&lt;V, I, S&gt;</ref>&amp;<sp/>source);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>with<sp/>an<sp/>array<sp/>as<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classVector" kindref="compound">Vector</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>operator<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>source);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/><ref refid="classVector_1a4d3ac08839678685a6cc72df5d629588" kindref="member">operator - </ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unary<sp/>minus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S1&gt;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>operator<sp/>+<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V1, I1, S1&gt;</ref>&amp;<sp/>v,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V1&amp;<sp/>a);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>v<sp/>to<sp/>every<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S1&gt;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>operator<sp/>+<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V1&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V1, I1, S1&gt;</ref>&amp;<sp/>v);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S1&gt;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/><ref refid="classVector_1a4d3ac08839678685a6cc72df5d629588" kindref="member">operator - </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V1, I1, S1&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V1&amp;<sp/>a);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>v<sp/>from<sp/>every<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S1&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/><ref refid="classVector_1a4d3ac08839678685a6cc72df5d629588" kindref="member">operator - </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V1&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V1, I1, S1&gt;</ref>&amp;<sp/>v);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S1&gt;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>operator<sp/>*<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V1, I1, S1&gt;</ref>&amp;<sp/>v,<sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V1&amp;<sp/>a);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>every<sp/>element<sp/>by<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S1&gt;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>operator<sp/>*<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V1&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V1, I1, S1&gt;</ref>&amp;<sp/>v);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>operator<sp/>/<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>every<sp/>element<sp/>by<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>operator<sp/>+<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>v)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/><ref refid="classVector_1a4d3ac08839678685a6cc72df5d629588" kindref="member">operator - </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>v)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>operator<sp/>*<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>v)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>operator<sp/>/<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>v)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>operator<sp/>+=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>v);<sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>v<sp/>to<sp/>every<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>operator<sp/>-=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>v);<sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>v<sp/>from<sp/>every<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>operator<sp/>*=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>v);<sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>every<sp/>element<sp/>by<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>operator<sp/>/=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>v);<sp/><sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>every<sp/>element<sp/>by<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>operator<sp/>+=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>v);</highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>operator<sp/>-=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>v);</highlight><highlight class="comment">//<sp/>Subtract<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>operator<sp/>*=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>v);</highlight><highlight class="comment">//<sp/>Multiply<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>&apos;command&apos;<sp/>type<sp/>functions<sp/>that<sp/>are<sp/>useful<sp/>in<sp/>some<sp/>applications.<sp/>Most<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>void<sp/>and<sp/>this<sp/>promotes<sp/>Efficiency.<sp/>Usability<sp/>is<sp/>also<sp/>enhanced.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scale(<ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a);<sp/></highlight><highlight class="comment">//<sp/>v<sp/>*<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scale(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a,<sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v);<sp/></highlight><highlight class="comment">//<sp/>a<sp/>*<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add(<ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a);<sp/></highlight><highlight class="comment">//<sp/>v<sp/>+<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a,<sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v);<sp/></highlight><highlight class="comment">//<sp/>a<sp/>+<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaleAndOffset(<ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>b);<sp/></highlight><highlight class="comment">//<sp/>(a<sp/>*<sp/>v)<sp/>+<sp/>b<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subtract(<ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a);<sp/></highlight><highlight class="comment">//<sp/>v<sp/>-<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subtract(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a,<sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v);<sp/></highlight><highlight class="comment">//<sp/>a<sp/>-<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>divide(<ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a);<sp/></highlight><highlight class="comment">//<sp/>v<sp/>/<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toggleSign(<ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v);<sp/></highlight><highlight class="comment">//<sp/>-v<sp/>(unary<sp/>minus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign(<ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>RHS);<sp/></highlight><highlight class="comment">//<sp/>All<sp/>elements<sp/>=<sp/>RHS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../src/Vector.cc&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>VECTOR_HH</highlight></codeline>
    </programlisting>
    <location file="include/duffy/Vector.hh"/>
  </compounddef>
</doxygen>
