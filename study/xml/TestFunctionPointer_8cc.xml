<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="TestFunctionPointer_8cc" kind="file" language="C++">
    <compoundname>TestFunctionPointer.cc</compoundname>
    <includes local="no">iostream</includes>
    <includes refid="Complex_8hh" local="no">duffy/Complex.hh</includes>
    <incdepgraph>
      <node id="1">
        <label>tests/TestFunctionPointer.cc</label>
        <link refid="TestFunctionPointer_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="3">
        <label>duffy/Complex.hh</label>
        <link refid="Complex_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="TestFunctionPointer_8cc_1ab765a37b9080d5c03ea3a60b12f8b42e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V add</definition>
        <argsstring>(V x, V y)</argsstring>
        <name>add</name>
        <param>
          <type>V</type>
          <declname>x</declname>
        </param>
        <param>
          <type>V</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestFunctionPointer.cc" line="12" column="15" bodyfile="tests/TestFunctionPointer.cc" bodystart="12" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="TestFunctionPointer_8cc_1aa6be4cf7079c0514c5a68e575c567067" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V multiply</definition>
        <argsstring>(V x, V y)</argsstring>
        <name>multiply</name>
        <param>
          <type>V</type>
          <declname>x</declname>
        </param>
        <param>
          <type>V</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestFunctionPointer.cc" line="21" column="15" bodyfile="tests/TestFunctionPointer.cc" bodystart="21" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="TestFunctionPointer_8cc_1afb04cfed572cc0cc4fcd2536ee927423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V subtract</definition>
        <argsstring>(V x, V y)</argsstring>
        <name>subtract</name>
        <param>
          <type>V</type>
          <declname>x</declname>
        </param>
        <param>
          <type>V</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestFunctionPointer.cc" line="30" column="15" bodyfile="tests/TestFunctionPointer.cc" bodystart="30" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="TestFunctionPointer_8cc_1a24ab3b71e1a0398e492a327c48bcaa8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void genericFunction</definition>
        <argsstring>(V myX, V myY, V(*f)(V x, V y))</argsstring>
        <name>genericFunction</name>
        <param>
          <type>V</type>
          <declname>myX</declname>
        </param>
        <param>
          <type>V</type>
          <declname>myY</declname>
        </param>
        <param>
          <type>V(*)(V x, V y)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestFunctionPointer.cc" line="40" column="6" bodyfile="tests/TestFunctionPointer.cc" bodystart="40" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="TestFunctionPointer_8cc_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/TestFunctionPointer.cc" line="51" column="5" bodyfile="tests/TestFunctionPointer.cc" bodystart="51" bodyend="71"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>testFunctionPointer.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Simple<sp/>test<sp/>program<sp/>to<sp/>show<sp/>how<sp/>to<sp/>define<sp/>and<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>pointers.<sp/>The<sp/>functions<sp/>are<sp/>templated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Datasim<sp/>Education<sp/>BV<sp/>2003-2005</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Complex_8hh" kindref="compound">duffy/Complex.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="TestFunctionPointer_8cc_1ab765a37b9080d5c03ea3a60b12f8b42e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V&gt;<sp/>V<sp/><ref refid="TestFunctionPointer_8cc_1ab765a37b9080d5c03ea3a60b12f8b42e" kindref="member">add</ref>(V<sp/>x,<sp/>V<sp/>y)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;**<sp/>Adding<sp/>two<sp/>numbers:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>y<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+<sp/>y;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="TestFunctionPointer_8cc_1aa6be4cf7079c0514c5a68e575c567067" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V&gt;<sp/>V<sp/><ref refid="TestFunctionPointer_8cc_1aa6be4cf7079c0514c5a68e575c567067" kindref="member">multiply</ref>(V<sp/>x,<sp/>V<sp/>y)</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;**<sp/>Multiplying<sp/>two<sp/>numbers:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>y<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>y;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="TestFunctionPointer_8cc_1afb04cfed572cc0cc4fcd2536ee927423" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V&gt;<sp/>V<sp/><ref refid="TestFunctionPointer_8cc_1afb04cfed572cc0cc4fcd2536ee927423" kindref="member">subtract</ref>(V<sp/>x,<sp/>V<sp/>y)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;**<sp/>Subtracting<sp/>two<sp/>numbers:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>y<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>-<sp/>y;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="40" refid="TestFunctionPointer_8cc_1a24ab3b71e1a0398e492a327c48bcaa8f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="TestFunctionPointer_8cc_1a24ab3b71e1a0398e492a327c48bcaa8f" kindref="member">genericFunction</ref><sp/>(V<sp/>myX,<sp/>V<sp/>myY,<sp/>V<sp/>(*f)<sp/>(V<sp/><sp/>x,<sp/>V<sp/>y))</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>A<sp/>function<sp/>that<sp/>delivers<sp/>two<sp/>variables<sp/>myX<sp/>and<sp/>MyY<sp/>to<sp/>the<sp/>function<sp/>pointer<sp/>&apos;f&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>potentially<sp/>reusable<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>function<sp/>with<sp/>myX<sp/>and<sp/>myY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>result<sp/>=<sp/>(*f)(myX,<sp/>myY);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Result<sp/>is:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="TestFunctionPointer_8cc_1ae66f6b31b5ad750f1fe042a706a4e3d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="TestFunctionPointer_8cc_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>3.0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>2.0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>genericFunction&lt;double&gt;(x,<sp/>y,<sp/><ref refid="TestFunctionPointer_8cc_1ab765a37b9080d5c03ea3a60b12f8b42e" kindref="member">add</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>genericFunction&lt;double&gt;(x,<sp/>y,<sp/><ref refid="TestFunctionPointer_8cc_1aa6be4cf7079c0514c5a68e575c567067" kindref="member">multiply</ref>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>genericFunction&lt;double&gt;(x,<sp/>y,<sp/><ref refid="TestFunctionPointer_8cc_1afb04cfed572cc0cc4fcd2536ee927423" kindref="member">subtract</ref>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classComplex" kindref="compound">Complex</ref><sp/>x(3.0,<sp/>2.0);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classComplex" kindref="compound">Complex</ref><sp/>y(2.0,<sp/>-4.9);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>genericFunction&lt;Complex&gt;(x,<sp/>y,<sp/><ref refid="TestFunctionPointer_8cc_1ab765a37b9080d5c03ea3a60b12f8b42e" kindref="member">add</ref>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>genericFunction&lt;Complex&gt;(x,<sp/>y,<sp/><ref refid="TestFunctionPointer_8cc_1aa6be4cf7079c0514c5a68e575c567067" kindref="member">multiply</ref>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>genericFunction&lt;Complex&gt;(x,<sp/>y,<sp/><ref refid="TestFunctionPointer_8cc_1afb04cfed572cc0cc4fcd2536ee927423" kindref="member">subtract</ref>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/TestFunctionPointer.cc"/>
  </compounddef>
</doxygen>
