<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="Vector_8cc" kind="file" language="C++">
    <compoundname>Vector.cc</compoundname>
    <includes refid="Vector_8hh" local="no">duffy/Vector.hh</includes>
    <includedby refid="Vector_8hh" local="yes">include/duffy/Vector.hh</includedby>
    <incdepgraph>
      <node id="2">
        <label>duffy/Vector.hh</label>
        <link refid="Vector_8hh_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ArrayStructure.hh</label>
        <link refid="ArrayStructure_8hh_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Array.hh</label>
        <link refid="Array_8hh_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="5">
        <label>cstddef</label>
      </node>
      <node id="1">
        <label>src/Vector.cc</label>
        <link refid="Vector_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>FullArray.hh</label>
        <link refid="FullArray_8hh_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/duffy/Vector.hh</label>
        <link refid="Vector_8hh_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>include/duffy/ExcelMechanisms.hh</label>
        <link refid="ExcelMechanisms_8hh_source"/>
      </node>
      <node id="21">
        <label>include/duffy/StringConversions.hh</label>
        <link refid="StringConversions_8hh_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>include/duffy/LUSolver.hh</label>
        <link refid="LUSolver_8hh_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>include/duffy/Tensor.hh</label>
        <link refid="Tensor_8hh_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/duffy/MatrixMechanisms.hh</label>
        <link refid="MatrixMechanisms_8hh_source"/>
      </node>
      <node id="17">
        <label>include/duffy/Lattice.hh</label>
        <link refid="Lattice_8hh_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/duffy/ArrayMechanisms.hh</label>
        <link refid="ArrayMechanisms_8hh_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/duffy/Range.hh</label>
        <link refid="Range_8hh_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>AssocMatrix.hh</label>
        <link refid="AssocMatrix_8hh_source"/>
      </node>
      <node id="11">
        <label>include/duffy/NumericMatrix.hh</label>
        <link refid="NumericMatrix_8hh_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>include/duffy/IEulerIBVPSolver.hh</label>
        <link refid="IEulerIBVPSolver_8hh_source"/>
      </node>
      <node id="20">
        <label>include/duffy/LatticeFactory.hh</label>
        <link refid="LatticeFactory_8hh_source"/>
      </node>
      <node id="10">
        <label>include/duffy/Mesher.hh</label>
        <link refid="Mesher_8hh_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/duffy/IBVP.hh</label>
        <link refid="IBVP_8hh_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Vector.cc</label>
        <link refid="Vector_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/duffy/EEulerIBVPSolver.hh</label>
        <link refid="EEulerIBVPSolver_8hh_source"/>
      </node>
      <node id="18">
        <label>include/duffy/BinomialLatticeStrategy.hh</label>
        <link refid="BinomialLatticeStrategy_8hh_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>include/duffy/ExcelDriver.hh</label>
        <link refid="ExcelDriver_8hh_source"/>
      </node>
      <node id="19">
        <label>include/duffy/BinomialMethod.hh</label>
        <link refid="BinomialMethod_8hh_source"/>
      </node>
      <node id="7">
        <label>include/duffy/IBVPSolver.hh</label>
        <link refid="IBVPSolver_8hh_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="Vector_8cc_1a4fb5e0a78499e58c28cc4f735eb3f5c9" prot="public" static="no">
        <name>Vector_CC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Vector.cc" line="34" column="9" bodyfile="src/Vector.cc" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="Vector_8cc_1aa461f5203f9b4412609b67f69cb2a635" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt;</type>
        <definition>Vector&lt;V, I, S&gt; operator+</definition>
        <argsstring>(const Vector&lt; V, I, S &gt; &amp;v, const V &amp;a)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Vector.cc" line="111" column="8" bodyfile="src/Vector.cc" bodystart="111" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8cc_1a5b41ab3ceca804c717acf5fc86b772ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt;</type>
        <definition>Vector&lt;V, I, S&gt; operator+</definition>
        <argsstring>(const V &amp;a, const Vector&lt; V, I, S &gt; &amp;v)</argsstring>
        <name>operator+</name>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Vector.cc" line="127" column="8" bodyfile="src/Vector.cc" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8cc_1a27bdc159143ca52ae07d1aa4b24ce743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt;</type>
        <definition>Vector&lt;V, I, S&gt; operator*</definition>
        <argsstring>(const Vector&lt; V, I, S &gt; &amp;v, const V &amp;a)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Vector.cc" line="133" column="8" bodyfile="src/Vector.cc" bodystart="133" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8cc_1afb3ceb010380d3fe8b57ce4daf733a9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt;</type>
        <definition>Vector&lt;V, I, S&gt; operator*</definition>
        <argsstring>(const V &amp;a, const Vector&lt; V, I, S &gt; &amp;v)</argsstring>
        <name>operator*</name>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Vector.cc" line="148" column="8" bodyfile="src/Vector.cc" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8cc_1ab5a7585120f4de1ffab2fe57e3343156" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt;</type>
        <definition>Vector&lt;V, I, S&gt; operator-</definition>
        <argsstring>(const Vector&lt; V, I, S &gt; &amp;v, const V &amp;a)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Vector.cc" line="155" column="8" bodyfile="src/Vector.cc" bodystart="155" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8cc_1a037a73bc502290929dd09a87cf74cf3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt;</type>
        <definition>Vector&lt;V, I, S&gt; operator-</definition>
        <argsstring>(const V &amp;a, const Vector&lt; V, I, S &gt; &amp;v)</argsstring>
        <name>operator-</name>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Vector.cc" line="170" column="8" bodyfile="src/Vector.cc" bodystart="170" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8cc_1a6553f392c54a87ee890ecddd59a26675" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void scale</definition>
        <argsstring>(Vector&lt; V, I &gt; &amp;v, const V &amp;a)</argsstring>
        <name>scale</name>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Vector.cc" line="311" column="20" bodyfile="src/Vector.cc" bodystart="311" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8cc_1a5f15071d730549f04efa382b61747ff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void scale</definition>
        <argsstring>(const V &amp;a, Vector&lt; V, I &gt; &amp;v)</argsstring>
        <name>scale</name>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Vector.cc" line="322" column="20" bodyfile="src/Vector.cc" bodystart="322" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8cc_1af8ed022403e1f5df6daa9094218a4c0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void add</definition>
        <argsstring>(Vector&lt; V, I &gt; &amp;v, const V &amp;a)</argsstring>
        <name>add</name>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Vector.cc" line="329" column="20" bodyfile="src/Vector.cc" bodystart="329" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8cc_1a3cbb0860a42a282a26aa253ca68c6c17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void add</definition>
        <argsstring>(const V &amp;a, Vector&lt; V, I &gt; &amp;v)</argsstring>
        <name>add</name>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Vector.cc" line="340" column="20" bodyfile="src/Vector.cc" bodystart="340" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8cc_1aa26460af602b9e4373900eff4dddad44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void scaleAndOffset</definition>
        <argsstring>(Vector&lt; V, I &gt; &amp;v, const V &amp;a, const V &amp;b)</argsstring>
        <name>scaleAndOffset</name>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Vector.cc" line="348" column="1" bodyfile="src/Vector.cc" bodystart="348" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8cc_1a54791aa42dc417c7354e496ead4f4f3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void subtract</definition>
        <argsstring>(Vector&lt; V, I &gt; &amp;v, const V &amp;a)</argsstring>
        <name>subtract</name>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Vector.cc" line="359" column="20" bodyfile="src/Vector.cc" bodystart="359" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8cc_1a0f66592839cd574711bf87a26a5b2a89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void subtract</definition>
        <argsstring>(const V &amp;a, Vector&lt; V, I &gt; &amp;v)</argsstring>
        <name>subtract</name>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Vector.cc" line="368" column="20" bodyfile="src/Vector.cc" bodystart="368" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8cc_1ac65a469b31f9731cd9ad92430f432b71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void divide</definition>
        <argsstring>(Vector&lt; V, I &gt; &amp;v, const V &amp;a)</argsstring>
        <name>divide</name>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Vector.cc" line="381" column="20" bodyfile="src/Vector.cc" bodystart="381" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8cc_1ac52a9d15dae2f25b50260dfbae3d724b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void toggleSign</definition>
        <argsstring>(Vector&lt; V, I &gt; &amp;v)</argsstring>
        <name>toggleSign</name>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Vector.cc" line="391" column="20" bodyfile="src/Vector.cc" bodystart="391" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="Vector_8cc_1af8510e3d2131a57d037a03f3c8e4596c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void assign</definition>
        <argsstring>(Vector&lt; V, I &gt; &amp;v, const V &amp;RHS)</argsstring>
        <name>assign</name>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; V, I &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Vector.cc" line="400" column="20" bodyfile="src/Vector.cc" bodystart="400" bodyend="407"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Vector.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Vector<sp/>class<sp/>is<sp/>an<sp/>array<sp/>with<sp/>mathematical<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>29<sp/>january<sp/>1999<sp/><sp/>RD<sp/><sp/>Started</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2002-1-21<sp/>DD<sp/>removed<sp/>some<sp/>special<sp/>functions;<sp/>delta,<sp/>gamma<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2004-3-13<sp/>DD<sp/>new<sp/>&apos;Command&apos;<sp/>non-memebr<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2004-4-14<sp/>DD<sp/>Maths<sp/>operators<sp/>+,<sp/>-,<sp/>*<sp/>are<sp/>now<sp/>friends</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2005-12-17<sp/>DD<sp/>size_t<sp/>--&gt;<sp/>I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2006-1-13<sp/>DD<sp/>Damn<sp/>it<sp/>A<sp/>BUG!!!!!!!!!!!!!<sp/>was<sp/>testing<sp/>FDM<sp/>from<sp/>chapter<sp/>19</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2006-2-2<sp/>DD<sp/>all<sp/>friend<sp/>members<sp/>(e.g.<sp/>operators)<sp/>must<sp/>have<sp/>the<sp/>template<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specification<sp/>otherwise<sp/>it<sp/>is<sp/>not<sp/>correct<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="14"><highlight class="comment">template<sp/>&lt;class<sp/>V,<sp/>class<sp/>I,<sp/>class<sp/>S&gt;</highlight></codeline>
<codeline lineno="15"><highlight class="comment">Vector&lt;V,<sp/>I,<sp/>S&gt;<sp/>Vector&lt;V,<sp/>I,<sp/>S&gt;::operator<sp/>-<sp/>()<sp/>const</highlight></codeline>
<codeline lineno="16"><highlight class="comment">{<sp/>//<sp/>Unary<sp/>minus</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>new<sp/>vector<sp/>of<sp/>same<sp/>size<sp/>and<sp/>same<sp/>starting<sp/>index</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/>Vector&lt;V,<sp/>I,<sp/>S&gt;<sp/>result(Size(),<sp/>MinIndex());</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Copy<sp/>all<sp/>elements<sp/>negative</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(I<sp/>i=MinIndex();<sp/>i&lt;=MaxIndex();<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>-<sp/>(*this)[i];</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>result</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline lineno="28"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Datasim<sp/>Component<sp/>Technology<sp/>1999-2006</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Vector_CC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Vector_CC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;duffy/Vector.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructors<sp/>&amp;<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;::Vector</ref>():<sp/><ref refid="classArray" kindref="compound">Array</ref>&lt;V,<sp/>I,<sp/>S&gt;()</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Default<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;::Vector</ref>(I<sp/>size):<sp/><ref refid="classArray" kindref="compound">Array</ref>&lt;V,<sp/>I,<sp/>S&gt;(size)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Constructor<sp/>with<sp/>size.<sp/>Start<sp/>index=1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;::Vector</ref>(I<sp/>size,<sp/>I<sp/>start):<sp/><ref refid="classArray" kindref="compound">Array</ref>&lt;V,<sp/>I,<sp/>S&gt;(size,<sp/>start)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Constructor<sp/>with<sp/>size<sp/>&amp;<sp/>start<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;::Vector</ref>(I<sp/>size,<sp/>I<sp/>start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>val):<sp/><ref refid="classArray" kindref="compound">Array</ref>&lt;V,<sp/>I,<sp/>S&gt;(size,<sp/>start,<sp/>val)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Constructor<sp/>with<sp/>size<sp/>&amp;<sp/>start<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;::Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>source):<sp/><ref refid="classArray" kindref="compound">Array</ref>&lt;V,<sp/>I,<sp/>S&gt;(source)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;::Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classArray" kindref="compound">Array&lt;V, I, S&gt;</ref>&amp;<sp/>source):<sp/><ref refid="classArray" kindref="compound">Array</ref>&lt;V,<sp/>I,<sp/>S&gt;(source)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Constructor<sp/>with<sp/>a<sp/>Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;::~Vector</ref>()</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;::operator = </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>source)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Assignment<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exit<sp/>if<sp/>same<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">==&amp;source)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>baseclass<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classArray" kindref="compound">Array&lt;V, I, S&gt;::operator = </ref>(source);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/><ref refid="classVector_1a4d3ac08839678685a6cc72df5d629588" kindref="member">Vector&lt;V, I, S&gt;::operator - </ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="96"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Unary<sp/>minus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>new<sp/>vector<sp/>of<sp/>same<sp/>size<sp/>and<sp/>same<sp/>starting<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>result(this-&gt;Size(),<sp/>this-&gt;MinIndex());</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>all<sp/>elements<sp/>negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i=this-&gt;MinIndex();<sp/>i&lt;=this-&gt;MaxIndex();<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>-<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>operator<sp/>+<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>v<sp/>to<sp/>every<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>new<sp/>vector<sp/>of<sp/>same<sp/>size<sp/>and<sp/>same<sp/>starting<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>result(v.Size(),<sp/>v.MinIndex());</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>all<sp/>elements<sp/>+<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>v.MinIndex();<sp/>i<sp/>&lt;=<sp/>v.MaxIndex();<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>v[i]<sp/>+<sp/>a;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>operator<sp/>+<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>+<sp/>a;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>operator<sp/>*<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>to<sp/>every<sp/>element<sp/>by<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>new<sp/>vector<sp/>of<sp/>same<sp/>size<sp/>and<sp/>same<sp/>starting<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>result(v.Size(),<sp/>v.MinIndex());</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>all<sp/>elements<sp/>+<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>v.MinIndex();<sp/>i<sp/>&lt;=<sp/>v.MaxIndex();<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>v[i]<sp/>*<sp/>a;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>operator<sp/>*<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>*<sp/>a;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>operator<sp/>-<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a)</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>v<sp/>from<sp/>every<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>new<sp/>vector<sp/>of<sp/>same<sp/>size<sp/>and<sp/>same<sp/>starting<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>result(v.Size(),<sp/>v.MinIndex());</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>all<sp/>elements<sp/>-<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>v.MinIndex();<sp/>i<sp/>&lt;=<sp/>v.MaxIndex();<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>v[i]<sp/>-<sp/>a;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>operator<sp/>-<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>new<sp/>vector<sp/>of<sp/>same<sp/>size<sp/>and<sp/>same<sp/>starting<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>result(v.Size(),<sp/>v.MinIndex());</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>all<sp/>elements<sp/>-<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>v.MinIndex();<sp/>i<sp/>&lt;=<sp/>v.MaxIndex();<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>a<sp/>-<sp/>v[i];</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;::operator / </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="186"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>v<sp/>to<sp/>every<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>new<sp/>vector<sp/>of<sp/>same<sp/>size<sp/>and<sp/>same<sp/>starting<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>result(this-&gt;Size(),<sp/>this-&gt;MinIndex());</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>all<sp/>elements<sp/>+<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>this-&gt;MinIndex();<sp/>i<sp/>&lt;=<sp/>this-&gt;MaxIndex();<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i]<sp/>/<sp/>a;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;::operator + </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="202"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>new<sp/>vector<sp/>of<sp/>same<sp/>size<sp/>and<sp/>same<sp/>starting<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>result(this-&gt;Size(),<sp/>this-&gt;MinIndex());</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Result[x]=Source[x]+v[x];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i=this-&gt;MinIndex();<sp/>i&lt;=this-&gt;MaxIndex();<sp/>i++)<sp/>result[i]<sp/>=<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i]<sp/>+<sp/>v[i];</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/><ref refid="classVector_1a4d3ac08839678685a6cc72df5d629588" kindref="member">Vector&lt;V, I, S&gt;::operator - </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="217"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>new<sp/>vector<sp/>of<sp/>same<sp/>size<sp/>and<sp/>same<sp/>starting<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref><sp/>result(this-&gt;Size(),<sp/>this-&gt;MinIndex());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Result[x]=Source[x]-v[x];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i=this-&gt;MinIndex();<sp/>i&lt;=this-&gt;MaxIndex();<sp/>i++)<sp/>result[i]<sp/>=<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i]<sp/>-<sp/>v[i];</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;::operator += </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>v)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>v<sp/>to<sp/>every<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i=this-&gt;MinIndex();<sp/>i&lt;=this-&gt;MaxIndex();<sp/>i++)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i]<sp/>=<sp/>(*this)[i]<sp/>+<sp/>v;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;::operator -= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>v)</highlight></codeline>
<codeline lineno="243"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>v<sp/>from<sp/>every<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i=this-&gt;MinIndex();<sp/>i&lt;=this-&gt;MaxIndex();<sp/>i++)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i]<sp/>=<sp/>(*this)[i]<sp/>-<sp/>v;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;::operator *= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>v)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>every<sp/>element<sp/>by<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i=this-&gt;MinIndex();<sp/>i&lt;=this-&gt;MaxIndex();<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i]<sp/>=<sp/>(*this)[i]<sp/>*<sp/>v;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;::operator /= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>v)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>every<sp/>element<sp/>by<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i=this-&gt;MinIndex();<sp/>i&lt;=this-&gt;MaxIndex();<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i]<sp/>=<sp/>(*this)[i]<sp/>/<sp/>v;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;::operator += </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i=this-&gt;MinIndex();<sp/>i&lt;=this-&gt;MaxIndex();<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i]<sp/>=<sp/>(*this)[i]<sp/>+<sp/>v[i];</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;::operator -= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i=this-&gt;inIndex();<sp/>i&lt;=this-&gt;MaxIndex();<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i]<sp/>=<sp/>(*this)[i]<sp/>-<sp/>v[i];</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;::operator *= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;V, I, S&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i=this-&gt;MinIndex();<sp/>i&lt;=this-&gt;MaxIndex();<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i]<sp/>=<sp/>(*this)[i]<sp/>*<sp/>v[i];</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>&apos;command&apos;<sp/>type<sp/>functions<sp/>that<sp/>are<sp/>useful<sp/>in<sp/>some<sp/>applications.<sp/>Most<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>void<sp/>and<sp/>this<sp/>promotes<sp/>Efficiency.<sp/>Usability<sp/>is<sp/>also<sp/>enhanced.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scale(<ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a)</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>v<sp/>*<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>v.MinIndex();<sp/>i<sp/>&lt;=<sp/>v.MaxIndex();<sp/>i++)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scale(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a,<sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="323"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>a<sp/>*<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>scale(v,<sp/>a);</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add(<ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a)</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>v<sp/>+<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>v.<sp/>MinIndex();<sp/>i<sp/>&lt;=<sp/>v.<sp/>MaxIndex();<sp/>i++)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>+=<sp/>a;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a,<sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="341"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>a<sp/>+<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>add(v,<sp/>a);</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaleAndOffset(<ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>b)</highlight></codeline>
<codeline lineno="349"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>(a<sp/>*<sp/>v)<sp/>+<sp/>b<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>v.<sp/>MinIndex();<sp/>i<sp/>&lt;=<sp/>v.<sp/>MaxIndex();<sp/>i++)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>+=<sp/>b;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subtract(<ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>v<sp/>-<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>v.<sp/>MinIndex();<sp/>i<sp/>&lt;=<sp/>v.<sp/>MaxIndex();<sp/>i++)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>-=<sp/>a;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subtract(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a,<sp/><ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>a<sp/>-<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>operation<sp/>is<sp/>not<sp/>commutative,<sp/>so<sp/>redo<sp/>the<sp/>for<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>v.<sp/>MinIndex();<sp/>i<sp/>&lt;=<sp/>v.<sp/>MaxIndex();<sp/>i++)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>a<sp/>-<sp/>v[i];</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>divide(<ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>a)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>v<sp/>/<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i=<sp/>v.<sp/>MinIndex();<sp/>i<sp/>&lt;=<sp/>v.<sp/>MaxIndex();<sp/>i++)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>/=<sp/>a;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toggleSign(<ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="392"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>-v<sp/>(unary<sp/>minus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>v.<sp/>MinIndex();<sp/>i<sp/>&lt;=<sp/>v.<sp/>MaxIndex();<sp/>i++)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>-v[i];</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign(<ref refid="classVector" kindref="compound">Vector&lt;V,I&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V&amp;<sp/>RHS)</highlight></codeline>
<codeline lineno="401"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>All<sp/>elements<sp/>=<sp/>RHS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>i<sp/>=<sp/>v.<sp/>MinIndex();<sp/>i<sp/>&lt;=<sp/>v.<sp/>MaxIndex();<sp/>i++)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>RHS;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>Vector_CC</highlight></codeline>
    </programlisting>
    <location file="src/Vector.cc"/>
  </compounddef>
</doxygen>
