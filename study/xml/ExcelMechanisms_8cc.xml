<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="ExcelMechanisms_8cc" kind="file" language="C++">
    <compoundname>ExcelMechanisms.cc</compoundname>
    <includes refid="ExcelMechanisms_8hh" local="no">duffy/ExcelMechanisms.hh</includes>
    <includes refid="DatasimException_8hh" local="no">duffy/DatasimException.hh</includes>
    <includes refid="ExcelDriver_8hh" local="no">duffy/ExcelDriver.hh</includes>
    <includes refid="MatrixMechanisms_8hh" local="no">duffy/MatrixMechanisms.hh</includes>
    <incdepgraph>
      <node id="26">
        <label>list</label>
      </node>
      <node id="28">
        <label>duffy/DatasimException.hh</label>
        <link refid="DatasimException_8hh"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>Property.hh</label>
        <link refid="Property_8hh"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>Set.hh</label>
        <link refid="Set_8hh"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>../../src/PropertyThing.cc</label>
        <link refid="PropertyThing_8cc"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Vector.hh</label>
        <link refid="Vector_8hh"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>duffy/ExcelMechanisms.hh</label>
        <link refid="ExcelMechanisms_8hh"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>SimplePropertySet.hh</label>
        <link refid="SimplePropertySet_8hh"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>../../src/Property.cc</label>
        <link refid="Property_8cc"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ArrayStructure.hh</label>
        <link refid="ArrayStructure_8hh"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>StringConversions.hh</label>
        <link refid="StringConversions_8hh"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>../../src/StringConversions.cc</label>
        <link refid="StringConversions_8cc"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>Tensor.hh</label>
        <link refid="Tensor_8hh"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>duffy/MatrixMechanisms.hh</label>
        <link refid="MatrixMechanisms_8hh"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>cmath</label>
      </node>
      <node id="4">
        <label>Array.hh</label>
        <link refid="Array_8hh"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>../../src/Set.cc</label>
        <link refid="Set_8cc"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>../src/ExcelImports.cc</label>
      </node>
      <node id="25">
        <label>string</label>
      </node>
      <node id="19">
        <label>../../src/Matrix.cc</label>
        <link refid="Matrix_8cc"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>map</label>
      </node>
      <node id="32">
        <label>ArrayMechanisms.hh</label>
        <link refid="ArrayMechanisms_8hh"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ExcelMechanisms.cc</label>
        <link refid="ExcelMechanisms_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>../../src/FullArray.cc</label>
        <link refid="FullArray_8cc"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>Range.hh</label>
        <link refid="Range_8hh"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>../../src/SimplePropertySet.cc</label>
        <link refid="SimplePropertySet_8cc"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>Matrix.hh</label>
        <link refid="Matrix_8hh"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>../../src/MatrixStructure.cc</label>
        <link refid="MatrixStructure_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>../../src/FullMatrix.cc</label>
        <link refid="FullMatrix_8cc"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>FullMatrix.hh</label>
        <link refid="FullMatrix_8hh"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>../../src/Tensor.cc</label>
        <link refid="Tensor_8cc"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>../../src/ArrayStructure.cc</label>
        <link refid="ArrayStructure_8cc"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>PropertyThing.hh</label>
        <link refid="PropertyThing_8hh"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>NumericMatrix.hh</label>
        <link refid="NumericMatrix_8hh"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>../../src/NumericMatrix.cc</label>
        <link refid="NumericMatrix_8cc"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="48">
        <label>../../src/MatrixMechanisms.cc</label>
        <link refid="MatrixMechanisms_8cc"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>../../src/ArrayMechanisms.cc</label>
        <link refid="ArrayMechanisms_8cc"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>iostream</label>
      </node>
      <node id="6">
        <label>cstddef</label>
      </node>
      <node id="12">
        <label>../../src/Vector.cc</label>
        <link refid="Vector_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>../../src/Array.cc</label>
        <link refid="Array_8cc"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>../../src/Range.cc</label>
        <link refid="Range_8cc"/>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>duffy/ExcelDriver.hh</label>
        <link refid="ExcelDriver_8hh"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>FullArray.hh</label>
        <link refid="FullArray_8hh"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>set</label>
      </node>
      <node id="42">
        <label>algorithm</label>
      </node>
      <node id="16">
        <label>MatrixStructure.hh</label>
        <link refid="MatrixStructure_8hh"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="ExcelMechanisms_8cc_1afd5fa53bb4e76a3ca86d8958f474b8b0" prot="public" static="no">
        <name>ExcelMechanisms_CC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ExcelMechanisms.cc" line="14" column="9" bodyfile="src/ExcelMechanisms.cc" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ExcelMechanisms_8cc_1aabafce4ba408fc2e6b3a9ae23264c15b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string comma</definition>
        <argsstring>(&quot;, &quot;)</argsstring>
        <name>comma</name>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ExcelMechanisms.cc" line="24" column="19" declfile="src/ExcelMechanisms.cc" declline="24" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="ExcelMechanisms_8cc_1ae7f29803a022e2b09ff177e1d4d317ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string bracketL</definition>
        <argsstring>(&quot;[&quot;)</argsstring>
        <name>bracketL</name>
        <param>
          <type>&quot;[&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ExcelMechanisms.cc" line="25" column="19" declfile="src/ExcelMechanisms.cc" declline="25" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="ExcelMechanisms_8cc_1afe78097e7e8ceef40f1540c81b31e046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string bracketR</definition>
        <argsstring>(&quot;]&quot;)</argsstring>
        <name>bracketR</name>
        <param>
          <type>&quot;]&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ExcelMechanisms.cc" line="26" column="19" declfile="src/ExcelMechanisms.cc" declline="26" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="ExcelMechanisms_8cc_1a12ea9eaf7398a6bb8d5546b0d428c74e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printOneExcel</definition>
        <argsstring>(const Vector&lt; double, long &gt; &amp;x, const Vector&lt; double, long &gt; &amp;functionResult, const std::string &amp;title, const std::string &amp;horizontal, const std::string &amp;vertical, const std::string &amp;legend)</argsstring>
        <name>printOneExcel</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>functionResult</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>horizontal</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>vertical</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>legend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ExcelMechanisms.cc" line="28" column="6" bodyfile="src/ExcelMechanisms.cc" bodystart="28" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="ExcelMechanisms_8cc_1a080c747b42a2f36d70cabb9c9b9d793f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printInExcel</definition>
        <argsstring>(const Vector&lt; double, long &gt; &amp;x, const std::list&lt; std::string &gt; &amp;labels, const std::list&lt; Vector&lt; double, long &gt; &gt; &amp;functionResult, const std::string &amp;title, const std::string &amp;horizontal, const std::string &amp;vertical)</argsstring>
        <name>printInExcel</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::list&lt; std::string &gt; &amp;</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const std::list&lt; <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &gt; &amp;</type>
          <declname>functionResult</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>horizontal</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>vertical</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ExcelMechanisms.cc" line="62" column="6" bodyfile="src/ExcelMechanisms.cc" bodystart="62" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="ExcelMechanisms_8cc_1aac6ffa2b45a155a9ab9c33ea6a70c8e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printMatrixInExcel</definition>
        <argsstring>(const NumericMatrix&lt; double, long &gt; &amp;matrix, const Vector&lt; double, long &gt; &amp;xarr, const Vector&lt; double, long &gt; &amp;yarr, const std::string &amp;SheetName)</argsstring>
        <name>printMatrixInExcel</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; double, long &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>xarr</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>yarr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>SheetName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ExcelMechanisms.cc" line="96" column="6" bodyfile="src/ExcelMechanisms.cc" bodystart="96" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="ExcelMechanisms_8cc_1a6d9f2b005d927a315bd5127c88317ce4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printMatrixChartsInExcel</definition>
        <argsstring>(int freq, const NumericMatrix&lt; double, long &gt; &amp;matrix, const Vector&lt; double, long &gt; &amp;rowArr, const Vector&lt; double, long &gt; &amp;colArr, const std::string &amp;SheetName)</argsstring>
        <name>printMatrixChartsInExcel</name>
        <param>
          <type>int</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; double, long &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>rowArr</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>colArr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>SheetName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ExcelMechanisms.cc" line="127" column="6" bodyfile="src/ExcelMechanisms.cc" bodystart="127" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="ExcelMechanisms_8cc_1a90a4d89d2d56331257a8f262911446fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printMatrixDifferenceInExcel</definition>
        <argsstring>(const NumericMatrix&lt; double, long &gt; &amp;matrix1, const NumericMatrix&lt; double, long &gt; &amp;matrix2, const Vector&lt; double, long &gt; &amp;xarr, const Vector&lt; double, long &gt; &amp;yarr, const std::string &amp;SheetName)</argsstring>
        <name>printMatrixDifferenceInExcel</name>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; double, long &gt; &amp;</type>
          <declname>matrix1</declname>
        </param>
        <param>
          <type>const <ref refid="classNumericMatrix" kindref="compound">NumericMatrix</ref>&lt; double, long &gt; &amp;</type>
          <declname>matrix2</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>xarr</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>yarr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>SheetName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ExcelMechanisms.cc" line="188" column="6" bodyfile="src/ExcelMechanisms.cc" bodystart="188" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="ExcelMechanisms_8cc_1a313f9f1c180fe0a21e71c17255702a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printTensorInExcel</definition>
        <argsstring>(const Tensor&lt; double, long &gt; &amp;tensor, long freq)</argsstring>
        <name>printTensorInExcel</name>
        <param>
          <type>const <ref refid="classTensor" kindref="compound">Tensor</ref>&lt; double, long &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>long</type>
          <declname>freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ExcelMechanisms.cc" line="227" column="6" bodyfile="src/ExcelMechanisms.cc" bodystart="227" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="ExcelMechanisms_8cc_1a72a0696bb629d417f41692f188717153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printTensorInExcel</definition>
        <argsstring>(const Tensor&lt; double, long &gt; &amp;tensor, const Vector&lt; double, long &gt; &amp;xarr, const Vector&lt; double, long &gt; &amp;yarr, const std::string &amp;SheetName, long freq)</argsstring>
        <name>printTensorInExcel</name>
        <param>
          <type>const <ref refid="classTensor" kindref="compound">Tensor</ref>&lt; double, long &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>xarr</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double, long &gt; &amp;</type>
          <declname>yarr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>SheetName</declname>
        </param>
        <param>
          <type>long</type>
          <declname>freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ExcelMechanisms.cc" line="254" column="6" bodyfile="src/ExcelMechanisms.cc" bodystart="254" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="ExcelMechanisms_8cc_1a4d6e83cb634939b5c6f7253db0416a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printDiscreteFunctionValues</definition>
        <argsstring>(double(*f)(double x), double A, double B, long nSteps, const std::string &amp;title, const std::string &amp;horizontal, const std::string &amp;vertical, const std::string &amp;legend)</argsstring>
        <name>printDiscreteFunctionValues</name>
        <param>
          <type>double(*)(double x)</type>
          <declname>f</declname>
        </param>
        <param>
          <type>double</type>
          <declname>A</declname>
        </param>
        <param>
          <type>double</type>
          <declname>B</declname>
        </param>
        <param>
          <type>long</type>
          <declname>nSteps</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>horizontal</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>vertical</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>legend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ExcelMechanisms.cc" line="292" column="6" bodyfile="src/ExcelMechanisms.cc" bodystart="292" bodyend="322"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>ExcelMechanisms.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Useful<sp/>functions<sp/>for<sp/>use<sp/>with<sp/>Excel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2005-11-29<sp/>DD<sp/>kick-off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2005-12-16<sp/>DD<sp/>Introduce<sp/>exception<sp/>handling<sp/>(in<sp/>about<sp/>functions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2006-2-2<sp/>DD<sp/>print<sp/>a<sp/>tensor&apos;s<sp/>matrices<sp/>at<sp/>intervals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2006-6-14<sp/>DD<sp/>Bug<sp/>fix<sp/>PrintInExcel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Datasim<sp/>Education<sp/>BV<sp/>2005-2006</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ExcelMechanisms_CC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="ExcelMechanisms_8cc_1afd5fa53bb4e76a3ca86d8958f474b8b0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ExcelMechanisms_CC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ExcelMechanisms_8hh" kindref="compound">duffy/ExcelMechanisms.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="DatasimException_8hh" kindref="compound">duffy/DatasimException.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ExcelDriver_8hh" kindref="compound">duffy/ExcelDriver.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="MatrixMechanisms_8hh" kindref="compound">duffy/MatrixMechanisms.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&quot;Matrixcheckers.cpp&quot;<sp/>//<sp/>Checking<sp/>aligned<sp/>data<sp/>structures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Hard-coded<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="ExcelMechanisms_8cc_1aabafce4ba408fc2e6b3a9ae23264c15b" kindref="member">comma</ref>(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="ExcelMechanisms_8cc_1ae7f29803a022e2b09ff177e1d4d317ba" kindref="member">bracketL</ref>(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="ExcelMechanisms_8cc_1afe78097e7e8ceef40f1540c81b31e046" kindref="member">bracketR</ref>(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="ExcelMechanisms_8cc_1a12ea9eaf7398a6bb8d5546b0d428c74e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExcelMechanisms_8cc_1a12ea9eaf7398a6bb8d5546b0d428c74e" kindref="member">printOneExcel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>x,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>functionResult,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>title,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>horizontal,<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>vertical,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>legend)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>N.B.<sp/>Excel<sp/>has<sp/>a<sp/>limit<sp/>of<sp/>8<sp/>charts;<sp/>after<sp/>that<sp/>you<sp/>get<sp/>a<sp/>run-time<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PREC:<sp/>Type<sp/>I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>()<sp/>!=<sp/>functionResult.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>())</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tmp<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Sizes<sp/>of<sp/>vectors<sp/>are<sp/>X,<sp/>Y:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(x.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>())<sp/>+<sp/>std::string(<ref refid="ExcelMechanisms_8cc_1aabafce4ba408fc2e6b3a9ae23264c15b" kindref="member">comma</ref>)<sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(functionResult.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classDatasimException" kindref="compound">DatasimException</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Size<sp/>mismatch<sp/>of<sp/>two<sp/>vectors&quot;</highlight><highlight class="normal">),<sp/>std::string(</highlight><highlight class="stringliteral">&quot;PrintOneExcel&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>Excel\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classExcelDriver" kindref="compound">ExcelDriver</ref>&amp;<sp/>excel<sp/>=<sp/><ref refid="classExcelDriver_1a6134831444a75b0ddc0bbf7fb949b1f8" kindref="member">ExcelDriver::Instance</ref>();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>excel.<ref refid="classExcelDriver_1ade5ecc043b7700ef93014799f278ae9b" kindref="member">MakeVisible</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>is<sp/>INVISIBLE!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Workaround</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;std::string&gt;<sp/>legendList;<sp/>legendList.push_back(legend);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;Vector&lt;double,<sp/>long&gt;<sp/>&gt;<sp/>functionResultList;<sp/>functionResultList.push_back(functionResult);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>excel.<ref refid="classExcelDriver_1acecbf115d498691f0637a58ce6bffbf4" kindref="member">CreateChart</ref>(x,<sp/>legendList,<sp/>functionResultList,<sp/>title,<sp/>horizontal,<sp/>vertical);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="ExcelMechanisms_8cc_1a080c747b42a2f36d70cabb9c9b9d793f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExcelMechanisms_8cc_1a080c747b42a2f36d70cabb9c9b9d793f" kindref="member">printInExcel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>x,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::list&lt;std::string&gt;&amp;<sp/>labels,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Names<sp/>of<sp/>each<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::list&lt;<ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref><sp/>&gt;&amp;<sp/>functionResult,<sp/></highlight><highlight class="comment">//<sp/>The<sp/>list<sp/>of<sp/>Y<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>title,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>horizontal,<sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>vertical)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Print<sp/>a<sp/>list<sp/>of<sp/>Vectors<sp/>in<sp/>Excel.<sp/>Each<sp/>vector<sp/>is<sp/>the<sp/>output<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>finite<sp/>difference<sp/>scheme<sp/>for<sp/>a<sp/>scalar<sp/>IVP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PREC:<sp/>Type<sp/>I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(x.Size()<sp/>!=<sp/>labels.size()<sp/>||<sp/>x.Size()<sp/>!=<sp/>functionResult.size())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>cheque<sp/>of<sp/>x<sp/>array<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(labels.size()<sp/>!=<sp/>functionResult.size())</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tmp<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Sizes<sp/>of<sp/>vectors<sp/>are<sp/>X,<sp/>Y,<sp/>Label:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(x.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1aabafce4ba408fc2e6b3a9ae23264c15b" kindref="member">comma</ref><sp/>+</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(functionResult.size())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1aabafce4ba408fc2e6b3a9ae23264c15b" kindref="member">comma</ref><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(labels.size());</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classDatasimException" kindref="compound">DatasimException</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Size<sp/>mismatch<sp/>of<sp/>vectors<sp/>and<sp/>labels&quot;</highlight><highlight class="normal">),<sp/>std::string(</highlight><highlight class="stringliteral">&quot;PrintInExcel&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>Excel\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classExcelDriver" kindref="compound">ExcelDriver</ref>&amp;<sp/>excel<sp/>=<sp/><ref refid="classExcelDriver_1a6134831444a75b0ddc0bbf7fb949b1f8" kindref="member">ExcelDriver::Instance</ref>();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>excel.<ref refid="classExcelDriver_1ade5ecc043b7700ef93014799f278ae9b" kindref="member">MakeVisible</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>is<sp/>INVISIBLE!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>excel.<ref refid="classExcelDriver_1acecbf115d498691f0637a58ce6bffbf4" kindref="member">CreateChart</ref>(x,<sp/>labels,<sp/>functionResult,<sp/>title,<sp/>horizontal,<sp/>vertical);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>a<sp/>two-dimensional<sp/>array<sp/>(typically,<sp/>one<sp/>time<sp/>level)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="ExcelMechanisms_8cc_1aac6ffa2b45a155a9ab9c33ea6a70c8e7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExcelMechanisms_8cc_1aac6ffa2b45a155a9ab9c33ea6a70c8e7" kindref="member">printMatrixInExcel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;double, long&gt;</ref>&amp;<sp/>matrix,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>xarr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>yarr,<sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>SheetName)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PREC:<sp/>Type<sp/>II,<sp/>III</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xarr.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>()<sp/>!=<sp/>matrix.<ref refid="classMatrix_1a137b54c61fa1a897a903ea3c466dd271" kindref="member">Rows</ref>()<sp/>||<sp/>yarr.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>()<sp/>!=<sp/>matrix.<ref refid="classMatrix_1a7e137fcf687b490b80b47269ba8c4ae6" kindref="member">Columns</ref>())</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tmp<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Vectors<sp/>X,<sp/>Y,<sp/>matrix<sp/>M:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(xarr.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1aabafce4ba408fc2e6b3a9ae23264c15b" kindref="member">comma</ref><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(yarr.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>())</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1ae7f29803a022e2b09ff177e1d4d317ba" kindref="member">bracketL</ref><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(matrix.<ref refid="classMatrix_1a137b54c61fa1a897a903ea3c466dd271" kindref="member">Rows</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1aabafce4ba408fc2e6b3a9ae23264c15b" kindref="member">comma</ref><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(matrix.<ref refid="classMatrix_1a7e137fcf687b490b80b47269ba8c4ae6" kindref="member">Columns</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1afe78097e7e8ceef40f1540c81b31e046" kindref="member">bracketR</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classDatasimException" kindref="compound">DatasimException</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Size<sp/>mismatch<sp/>of<sp/>vector(s)<sp/>and<sp/>matrix&quot;</highlight><highlight class="normal">),<sp/>std::string(</highlight><highlight class="stringliteral">&quot;PrintMatrixInExcel&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classExcelDriver" kindref="compound">ExcelDriver</ref>&amp;<sp/>excel<sp/>=<sp/><ref refid="classExcelDriver_1a6134831444a75b0ddc0bbf7fb949b1f8" kindref="member">ExcelDriver::Instance</ref>();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>excel.<ref refid="classExcelDriver_1ade5ecc043b7700ef93014799f278ae9b" kindref="member">MakeVisible</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>a<sp/>matrix<sp/>showing<sp/>the<sp/>x<sp/>and<sp/>y<sp/>positions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>convert<sp/>the<sp/>double<sp/>arrays<sp/>to<sp/>lists<sp/>of<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>Excel&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;std::string&gt;<sp/>rowlabels<sp/>=<sp/><ref refid="StringConversions_8hh_1aa9803942566e177490d69f756e68a138" kindref="member">convertToString</ref>(xarr);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;std::string&gt;<sp/>columnlabels<sp/>=<sp/><ref refid="StringConversions_8hh_1aa9803942566e177490d69f756e68a138" kindref="member">convertToString</ref>(yarr);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Staring<sp/>Excel&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>excel.<ref refid="classExcelDriver_1a63753818c5895ff1ed84dad214de4332" kindref="member">AddMatrix</ref>(SheetName,<sp/>matrix,<sp/>rowlabels,<sp/>columnlabels);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>a<sp/>matrix&apos;s<sp/>rows<sp/>as<sp/>line<sp/>graphs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="ExcelMechanisms_8cc_1a6d9f2b005d927a315bd5127c88317ce4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExcelMechanisms_8cc_1a6d9f2b005d927a315bd5127c88317ce4" kindref="member">printMatrixChartsInExcel</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>freq,<sp/></highlight><highlight class="comment">//<sp/>Selective<sp/>printing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;double, long&gt;</ref>&amp;<sp/>matrix,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>rowArr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>colArr,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>SheetName)</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PREC:<sp/>Type<sp/>II,<sp/>III</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rowArr.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>()<sp/>!=<sp/>matrix.<ref refid="classMatrix_1a137b54c61fa1a897a903ea3c466dd271" kindref="member">Rows</ref>()<sp/>||<sp/>colArr.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>()<sp/>!=<sp/>matrix.<ref refid="classMatrix_1a7e137fcf687b490b80b47269ba8c4ae6" kindref="member">Columns</ref>())</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tmp<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Vectors<sp/>X,<sp/>Y,<sp/>matrix<sp/>M:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(rowArr.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1aabafce4ba408fc2e6b3a9ae23264c15b" kindref="member">comma</ref><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(colArr.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>())</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1ae7f29803a022e2b09ff177e1d4d317ba" kindref="member">bracketL</ref><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(matrix.<ref refid="classMatrix_1a137b54c61fa1a897a903ea3c466dd271" kindref="member">Rows</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1aabafce4ba408fc2e6b3a9ae23264c15b" kindref="member">comma</ref><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(matrix.<ref refid="classMatrix_1a7e137fcf687b490b80b47269ba8c4ae6" kindref="member">Columns</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1afe78097e7e8ceef40f1540c81b31e046" kindref="member">bracketR</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classDatasimException" kindref="compound">DatasimException</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Size<sp/>mismatch<sp/>of<sp/>vector(s)<sp/>and<sp/>matrix&quot;</highlight><highlight class="normal">),<sp/>std::string(</highlight><highlight class="stringliteral">&quot;PrintMatrixChartsInExcel&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>title;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref><sp/>tmp(matrix.<ref refid="classMatrix_1a7e137fcf687b490b80b47269ba8c4ae6" kindref="member">Columns</ref>(),<sp/>matrix.<ref refid="classMatrix_1a72061ea24736a0ff90e62c1c0f40bad9" kindref="member">MinColumnIndex</ref>());</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723" kindref="member">r</ref><sp/>=<sp/>matrix.<ref refid="classMatrix_1a0505cda9acadb178a38ec97718bf2fab" kindref="member">MinRowIndex</ref>();<sp/><ref refid="namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723" kindref="member">r</ref><sp/>&lt;=<sp/>matrix.<ref refid="classMatrix_1abd8766ab01ecf06e70cdce889afba641" kindref="member">MaxRowIndex</ref>();<sp/><ref refid="namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723" kindref="member">r</ref>++)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>title<sp/>=<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(<ref refid="namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723" kindref="member">r</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/><ref refid="ExcelDriver_8hh_1a1b724dd4e99548501ed8e37c192d9eca" kindref="member">createVector</ref>(matrix,<sp/><ref refid="namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723" kindref="member">r</ref>);<sp/></highlight><highlight class="comment">//<sp/>Can<sp/>optimise<sp/>(later)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ArrayMechanisms_8hh_1a7a738d11c1fc7a5a9204c8c2adb08402" kindref="member">print</ref>(tmp);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723" kindref="member">r</ref>/freq)*freq<sp/>==<sp/><ref refid="namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723" kindref="member">r</ref>)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ExcelMechanisms_8cc_1a12ea9eaf7398a6bb8d5546b0d428c74e" kindref="member">printOneExcel</ref>(colArr,<sp/>tmp,<sp/>title);<sp/></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="161"><highlight class="comment">//<sp/>Print<sp/>the<sp/>vector<sp/>that<sp/>is<sp/>the<sp/>difference<sp/>of<sp/>two<sp/>vectors</highlight></codeline>
<codeline lineno="162"><highlight class="comment">void<sp/>printDifferenceInExcel(const<sp/>Vector&lt;double,<sp/>long&gt;&amp;<sp/>x,<sp/><sp/>const<sp/>Vector&lt;double,<sp/>long&gt;&amp;<sp/>y1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Vector&lt;double,<sp/>long&gt;&amp;<sp/>y2,</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>title,<sp/></highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>horizontal,<sp/></highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>vertical,</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>legend)</highlight></codeline>
<codeline lineno="168"><highlight class="comment">{</highlight></codeline>
<codeline lineno="169"><highlight class="comment"></highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>PREC:<sp/>Type<sp/>IA</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(x.Size()<sp/>!=<sp/>y1.Size()<sp/>||<sp/>x.Size()<sp/>!=<sp/>y2.Size())</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tmp<sp/>=<sp/>&quot;Sizes<sp/>vectors<sp/>X,Y1,Y2:<sp/>&quot;<sp/>+<sp/>getString(x.Size())<sp/>+<sp/>comma<sp/>+<sp/>getString(y1.Size())<sp/></highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>comma<sp/>+<sp/>getString(y2.Size());</highlight></codeline>
<codeline lineno="175"><highlight class="comment"></highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>DatasimException(string(&quot;Size<sp/>mismatch<sp/>of<sp/>3<sp/>vectors&quot;),<sp/>std::string(&quot;PrintDifferenceInExcel&quot;),</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp);</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="comment"></highlight></codeline>
<codeline lineno="180"><highlight class="comment"></highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/>Vector&lt;double,<sp/>long&gt;<sp/>diffVector<sp/>=<sp/>y1<sp/>-<sp/>y2;</highlight></codeline>
<codeline lineno="182"><highlight class="comment"></highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/>printOneExcel(x,<sp/>diffVector,<sp/>title,<sp/>horizontal,<sp/>vertical,<sp/>legend);</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="185"><highlight class="comment"></highlight></codeline>
<codeline lineno="186"><highlight class="comment">}</highlight></codeline>
<codeline lineno="187"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="ExcelMechanisms_8cc_1a90a4d89d2d56331257a8f262911446fc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExcelMechanisms_8cc_1a90a4d89d2d56331257a8f262911446fc" kindref="member">printMatrixDifferenceInExcel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;double, long&gt;</ref>&amp;<sp/>matrix1,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;double, long&gt;</ref>&amp;<sp/>matrix2,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>xarr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>yarr,<sp/></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>SheetName)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PREC:<sp/>Type<sp/>IV<sp/>m1,<sp/>m2<sp/>have<sp/>same<sp/>&apos;shape&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrix1.<ref refid="classMatrix_1a137b54c61fa1a897a903ea3c466dd271" kindref="member">Rows</ref>()<sp/>!=<sp/>matrix2.<ref refid="classMatrix_1a137b54c61fa1a897a903ea3c466dd271" kindref="member">Rows</ref>()<sp/>||<sp/>matrix1.<ref refid="classMatrix_1a7e137fcf687b490b80b47269ba8c4ae6" kindref="member">Columns</ref>()<sp/>!=<sp/>matrix2.<ref refid="classMatrix_1a7e137fcf687b490b80b47269ba8c4ae6" kindref="member">Columns</ref>())</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tmp1<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;,<sp/>x<sp/>and<sp/>y<sp/>arrays:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1ae7f29803a022e2b09ff177e1d4d317ba" kindref="member">bracketL</ref><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(xarr.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1aabafce4ba408fc2e6b3a9ae23264c15b" kindref="member">comma</ref><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(yarr.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1afe78097e7e8ceef40f1540c81b31e046" kindref="member">bracketR</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tmp<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>matrices:<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(matrix1.<ref refid="classMatrix_1a137b54c61fa1a897a903ea3c466dd271" kindref="member">Rows</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1aabafce4ba408fc2e6b3a9ae23264c15b" kindref="member">comma</ref><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(matrix1.<ref refid="classMatrix_1a7e137fcf687b490b80b47269ba8c4ae6" kindref="member">Columns</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1afe78097e7e8ceef40f1540c81b31e046" kindref="member">bracketR</ref><sp/>+<sp/></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ExcelMechanisms_8cc_1ae7f29803a022e2b09ff177e1d4d317ba" kindref="member">bracketL</ref><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(matrix2.<ref refid="classMatrix_1a137b54c61fa1a897a903ea3c466dd271" kindref="member">Rows</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1aabafce4ba408fc2e6b3a9ae23264c15b" kindref="member">comma</ref><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(matrix2.<ref refid="classMatrix_1a7e137fcf687b490b80b47269ba8c4ae6" kindref="member">Columns</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1afe78097e7e8ceef40f1540c81b31e046" kindref="member">bracketR</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>+=<sp/>tmp1;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classDatasimException" kindref="compound">DatasimException</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Size<sp/>mismatch<sp/>of<sp/>matrices&quot;</highlight><highlight class="normal">),<sp/>std::string(</highlight><highlight class="stringliteral">&quot;PrintMatrixDifferenceInExcel&quot;</highlight><highlight class="normal">),tmp);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classNumericMatrix" kindref="compound">NumericMatrix&lt;double, long&gt;</ref><sp/>m2<sp/>=<sp/>matrix1<sp/>-<sp/>matrix2;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PREC:<sp/>Type<sp/>II,<sp/>III</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xarr.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>()<sp/>!=<sp/>m2.<ref refid="classMatrix_1a137b54c61fa1a897a903ea3c466dd271" kindref="member">Rows</ref>()<sp/>||<sp/>yarr.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>()<sp/>!=<sp/>m2.<ref refid="classMatrix_1a7e137fcf687b490b80b47269ba8c4ae6" kindref="member">Columns</ref>())</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tmp<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Vectors<sp/>X,<sp/>Y,<sp/>matrix<sp/>M:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(xarr.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1aabafce4ba408fc2e6b3a9ae23264c15b" kindref="member">comma</ref><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(yarr.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>())<sp/>+<sp/></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ExcelMechanisms_8cc_1ae7f29803a022e2b09ff177e1d4d317ba" kindref="member">bracketL</ref><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(m2.<ref refid="classMatrix_1a137b54c61fa1a897a903ea3c466dd271" kindref="member">Rows</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1aabafce4ba408fc2e6b3a9ae23264c15b" kindref="member">comma</ref><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(m2.<ref refid="classMatrix_1a7e137fcf687b490b80b47269ba8c4ae6" kindref="member">Columns</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1afe78097e7e8ceef40f1540c81b31e046" kindref="member">bracketR</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classDatasimException" kindref="compound">DatasimException</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Size<sp/>mismatch<sp/>of<sp/>vector(s)<sp/>and<sp/>matrix&quot;</highlight><highlight class="normal">),<sp/>std::string(</highlight><highlight class="stringliteral">&quot;PrintMatrixDifferenceInExcel&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ArrayMechanisms_8hh_1a7a738d11c1fc7a5a9204c8c2adb08402" kindref="member">print</ref>(m2);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ExcelMechanisms_8cc_1aac6ffa2b45a155a9ab9c33ea6a70c8e7" kindref="member">printMatrixInExcel</ref>(m2,<sp/>xarr,<sp/>yarr,<sp/>SheetName);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>an<sp/>array<sp/>of<sp/>matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="ExcelMechanisms_8cc_1a313f9f1c180fe0a21e71c17255702a54" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExcelMechanisms_8cc_1a313f9f1c180fe0a21e71c17255702a54" kindref="member">printTensorInExcel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTensor" kindref="compound">Tensor&lt;double, long&gt;</ref>&amp;<sp/>tensor,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>freq)</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PREC:<sp/>None<sp/>needed,<sp/>always<sp/>works</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classExcelDriver" kindref="compound">ExcelDriver</ref>&amp;<sp/>excel<sp/>=<sp/><ref refid="classExcelDriver_1a6134831444a75b0ddc0bbf7fb949b1f8" kindref="member">ExcelDriver::Instance</ref>();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>excel.<ref refid="classExcelDriver_1ade5ecc043b7700ef93014799f278ae9b" kindref="member">MakeVisible</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Use:<sp/>excel.AddMatrix(sheetName,<sp/>matrix,<sp/>rowlabels,<sp/>columnlabels);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;std::string&gt;<sp/>rowlabels(tensor.<ref refid="classTensor_1aef9f18eee21230b69a12c03ddf765abc" kindref="member">MaxFirstIndex</ref>());</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;std::string&gt;<sp/>columnlabels(tensor.<ref refid="classTensor_1aa7a13e524f1fbbfdf0bdf68192e034b4" kindref="member">MaxSecondIndex</ref>());</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>tensor.<ref refid="classTensor_1aa95268c48800c8ca1dd6243b59a09543" kindref="member">MinThirdIndex</ref>();<sp/>i<sp/>&lt;=<sp/>tensor.<ref refid="classTensor_1a6266f47513cc5b5924573ac58390b7cb" kindref="member">MaxThirdIndex</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(i);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i/freq)*freq<sp/>==<sp/>i<sp/>||<sp/>i<sp/>==<sp/>tensor.<ref refid="classTensor_1aa95268c48800c8ca1dd6243b59a09543" kindref="member">MinThirdIndex</ref>())</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>excel.<ref refid="classExcelDriver_1a63753818c5895ff1ed84dad214de4332" kindref="member">AddMatrix</ref>(name,<sp/>tensor[i],<sp/>rowlabels,<sp/>columnlabels);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>an<sp/>array<sp/>of<sp/>matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="ExcelMechanisms_8cc_1a72a0696bb629d417f41692f188717153" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExcelMechanisms_8cc_1a313f9f1c180fe0a21e71c17255702a54" kindref="member">printTensorInExcel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTensor" kindref="compound">Tensor&lt;double, long&gt;</ref>&amp;<sp/>tensor,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>xarr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref>&amp;<sp/>yarr,<sp/></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>SheetName,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>freq)</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PREC:<sp/>Type<sp/>II,<sp/>III</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xarr.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>()<sp/>!=<sp/>tensor.<ref refid="classTensor_1a1d19abc6ebc88dcd1e31a9035d4f42f1" kindref="member">Rows</ref>()<sp/>||<sp/>yarr.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>()<sp/>!=<sp/>tensor.<ref refid="classTensor_1acb5f71b7416a3361164821b624933dd3" kindref="member">Columns</ref>())</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tmp<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Vectors<sp/>X,<sp/>Y,<sp/>tensor<sp/>M:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(xarr.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1aabafce4ba408fc2e6b3a9ae23264c15b" kindref="member">comma</ref><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(yarr.<ref refid="classArray_1a69342621906b355e8244466f9eeece71" kindref="member">Size</ref>())<sp/>+<sp/></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ExcelMechanisms_8cc_1ae7f29803a022e2b09ff177e1d4d317ba" kindref="member">bracketL</ref><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(tensor.<ref refid="classTensor_1a1d19abc6ebc88dcd1e31a9035d4f42f1" kindref="member">Rows</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1aabafce4ba408fc2e6b3a9ae23264c15b" kindref="member">comma</ref><sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(tensor.<ref refid="classTensor_1acb5f71b7416a3361164821b624933dd3" kindref="member">Columns</ref>())<sp/>+<sp/><ref refid="ExcelMechanisms_8cc_1afe78097e7e8ceef40f1540c81b31e046" kindref="member">bracketR</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classDatasimException" kindref="compound">DatasimException</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Size<sp/>mismatch<sp/>of<sp/>vector(s)<sp/>and<sp/>tensor&quot;</highlight><highlight class="normal">),<sp/>std::string(</highlight><highlight class="stringliteral">&quot;PrintTensorInExcel&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;std::string&gt;<sp/>rowlabels<sp/>=<sp/><ref refid="StringConversions_8hh_1aa9803942566e177490d69f756e68a138" kindref="member">convertToString</ref>(xarr);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;std::string&gt;<sp/>columnlabels<sp/>=<sp/><ref refid="StringConversions_8hh_1aa9803942566e177490d69f756e68a138" kindref="member">convertToString</ref>(yarr);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classExcelDriver" kindref="compound">ExcelDriver</ref>&amp;<sp/>excel<sp/>=<sp/><ref refid="classExcelDriver_1a6134831444a75b0ddc0bbf7fb949b1f8" kindref="member">ExcelDriver::Instance</ref>();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>excel.<ref refid="classExcelDriver_1ade5ecc043b7700ef93014799f278ae9b" kindref="member">MakeVisible</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>tmp;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>tensor.<ref refid="classTensor_1aa95268c48800c8ca1dd6243b59a09543" kindref="member">MinThirdIndex</ref>();<sp/>i<sp/>&lt;=<sp/>tensor.<ref refid="classTensor_1a6266f47513cc5b5924573ac58390b7cb" kindref="member">MaxThirdIndex</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>SheetName<sp/>+<sp/><ref refid="StringConversions_8hh_1a213a07386067dc8dfe4aa69843afd183" kindref="member">getString</ref>(i);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i/freq)*freq<sp/>==<sp/>i<sp/>||<sp/>i<sp/>==<sp/>tensor.<ref refid="classTensor_1aa95268c48800c8ca1dd6243b59a09543" kindref="member">MinThirdIndex</ref>())</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>excel.<ref refid="classExcelDriver_1a63753818c5895ff1ed84dad214de4332" kindref="member">AddMatrix</ref>(tmp,<sp/>tensor[i],<sp/>rowlabels,<sp/>columnlabels);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>discrete<sp/>values<sp/>of<sp/>a<sp/>continuous<sp/>function<sp/>on<sp/>interval<sp/>[A,B]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="ExcelMechanisms_8cc_1a4d6e83cb634939b5c6f7253db0416a6a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExcelMechanisms_8cc_1a4d6e83cb634939b5c6f7253db0416a6a" kindref="member">printDiscreteFunctionValues</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>(*f)<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classB" kindref="compound">B</ref>,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nSteps,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>title,<sp/></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>horizontal,<sp/></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>vertical,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>legend)</highlight></codeline>
<codeline lineno="297"><highlight class="normal">{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>discrete<sp/>x<sp/>and<sp/>y<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>(<ref refid="classB" kindref="compound">B</ref><sp/>-<sp/>A)<sp/>/<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>(nSteps);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref><sp/>mesh(nSteps<sp/>+<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>A;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nSteps<sp/>+<sp/>1;<sp/>i++)<sp/><sp/></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh[i]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/>h;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>array<sp/>of<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref><sp/>result(nSteps<sp/>+<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i2<sp/>=<sp/>1;<sp/>i2<sp/>&lt;=<sp/>nSteps<sp/>+<sp/>1;<sp/>i2++)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i2]<sp/>=<sp/>(*f)(mesh[i2]);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ExcelMechanisms_8cc_1a12ea9eaf7398a6bb8d5546b0d428c74e" kindref="member">printOneExcel</ref>(mesh,<sp/>result,<sp/>title,<sp/>horizontal,<sp/>vertical,<sp/>legend);</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/ExcelMechanisms.cc"/>
  </compounddef>
</doxygen>
