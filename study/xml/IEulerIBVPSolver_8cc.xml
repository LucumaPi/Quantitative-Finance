<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="IEulerIBVPSolver_8cc" kind="file" language="C++">
    <compoundname>IEulerIBVPSolver.cc</compoundname>
    <includes refid="IEulerIBVPSolver_8hh" local="no">duffy/IEulerIBVPSolver.hh</includes>
    <includes refid="ArrayMechanisms_8hh" local="no">duffy/ArrayMechanisms.hh</includes>
    <incdepgraph>
      <node id="30">
        <label>list</label>
      </node>
      <node id="12">
        <label>IBVPImp.hh</label>
        <link refid="IBVPImp_8hh_source"/>
      </node>
      <node id="23">
        <label>Property.hh</label>
        <link refid="Property_8hh_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>Set.hh</label>
        <link refid="Set_8hh_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Vector.hh</label>
        <link refid="Vector_8hh_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>SimplePropertySet.hh</label>
        <link refid="SimplePropertySet_8hh_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ArrayStructure.hh</label>
        <link refid="ArrayStructure_8hh_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>LUSolver.hh</label>
        <link refid="LUSolver_8hh_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>Tensor.hh</label>
        <link refid="Tensor_8hh_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>cmath</label>
      </node>
      <node id="20">
        <label>cassert</label>
      </node>
      <node id="7">
        <label>Array.hh</label>
        <link refid="Array_8hh_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>string</label>
      </node>
      <node id="27">
        <label>map</label>
      </node>
      <node id="21">
        <label>duffy/ArrayMechanisms.hh</label>
        <link refid="ArrayMechanisms_8hh_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Range.hh</label>
        <link refid="Range_8hh_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>Matrix.hh</label>
        <link refid="Matrix_8hh_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>FullMatrix.hh</label>
        <link refid="FullMatrix_8hh_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>PropertyThing.hh</label>
        <link refid="PropertyThing_8hh_source"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>NumericMatrix.hh</label>
        <link refid="NumericMatrix_8hh_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>duffy/IEulerIBVPSolver.hh</label>
        <link refid="IEulerIBVPSolver_8hh_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>vector</label>
      </node>
      <node id="1">
        <label>src/IEulerIBVPSolver.cc</label>
        <link refid="IEulerIBVPSolver_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>Mesher.hh</label>
        <link refid="Mesher_8hh_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>IBVP.hh</label>
        <link refid="IBVP_8hh_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cstddef</label>
      </node>
      <node id="10">
        <label>FullArray.hh</label>
        <link refid="FullArray_8hh_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>set</label>
      </node>
      <node id="16">
        <label>MatrixStructure.hh</label>
        <link refid="MatrixStructure_8hh_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>IBVPSolver.hh</label>
        <link refid="IBVPSolver_8hh_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="IEulerIBVPSolver_8cc_1ada3f3c03937cdc5f665fc9f7c033e0f6" prot="public" static="no">
        <name>IEulerIBVPSOLVER_CC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IEulerIBVPSolver.cc" line="17" column="9" bodyfile="src/IEulerIBVPSolver.cc" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>IEulerIbvpSolver.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Solvers<sp/>for<sp/>initial<sp/>boundary<sp/>value<sp/>problems.<sp/>We<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>an<sp/>abstract<sp/>base<sp/>class;<sp/>derived<sp/>class<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>behaviour.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2005-9-36<sp/>DD<sp/>kick-off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2005-10-1<sp/>DD<sp/>next<sp/>rev.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2005-10-11<sp/>DD<sp/>last<sp/>revision?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2005-11-30<sp/>DD<sp/>new<sp/>cpp<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2006-1-10<sp/>fixng<sp/>+<sp/>aligning<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(C)<sp/>Datasim<sp/>Component<sp/>Technology<sp/>BV<sp/>2003-2006</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>IEulerIBVPSOLVER_CC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IEulerIBVPSOLVER_CC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;duffy/IEulerIBVPSolver.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;duffy/ArrayMechanisms.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">ImplicitEulerIBVP::ImplicitEulerIBVP():<sp/><ref refid="classIBVPFDM" kindref="compound">IBVPFDM</ref>()</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!!!<sp/>number<sp/>of<sp/>unknowns<sp/>is<sp/>J<sp/>-<sp/>1<sp/>(Dirichlet)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>A<sp/>=<sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref><sp/>(J-1,<sp/>1);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classB" kindref="compound">B</ref><sp/>=<sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref><sp/>(J-1,<sp/>1);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>C<sp/>=<sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref><sp/>(J-1,<sp/>1);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>F<sp/>=<sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref><sp/>(J-1,<sp/>1);</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">ImplicitEulerIBVP::ImplicitEulerIBVP(<ref refid="classIBVP" kindref="compound">IBVP</ref>&amp;<sp/>source,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>NSteps,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>JSteps)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classIBVPFDM" kindref="compound">IBVPFDM</ref>(source,<sp/>NSteps,<sp/>JSteps)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!!!<sp/>number<sp/>of<sp/>unknowns<sp/>is<sp/>J<sp/>-<sp/>1<sp/>(Dirichlet)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>A<sp/>=<sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref><sp/>(J-1,<sp/>1);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classB" kindref="compound">B</ref><sp/>=<sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref><sp/>(J-1,<sp/>1);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>C<sp/>=<sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref><sp/>(J-1,<sp/>1);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>F<sp/>=<sp/><ref refid="classVector" kindref="compound">Vector&lt;double, long&gt;</ref><sp/>(J-1,<sp/>1);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImplicitEulerIBVP::calculateBC()</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>how<sp/>to<sp/>calculate<sp/>sol.<sp/>at<sp/>n+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>vecNew[vecNew.MinIndex()]<sp/>=<sp/>ibvp-&gt;BCL(tnow);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>vecNew[vecNew.MaxIndex()]<sp/>=<sp/>ibvp-&gt;BCR(tnow);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;IC&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>print(vecOld);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>kk;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>std::cin<sp/>&gt;&gt;<sp/>kk;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImplicitEulerIBVP::calculate()</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>how<sp/>to<sp/>calculate<sp/>sol.<sp/>at<sp/>n+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>general<sp/>we<sp/>need<sp/>to<sp/>solve<sp/>a<sp/>tridiagonal<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp1,<sp/>tmp2;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>F.MinIndex();<sp/>i<sp/>&lt;=<sp/>F.MaxIndex();<sp/>i++)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp1<sp/>=<sp/>(k*ibvp-&gt;diffusion(xarr[i+1],tnow<sp/>));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp2<sp/>=<sp/>(0.5<sp/>*<sp/>k<sp/>*<sp/>h*<sp/>(ibvp-&gt;convection(xarr[i+1],<sp/>tnow)));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Coefficients<sp/>of<sp/>the<sp/>U<sp/>terms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[i]<sp/>=<sp/>tmp1<sp/>-<sp/>tmp2;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classB" kindref="compound">B</ref>[i]<sp/>=<sp/>-h2<sp/>-<sp/>(2.0*tmp1)<sp/>+<sp/>(k*h2*(ibvp-&gt;zeroterm(xarr[i+1],tnow)));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C[i]<sp/>=<sp/>tmp1<sp/>+<sp/>tmp2;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F[i]<sp/>=<sp/>h2*(k<sp/>*<sp/>(ibvp<sp/>-&gt;<sp/>RHS(xarr[i+1],<sp/>tnow))<sp/>-<sp/>vecOld[i+1]);<sp/></highlight><highlight class="comment">//?&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Coeficients&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>print(A);<sp/>print(B);<sp/>print(C);<sp/>print(F);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>kl;<sp/>std::cin<sp/>&gt;&gt;<sp/>kl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Correction<sp/>term<sp/>for<sp/>RHS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>F[1]<sp/><sp/><sp/><sp/>-=<sp/>A[1]<sp/>*<sp/>vecNew[vecNew.MinIndex()];</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>F[J-1]<sp/><sp/>-=<sp/>C[J-1]<sp/>*<sp/>vecNew[vecNew.MaxIndex()]<sp/>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>solve<sp/>the<sp/>system<sp/>of<sp/>equations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLUTridiagonalSolver" kindref="compound">LUTridiagonalSolver&lt;double, long&gt;</ref><sp/>mySolver(A,<sp/><ref refid="classB" kindref="compound">B</ref>,<sp/>C,<sp/>F);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>matrix<sp/>must<sp/>be<sp/>diagonally<sp/>dominant;<sp/>we<sp/>call<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert<sp/>macro<sp/>and<sp/>the<sp/>programs<sp/>stops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(mySolver.diagonallyDominant()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector &lt;double, long&gt;</ref><sp/>solution<sp/>=<sp/>mySolver.solve();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>vecNew.MinIndex()+1;<sp/>ii<sp/>&lt;=<sp/>vecNew.MaxIndex()-1;<sp/>ii++)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vecNew[ii]<sp/>=<sp/>solution[ii-1];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//print(vecNew);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>k;<sp/>std::cin<sp/>&gt;&gt;<sp/>k;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/IEulerIBVPSolver.cc"/>
  </compounddef>
</doxygen>
