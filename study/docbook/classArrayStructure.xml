<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classArrayStructure">
<title>ArrayStructure&lt; V &gt; Class Template Reference</title>
<indexterm><primary>ArrayStructure&lt; V &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;ArrayStructure.hh&gt;</computeroutput>
</para>
Inheritance diagram for ArrayStructure&lt; V &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classArrayStructure__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for ArrayStructure&lt; V &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classArrayStructure__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classArrayStructure_1ae1faa0c106fbfe8cf7b448305cd60971">ArrayStructure</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classArrayStructure_1a3132a3ed14728c10e895876e209b0fdd">ArrayStructure</link> (const <link linkend="_classArrayStructure">ArrayStructure</link>&lt; V &gt; &amp;source)</para>
</listitem>
            <listitem><para>virtual <link linkend="_classArrayStructure_1a432ff0d274a03c435763de0541c89bba">~ArrayStructure</link> ()</para>
</listitem>
            <listitem><para>virtual std::size_t <link linkend="_classArrayStructure_1a29bd0faa2d4f0e60152ef197d56148b4">Size</link> () const =0</para>
</listitem>
            <listitem><para>const V &amp; <link linkend="_classArrayStructure_1a78eeb9ade72d1ce8dc930758618c16fc">Element</link> (std::size_t index) const</para>
</listitem>
            <listitem><para>std::size_t <link linkend="_classArrayStructure_1a4d49f9d79bad81e175574b46515f1dac">MinIndex</link> () const</para>
</listitem>
            <listitem><para>std::size_t <link linkend="_classArrayStructure_1a4cc63ad298846fec9ab00d6e1d4436d4">MaxIndex</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_classArrayStructure_1ab93152f3cacec460dff67b9ab81938f5">Element</link> (size_t index, const V &amp;val)</para>
</listitem>
            <listitem><para>virtual V &amp; <link linkend="_classArrayStructure_1a81c632bed29ddd1a373b6769490a67d7">operator[]</link> (std::size_t index)=0</para>
</listitem>
            <listitem><para>virtual const V &amp; <link linkend="_classArrayStructure_1ad7d4487d8276969345406acbf753e00a">operator[]</link> (std::size_t index) const =0</para>
</listitem>
            <listitem><para><link linkend="_classArrayStructure">ArrayStructure</link>&lt; V &gt; &amp; <link linkend="_classArrayStructure_1aee8dc21d313bd8706f397a561332d654">operator=</link> (const <link linkend="_classArrayStructure">ArrayStructure</link>&lt; V &gt; &amp;source)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;class V&gt;
class ArrayStructure&lt; V &gt;</title></simplesect>

<para>
Definition at line 14 of file ArrayStructure.hh.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classArrayStructure_1ae1faa0c106fbfe8cf7b448305cd60971"/>    <section>
    <title>ArrayStructure()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>ArrayStructure</primary><secondary>ArrayStructure&lt; V &gt;</secondary></indexterm>
<indexterm><primary>ArrayStructure&lt; V &gt;</primary><secondary>ArrayStructure</secondary></indexterm>
<computeroutput>template&lt;class V &gt; </computeroutput><para><computeroutput><link linkend="_classArrayStructure">ArrayStructure</link>&lt; V &gt;::<link linkend="_classArrayStructure">ArrayStructure</link> ( )</computeroutput></para><para>
Definition at line 18 of file ArrayStructure.cc.</para>
<programlisting>19 {&#32;<emphasis role="comment">//&#32;Default&#32;constructor</emphasis>
20 }
</programlisting>    </section><anchor xml:id="_classArrayStructure_1a3132a3ed14728c10e895876e209b0fdd"/>    <section>
    <title>ArrayStructure()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>ArrayStructure</primary><secondary>ArrayStructure&lt; V &gt;</secondary></indexterm>
<indexterm><primary>ArrayStructure&lt; V &gt;</primary><secondary>ArrayStructure</secondary></indexterm>
<computeroutput>template&lt;class V &gt; </computeroutput><para><computeroutput><link linkend="_classArrayStructure">ArrayStructure</link>&lt; V &gt;::<link linkend="_classArrayStructure">ArrayStructure</link> (const <link linkend="_classArrayStructure">ArrayStructure</link>&lt; V &gt; &amp; source)</computeroutput></para><para>
Definition at line 23 of file ArrayStructure.cc.</para>
<programlisting>24 {&#32;<emphasis role="comment">//&#32;Copy&#32;constructor</emphasis>
25 }
</programlisting>    </section><anchor xml:id="_classArrayStructure_1a432ff0d274a03c435763de0541c89bba"/>    <section>
    <title>~ArrayStructure()</title>
<indexterm><primary>~ArrayStructure</primary><secondary>ArrayStructure&lt; V &gt;</secondary></indexterm>
<indexterm><primary>ArrayStructure&lt; V &gt;</primary><secondary>~ArrayStructure</secondary></indexterm>
<computeroutput>template&lt;class V &gt; </computeroutput><para><computeroutput><link linkend="_classArrayStructure">ArrayStructure</link>&lt; V &gt;::~<link linkend="_classArrayStructure">ArrayStructure</link> ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Definition at line 28 of file ArrayStructure.cc.</para>
<programlisting>29 {&#32;<emphasis role="comment">//&#32;Destructor</emphasis>
30 }
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classArrayStructure_1ab93152f3cacec460dff67b9ab81938f5"/>    <section>
    <title>Element()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Element</primary><secondary>ArrayStructure&lt; V &gt;</secondary></indexterm>
<indexterm><primary>ArrayStructure&lt; V &gt;</primary><secondary>Element</secondary></indexterm>
<computeroutput>template&lt;class V&gt; </computeroutput><para><computeroutput>void <link linkend="_classArrayStructure">ArrayStructure</link>&lt; V &gt;::Element (size_t index, const V &amp; val)</computeroutput></para>    </section><anchor xml:id="_classArrayStructure_1a78eeb9ade72d1ce8dc930758618c16fc"/>    <section>
    <title>Element()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Element</primary><secondary>ArrayStructure&lt; V &gt;</secondary></indexterm>
<indexterm><primary>ArrayStructure&lt; V &gt;</primary><secondary>Element</secondary></indexterm>
<computeroutput>template&lt;class V &gt; </computeroutput><para><computeroutput>const V &amp; <link linkend="_classArrayStructure">ArrayStructure</link>&lt; V &gt;::Element (std::size_t index) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 34 of file ArrayStructure.cc.</para>
<programlisting>35 {&#32;<emphasis role="comment">//&#32;Get&#32;element&#32;at&#32;position</emphasis>
36 
37 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;the&#32;subscript&#32;operator&#32;in&#32;derived&#32;classes</emphasis>
38 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((*<emphasis role="keyword">this</emphasis>)[index]);
39 }
</programlisting>    </section><anchor xml:id="_classArrayStructure_1a4cc63ad298846fec9ab00d6e1d4436d4"/>    <section>
    <title>MaxIndex()</title>
<indexterm><primary>MaxIndex</primary><secondary>ArrayStructure&lt; V &gt;</secondary></indexterm>
<indexterm><primary>ArrayStructure&lt; V &gt;</primary><secondary>MaxIndex</secondary></indexterm>
<computeroutput>template&lt;class V &gt; </computeroutput><para><computeroutput>std::size_t <link linkend="_classArrayStructure">ArrayStructure</link>&lt; V &gt;::MaxIndex ( ) const</computeroutput></para><para>
Definition at line 50 of file ArrayStructure.cc.</para>
<programlisting>51 {&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;maximum&#32;index</emphasis>
52 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classArrayStructure_1a29bd0faa2d4f0e60152ef197d56148b4">Size</link>();
53 }
</programlisting>    </section><anchor xml:id="_classArrayStructure_1a4d49f9d79bad81e175574b46515f1dac"/>    <section>
    <title>MinIndex()</title>
<indexterm><primary>MinIndex</primary><secondary>ArrayStructure&lt; V &gt;</secondary></indexterm>
<indexterm><primary>ArrayStructure&lt; V &gt;</primary><secondary>MinIndex</secondary></indexterm>
<computeroutput>template&lt;class V &gt; </computeroutput><para><computeroutput>std::size_t <link linkend="_classArrayStructure">ArrayStructure</link>&lt; V &gt;::MinIndex ( ) const</computeroutput></para><para>
Definition at line 42 of file ArrayStructure.cc.</para>
<programlisting>43 {&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;minimum&#32;index</emphasis>
44 
45 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Always&#32;ONE</emphasis>
46 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
47 }
</programlisting>    </section><anchor xml:id="_classArrayStructure_1aee8dc21d313bd8706f397a561332d654"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>ArrayStructure&lt; V &gt;</secondary></indexterm>
<indexterm><primary>ArrayStructure&lt; V &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;class V &gt; </computeroutput><para><computeroutput><link linkend="_classArrayStructure">ArrayStructure</link>&lt; V &gt; &amp; <link linkend="_classArrayStructure">ArrayStructure</link>&lt; V &gt;::operator= (const <link linkend="_classArrayStructure">ArrayStructure</link>&lt; V &gt; &amp; source)</computeroutput></para><para>
Definition at line 65 of file ArrayStructure.cc.</para>
<programlisting>66 {&#32;<emphasis role="comment">//&#32;Assignment&#32;operator</emphasis>
67 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
68 }
</programlisting>    </section><anchor xml:id="_classArrayStructure_1ad7d4487d8276969345406acbf753e00a"/>    <section>
    <title>operator[]()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>ArrayStructure&lt; V &gt;</secondary></indexterm>
<indexterm><primary>ArrayStructure&lt; V &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;class V&gt; </computeroutput><para><computeroutput>virtual const V&amp; <link linkend="_classArrayStructure">ArrayStructure</link>&lt; V &gt;::operator[] (std::size_t index) const<computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>
Implemented in <link linkend="_classFullArray_1ab20c110bcf7e445dfc410b0fb55fa408">FullArray&lt; V, TA &gt;</link>, <link linkend="_classFullArray_1ab20c110bcf7e445dfc410b0fb55fa408">FullArray&lt; Vector&lt; double, int &gt; &gt;</link>, <link linkend="_classFullArray_1ab20c110bcf7e445dfc410b0fb55fa408">FullArray&lt; NumericMatrix&lt; V, I &gt; &gt;</link>, <link linkend="_classFullArray_1ab20c110bcf7e445dfc410b0fb55fa408">FullArray&lt; FullArray&lt; double, std::allocator&lt; double &gt; &gt;, std::allocator&lt; FullArray&lt; double, std::allocator&lt; double &gt; &gt; &gt; &gt;</link>, <link linkend="_classFullArray_1ab20c110bcf7e445dfc410b0fb55fa408">FullArray&lt; double &gt;</link>, <link linkend="_classFullArray_1ab20c110bcf7e445dfc410b0fb55fa408">FullArray&lt; V &gt;</link>, <link linkend="_classFullArray_1ab20c110bcf7e445dfc410b0fb55fa408">FullArray&lt; Vector&lt; V, I &gt; &gt;</link>, <link linkend="_classFullArray_1ab20c110bcf7e445dfc410b0fb55fa408">FullArray&lt; FullArray&lt; V, std::allocator&lt; V &gt; &gt;, std::allocator&lt; FullArray&lt; V, std::allocator&lt; V &gt; &gt; &gt; &gt;</link>, and <link linkend="_classFullArray_1ab20c110bcf7e445dfc410b0fb55fa408">FullArray&lt; FullArray&lt; TValue, TA &gt;, std::allocator&lt; FullArray&lt; TValue, TA &gt; &gt; &gt;</link>.</para>
    </section><anchor xml:id="_classArrayStructure_1a81c632bed29ddd1a373b6769490a67d7"/>    <section>
    <title>operator[]()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>ArrayStructure&lt; V &gt;</secondary></indexterm>
<indexterm><primary>ArrayStructure&lt; V &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;class V&gt; </computeroutput><para><computeroutput>virtual V&amp; <link linkend="_classArrayStructure">ArrayStructure</link>&lt; V &gt;::operator[] (std::size_t index)<computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>
Implemented in <link linkend="_classFullArray_1a0ecf139013ac590276644320dcc663fc">FullArray&lt; V, TA &gt;</link>, <link linkend="_classFullArray_1a0ecf139013ac590276644320dcc663fc">FullArray&lt; Vector&lt; double, int &gt; &gt;</link>, <link linkend="_classFullArray_1a0ecf139013ac590276644320dcc663fc">FullArray&lt; NumericMatrix&lt; V, I &gt; &gt;</link>, <link linkend="_classFullArray_1a0ecf139013ac590276644320dcc663fc">FullArray&lt; FullArray&lt; double, std::allocator&lt; double &gt; &gt;, std::allocator&lt; FullArray&lt; double, std::allocator&lt; double &gt; &gt; &gt; &gt;</link>, <link linkend="_classFullArray_1a0ecf139013ac590276644320dcc663fc">FullArray&lt; double &gt;</link>, <link linkend="_classFullArray_1a0ecf139013ac590276644320dcc663fc">FullArray&lt; V &gt;</link>, <link linkend="_classFullArray_1a0ecf139013ac590276644320dcc663fc">FullArray&lt; Vector&lt; V, I &gt; &gt;</link>, <link linkend="_classFullArray_1a0ecf139013ac590276644320dcc663fc">FullArray&lt; FullArray&lt; V, std::allocator&lt; V &gt; &gt;, std::allocator&lt; FullArray&lt; V, std::allocator&lt; V &gt; &gt; &gt; &gt;</link>, and <link linkend="_classFullArray_1a0ecf139013ac590276644320dcc663fc">FullArray&lt; FullArray&lt; TValue, TA &gt;, std::allocator&lt; FullArray&lt; TValue, TA &gt; &gt; &gt;</link>.</para>
    </section><anchor xml:id="_classArrayStructure_1a29bd0faa2d4f0e60152ef197d56148b4"/>    <section>
    <title>Size()</title>
<indexterm><primary>Size</primary><secondary>ArrayStructure&lt; V &gt;</secondary></indexterm>
<indexterm><primary>ArrayStructure&lt; V &gt;</primary><secondary>Size</secondary></indexterm>
<computeroutput>template&lt;class V&gt; </computeroutput><para><computeroutput>virtual std::size_t <link linkend="_classArrayStructure">ArrayStructure</link>&lt; V &gt;::Size ( ) const<computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>
Implemented in <link linkend="_classFullArray_1ae9a91c66741570e20758d54664676db8">FullArray&lt; V, TA &gt;</link>, <link linkend="_classFullArray_1ae9a91c66741570e20758d54664676db8">FullArray&lt; Vector&lt; double, int &gt; &gt;</link>, <link linkend="_classFullArray_1ae9a91c66741570e20758d54664676db8">FullArray&lt; NumericMatrix&lt; V, I &gt; &gt;</link>, <link linkend="_classFullArray_1ae9a91c66741570e20758d54664676db8">FullArray&lt; FullArray&lt; double, std::allocator&lt; double &gt; &gt;, std::allocator&lt; FullArray&lt; double, std::allocator&lt; double &gt; &gt; &gt; &gt;</link>, <link linkend="_classFullArray_1ae9a91c66741570e20758d54664676db8">FullArray&lt; double &gt;</link>, <link linkend="_classFullArray_1ae9a91c66741570e20758d54664676db8">FullArray&lt; V &gt;</link>, <link linkend="_classFullArray_1ae9a91c66741570e20758d54664676db8">FullArray&lt; Vector&lt; V, I &gt; &gt;</link>, <link linkend="_classFullArray_1ae9a91c66741570e20758d54664676db8">FullArray&lt; FullArray&lt; V, std::allocator&lt; V &gt; &gt;, std::allocator&lt; FullArray&lt; V, std::allocator&lt; V &gt; &gt; &gt; &gt;</link>, and <link linkend="_classFullArray_1ae9a91c66741570e20758d54664676db8">FullArray&lt; FullArray&lt; TValue, TA &gt;, std::allocator&lt; FullArray&lt; TValue, TA &gt; &gt; &gt;</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/duffy/<link linkend="_ArrayStructure_8hh">ArrayStructure.hh</link>src/<link linkend="_ArrayStructure_8cc">ArrayStructure.cc</link></section>
</section>
