<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_TestNewLattice_8cc">
<title>tests/TestNewLattice.cc File Reference</title>
<indexterm><primary>tests/TestNewLattice.cc</primary></indexterm>
<programlisting>#include &lt;duffy/Lattice.hh&gt;
#include &lt;duffy/ArrayMechanisms.hh&gt;
#include &quot;../src/LatticeMechanisms.cc&quot;
#include &lt;cmath&gt;
</programlisting>Include dependency graph for TestNewLattice.cc:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="TestNewLattice_8cc__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_TestNewLattice_8cc_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_TestNewLattice_8cc_1ae66f6b31b5ad750f1fe042a706a4e3d4"/>    <section>
    <title>main()</title>
<indexterm><primary>main</primary><secondary>TestNewLattice.cc</secondary></indexterm>
<indexterm><primary>TestNewLattice.cc</primary><secondary>main</secondary></indexterm>
<para><computeroutput>int main ( )</computeroutput></para><para>
Definition at line 17 of file TestNewLattice.cc.</para>
<programlisting>18 {
19 &#32;&#32;&#32;&#32;
20 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;lattice&#32;=&#32;2;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;BinomialLatticeType;</emphasis>
21 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;depth&#32;=&#32;3;
22 
23 &#32;&#32;&#32;&#32;<link linkend="_classLattice">Lattice&lt;double, int&gt;</link>&#32;lattice1(depth);
24 
25 <emphasis role="comment">//&#32;&#32;print(lattice1);</emphasis>
26 
27 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Forward&#32;sweep,&#32;Wilmott&#32;p.&#32;193\n&quot;</emphasis>;
28 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;rootValue&#32;=&#32;5.0;&#32;&#32;<emphasis role="comment">//&#32;Stock&#32;price&#32;now</emphasis>
29 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;D0&#32;=&#32;0.0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Dividend&#32;yield</emphasis>
30 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;vol&#32;=&#32;0.5;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Volatility</emphasis>
31 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723">r</link>&#32;=&#32;2*0.06;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Interest</emphasis>
32 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_namespaceNSEuropeanOption_1a62a4ea4e8132239d531a9760dfe36b4d">T</link>&#32;=&#32;1.0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Time&#32;to&#32;expiry</emphasis>
33 
34 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;k&#32;=&#32;<link linkend="_namespaceNSEuropeanOption_1a62a4ea4e8132239d531a9760dfe36b4d">T</link>&#32;/&#32;double&#32;(depth);
35 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;e&#32;=&#32;<link linkend="_Complex_8cc_1aeb56775d93a065d4bd643a5ed679db8c">std::exp</link>((<link linkend="_namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723">r</link>-D0)*k);
36 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;sr&#32;=&#32;std::sqrt(<link linkend="_Complex_8cc_1aeb56775d93a065d4bd643a5ed679db8c">exp</link>(vol*vol*k)&#32;-&#32;1.0);
37 
38 
39 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;up&#32;=&#32;e&#32;*&#32;(1.0&#32;+&#32;sr);
40 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;down&#32;=&#32;e&#32;*&#32;(1.0&#32;-&#32;sr);
41 
42 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Call&#32;the&#32;function&#32;from&#32;ArrayMechanisms&#32;package</emphasis>
43 &#32;&#32;&#32;&#32;<link linkend="_TestBasicMap_8cc_1a0723e714a96e2b21eba69f10f8960cf7">modify</link>(lattice1,&#32;rootValue,&#32;up,&#32;down);
44 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;modified&#32;lattice&quot;</emphasis>;
45 <emphasis role="comment">//&#32;&#32;print&#32;(lattice1);</emphasis>
46 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;work&#32;back&#32;from&#32;the&#32;payoff&#32;function</emphasis>
47 
48 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;make&#32;the&#32;discrete&#32;payoff</emphasis>
49 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_namespacePayoffNamespace_1ab501f4bdb2c74995b98b666056c671fb">K</link>&#32;=&#32;10.0;
50 <emphasis role="comment">//&#32;&#32;Vector&lt;double,&#32;int&gt;&#32;RHS&#32;=&#32;CallPayOff(K,&#32;lattice1[lattice1.MaxIndex()]);</emphasis>
51 &#32;&#32;&#32;&#32;<link linkend="_classVector">Vector&lt;double, int&gt;</link>&#32;RHS&#32;=&#32;<link linkend="_TestLattice_8cc_1a30a47c60854db7b413b641236b4157d2">PutPayOff</link>(<link linkend="_namespacePayoffNamespace_1ab501f4bdb2c74995b98b666056c671fb">K</link>,&#32;lattice1[lattice1.MaxIndex()]);
52 
53 &#32;&#32;&#32;&#32;<emphasis role="comment">//print&#32;(RHS);</emphasis>
54 
55 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;probValue&#32;=&#32;0.5;
56 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;discounting&#32;=&#32;<link linkend="_Complex_8cc_1aeb56775d93a065d4bd643a5ed679db8c">::exp</link>(-&#32;<link linkend="_namespaceNSEuropeanOption_1adf476278b7e6a6960d82dc00e93ef723">r</link>*k);
57 &#32;&#32;&#32;&#32;ExerciseType&#32;<link linkend="_namespacePayoffNamespace_1a39ee14e55dbe34eb4f30330edd487f84">type</link>&#32;=&#32;EuropeanExerciseType;
58 
59 &#32;&#32;&#32;&#32;<link linkend="_classLattice">Lattice&lt;double, int&gt;</link>&#32;treeValues(lattice1);&#32;&#32;<emphasis role="comment">//&#32;Will&#32;be&#32;initialised&#32;in&#32;traverse()</emphasis>
60 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;optionPrice&#32;=&#32;<link linkend="_namespaceStandardLattice_1a3e49a59024bcef068e558f70a756df05">traverse</link>(lattice1,&#32;RHS,&#32;probValue,&#32;discounting,&#32;<link linkend="_namespacePayoffNamespace_1a39ee14e55dbe34eb4f30330edd487f84">type</link>,&#32;treeValues);
61 
62 <emphasis role="comment">//&#32;&#32;print(treeValues);</emphasis>
63 
64 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\nOption&#32;price&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;optionPrice&#32;&lt;&lt;&#32;std::endl;
65 
66 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sensitivities&#32;(greeks)</emphasis>
67 &#32;&#32;&#32;&#32;<link linkend="_classLattice">Lattice&lt;double, int&gt;</link>&#32;deltaLattice&#32;=&#32;dividedDifference(treeValues,&#32;lattice1);&#32;<emphasis role="comment">//&#32;Y&#32;and&#32;X&#32;values&#32;so&#32;to&#32;speak</emphasis>
68 <emphasis role="comment">//&#32;&#32;print&#32;(deltaLattice);</emphasis>
69 
70 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Finish&quot;</emphasis>;
71 
72 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
73 }
</programlisting></section>
</section>
</section>
