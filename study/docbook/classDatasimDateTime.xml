<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classDatasimDateTime">
<title>DatasimDateTime Class Reference</title>
<indexterm><primary>DatasimDateTime</primary></indexterm>
<para>
<computeroutput>#include &lt;DatesimDateTime.hh&gt;</computeroutput>
</para>
Inheritance diagram for DatasimDateTime:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classDatasimDateTime__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for DatasimDateTime:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classDatasimDateTime__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classDatasimDateTime_1a6bba814ffc42155f7ced0830a12106b9">DatasimDateTime</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime_1a893bd0cd1b267a6bfecc02de44d1563d">DatasimDateTime</link> (const <link linkend="_classDatasimDateTime">DatasimDateTime</link> &amp;)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime_1a28c58c2ac02781b7e98ef4f93a9357cb">DatasimDateTime</link> (<link linkend="_DatesimDateTime_8hh_1a3fe0acc26bd6a1dc8b4cb3b1d4bed7fe">secTy</link> secs, long *over=0)</para>
</listitem>
            <listitem><para>int <link linkend="_classDatasimDateTime_1a03794573344da99abd33b6b16670219d">ret_hour</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_classDatasimDateTime_1a043cd9647f9062d18b652996578afdcf">ret_minute</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_classDatasimDateTime_1a1858e2b56f0bafbbf25ba63e15d7f07d">ret_second</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_classDatasimDateTime_1a91df760056052bfce214e56b1b308d57">operator==</link> (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</para>
</listitem>
            <listitem><para>bool <link linkend="_classDatasimDateTime_1a9f272d4518ba235c84e52da7ba52eddc">operator!=</link> (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</para>
</listitem>
            <listitem><para>bool <link linkend="_classDatasimDateTime_1a9610d34a0ce319bcefb932539b53f783">operator&gt;</link> (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</para>
</listitem>
            <listitem><para>bool <link linkend="_classDatasimDateTime_1a316134f75182feacfaece1efdbe859c6">operator&lt;</link> (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</para>
</listitem>
            <listitem><para>bool <link linkend="_classDatasimDateTime_1a05733ca22e20b17ee08e45dcf6c2093e">operator&gt;=</link> (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</para>
</listitem>
            <listitem><para>bool <link linkend="_classDatasimDateTime_1a95692ca557f9da8436e7f9765a1822ba">operator&lt;=</link> (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime">DatasimDateTime</link> <link linkend="_classDatasimDateTime_1a8d29a8a2e2d585bece6406362f0fcff0">operator=</link> (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime">DatasimDateTime</link> <link linkend="_classDatasimDateTime_1ae9b89102524f49387b466dc2fc9205e9">operator+</link> (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime">DatasimDateTime</link> <link linkend="_classDatasimDateTime_1a97964fb63ffaf76f36857bb7e02f92f5">operator+</link> (long seconds)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime">DatasimDateTime</link> <link linkend="_classDatasimDateTime_1a83040c964ad4e6ccb54179a6eba89dba">operator-</link> (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime">DatasimDateTime</link> <link linkend="_classDatasimDateTime_1a8d047a83a727bee384c4c2b256cacac8">operator-</link> (long seconds)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime">DatasimDateTime</link> <link linkend="_classDatasimDateTime_1a364611b44f9fcf675788d08957c78dba">operator++</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime">DatasimDateTime</link> <link linkend="_classDatasimDateTime_1a99c7501167024faee62981340da0d116">operator--</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime">DatasimDateTime</link> <link linkend="_classDatasimDateTime_1ab07a95787f88b6cf0dcade6695638de2">operator+=</link> (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime">DatasimDateTime</link> <link linkend="_classDatasimDateTime_1a5737b79c0a0f8392597aaaf9dfed10d0">operator+=</link> (long secs)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime">DatasimDateTime</link> <link linkend="_classDatasimDateTime_1a44e30c8e8aa02eaeeb9c75c22ebb1fc2">operator-=</link> (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime">DatasimDateTime</link> <link linkend="_classDatasimDateTime_1a22662f26292fef9f73bc5b081f15dc4f">operator-=</link> (long secs)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime">DatasimDateTime</link> <link linkend="_classDatasimDateTime_1a5778524ddd106e457c5d70540d395eee">add_hours</link> (long hours)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime">DatasimDateTime</link> <link linkend="_classDatasimDateTime_1a62014e665a05ebb1a3300acc4f57c4f2">add_minutes</link> (long minutes)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime">DatasimDateTime</link> <link linkend="_classDatasimDateTime_1a97e61d7bb8be7df31096eaa240865ca0">sub_hours</link> (long hours)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime">DatasimDateTime</link> <link linkend="_classDatasimDateTime_1a60b8878b21a7d117dc7c4a225f7e0d41">sub_minutes</link> (long minutes)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime">DatasimDateTime</link> <link linkend="_classDatasimDateTime_1a9bc493467b0748b34f77439f3f8863d6">add_period</link> (<link linkend="_DatesimDateTime_8hh_1a3fe0acc26bd6a1dc8b4cb3b1d4bed7fe">secTy</link> secs, <link linkend="_DatesimDateTime_8hh_1a3fe0acc26bd6a1dc8b4cb3b1d4bed7fe">secTy</link> mins=0, <link linkend="_DatesimDateTime_8hh_1a3fe0acc26bd6a1dc8b4cb3b1d4bed7fe">secTy</link> hours=0)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime">DatasimDateTime</link> <link linkend="_classDatasimDateTime_1a0f537d8771a9ac4c0fec01897703c452">sub_period</link> (<link linkend="_DatesimDateTime_8hh_1a3fe0acc26bd6a1dc8b4cb3b1d4bed7fe">secTy</link> secs, <link linkend="_DatesimDateTime_8hh_1a3fe0acc26bd6a1dc8b4cb3b1d4bed7fe">secTy</link> mins=0, <link linkend="_DatesimDateTime_8hh_1a3fe0acc26bd6a1dc8b4cb3b1d4bed7fe">secTy</link> hours=0)</para>
</listitem>
            <listitem><para>void <link linkend="_classDatasimDateTime_1ac0773e399f2fd8984fc7fcd322e28dae">print</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_classDatasimDateTime_1a9b6a86a41c4994e79fa02369df95589d">secs_to_dtime</link> (int &amp;h, int &amp;m, int &amp;s, long *over=0) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line 20 of file DatesimDateTime.hh.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classDatasimDateTime_1a6bba814ffc42155f7ced0830a12106b9"/>    <section>
    <title>DatasimDateTime()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>DatasimDateTime</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>DatasimDateTime</secondary></indexterm>
<para><computeroutput>DatasimDateTime::DatasimDateTime ( )</computeroutput></para><para>
Definition at line 127 of file DatesimDateTime.cc.</para>
<programlisting>134 {
135 &#32;&#32;&#32;&#32;time_t&#32;local_time;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;type&#32;to&#32;hold&#32;time</emphasis>
136 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>tm&#32;*t_ptr;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;struct&#32;to&#32;contain&#32;time,&#32;date&#32;etc</emphasis>
137 
138 &#32;&#32;&#32;&#32;local_time&#32;=&#32;time(NULL);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;get&#32;time&#32;(and&#32;date)&#32;from&#32;system</emphasis>
139 &#32;&#32;&#32;&#32;t_ptr&#32;=&#32;localtime(&amp;local_time);&#32;<emphasis role="comment">//&#32;convert&#32;to&#32;struct&#32;</emphasis>
140 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;hour_t&#32;=&#32;hour_test(t_ptr-&gt;tm_hour);&#32;<emphasis role="comment">//&#32;test&#32;hour.</emphasis>
141 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;min_t&#32;=&#32;min_test(t_ptr-&gt;tm_min);&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;test&#32;minute</emphasis>
142 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sec_t&#32;=&#32;sec_test(t_ptr-&gt;tm_sec);&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;test&#32;second</emphasis>
143 &#32;&#32;&#32;&#32;seconds&#32;=&#32;secs(hour_t,&#32;min_t,&#32;sec_t);&#32;&#32;&#32;<emphasis role="comment">//&#32;cal.&#32;seconds&#32;from&#32;midnight</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a893bd0cd1b267a6bfecc02de44d1563d"/>    <section>
    <title>DatasimDateTime()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>DatasimDateTime</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>DatasimDateTime</secondary></indexterm>
<para><computeroutput>DatasimDateTime::DatasimDateTime (const <link linkend="_classDatasimDateTime">DatasimDateTime</link> &amp; DatasimDateTime_2)</computeroutput></para><para>
Definition at line 116 of file DatesimDateTime.cc.</para>
<programlisting>123 {
124 &#32;&#32;&#32;&#32;seconds&#32;=&#32;DatasimDateTime_2.seconds;
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a28c58c2ac02781b7e98ef4f93a9357cb"/>    <section>
    <title>DatasimDateTime()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>DatasimDateTime</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>DatasimDateTime</secondary></indexterm>
<para><computeroutput>DatasimDateTime::DatasimDateTime (<link linkend="_DatesimDateTime_8hh_1a3fe0acc26bd6a1dc8b4cb3b1d4bed7fe">secTy</link> secs, long * over = <computeroutput>0</computeroutput>
)</computeroutput></para><para>
Definition at line 102 of file DatesimDateTime.cc.</para>
<programlisting>109 {
110 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(secs&#32;&gt;=&#32;day_seconds&#32;<link linkend="_DatasimDate_8hh_1acd1b97556dfbbac61063a63031d2f91d">AND</link>&#32;over&#32;!=&#32;0)&#32;&#32;<emphasis role="comment">//&#32;past&#32;day-limit</emphasis>
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;par.&#32;&apos;*over&apos;&#32;passed</emphasis>
112 &#32;&#32;&#32;&#32;*over&#32;=&#32;secs&#32;/&#32;day_seconds;&#32;<emphasis role="comment">//&#32;#days&#32;past</emphasis>
113 &#32;&#32;&#32;&#32;secs&#32;%=&#32;day_seconds;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;rest&#32;of&#32;seconds</emphasis>
114 &#32;&#32;&#32;&#32;seconds&#32;=&#32;secs;
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classDatasimDateTime_1a5778524ddd106e457c5d70540d395eee"/>    <section>
    <title>add_hours()</title>
<indexterm><primary>add_hours</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>add_hours</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime::add_hours (long hours)</computeroutput></para><para>
Definition at line 427 of file DatesimDateTime.cc.</para>
<programlisting>434 {&#32;
435 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDateTime">DatasimDateTime</link>&#32;tmp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;temporary&#32;result</emphasis>
436 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hours&#32;&gt;=&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;positive&#32;#hours</emphasis>
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;=&#32;<link linkend="_classDatasimDateTime_1a9bc493467b0748b34f77439f3f8863d6">add_period</link>(0,&#32;0,&#32;hours);&#32;&#32;<emphasis role="comment">//&#32;add&#32;hours</emphasis>
438 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;negative&#32;#hours</emphasis>
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;=&#32;<link linkend="_classDatasimDateTime_1a0f537d8771a9ac4c0fec01897703c452">sub_period</link>(0,&#32;0,&#32;hours&#32;*&#32;-1);&#32;<emphasis role="comment">//&#32;subtract&#32;hours</emphasis>
440 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(tmp);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;result</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a62014e665a05ebb1a3300acc4f57c4f2"/>    <section>
    <title>add_minutes()</title>
<indexterm><primary>add_minutes</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>add_minutes</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime::add_minutes (long minutes)</computeroutput></para><para>
Definition at line 459 of file DatesimDateTime.cc.</para>
<programlisting>466 {&#32;
467 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDateTime">DatasimDateTime</link>&#32;tmp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;temporary&#32;result</emphasis>
468 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minutes&#32;&gt;=&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;positive&#32;#minutes</emphasis>
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;=&#32;<link linkend="_classDatasimDateTime_1a9bc493467b0748b34f77439f3f8863d6">add_period</link>(0,&#32;minutes);&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;#minutes</emphasis>
470 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;negative&#32;#minutes</emphasis>
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;=&#32;<link linkend="_classDatasimDateTime_1a0f537d8771a9ac4c0fec01897703c452">sub_period</link>(0,&#32;minutes&#32;*&#32;-1);&#32;<emphasis role="comment">//&#32;subtract&#32;minutes</emphasis>
472 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(tmp);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;result</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a9bc493467b0748b34f77439f3f8863d6"/>    <section>
    <title>add_period()</title>
<indexterm><primary>add_period</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>add_period</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime::add_period (<link linkend="_DatesimDateTime_8hh_1a3fe0acc26bd6a1dc8b4cb3b1d4bed7fe">secTy</link> secs, <link linkend="_DatesimDateTime_8hh_1a3fe0acc26bd6a1dc8b4cb3b1d4bed7fe">secTy</link> mins = <computeroutput>0</computeroutput>
, <link linkend="_DatesimDateTime_8hh_1a3fe0acc26bd6a1dc8b4cb3b1d4bed7fe">secTy</link> hours = <computeroutput>0</computeroutput>
)</computeroutput></para><para>
Definition at line 398 of file DatesimDateTime.cc.</para>
<programlisting>406 {
407 &#32;&#32;&#32;&#32;
408 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDateTime">DatasimDateTime</link>&#32;tmp&#32;=&#32;<link linkend="_classDatasimDateTime_1a6bba814ffc42155f7ced0830a12106b9">DatasimDateTime</link>(&#32;secs(secos,&#32;mins,&#32;hours)&#32;);&#32;<emphasis role="comment">//&#32;construct&#32;DatasimDateTime</emphasis>
409 &#32;&#32;&#32;&#32;tmp&#32;=&#32;*<emphasis role="keyword">this</emphasis>&#32;+&#32;tmp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;DatasimDateTimes</emphasis>
410 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(tmp);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;new&#32;time</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a9f272d4518ba235c84e52da7ba52eddc"/>    <section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool DatasimDateTime::operator!= (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</computeroutput></para><para>
Definition at line 193 of file DatesimDateTime.cc.</para>
<programlisting>199 {
200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(seconds&#32;!=&#32;DatasimDateTime_2.seconds)
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(<emphasis role="keyword">true</emphasis>);
202 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(<emphasis role="keyword">false</emphasis>);
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1ae9b89102524f49387b466dc2fc9205e9"/>    <section>
    <title>operator+()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime::operator+ (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</computeroutput></para><para>
Definition at line 277 of file DatesimDateTime.cc.</para>
<programlisting>283 {
284 &#32;&#32;&#32;&#32;<link linkend="_DatesimDateTime_8hh_1a3fe0acc26bd6a1dc8b4cb3b1d4bed7fe">secTy</link>&#32;tot_sec&#32;=&#32;seconds&#32;+&#32;t2.seconds;&#32;&#32;&#32;<emphasis role="comment">//&#32;total&#32;#&#32;seconds</emphasis>
285 &#32;&#32;&#32;&#32;tot_sec&#32;%=&#32;day_seconds;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;discard&#32;overflow</emphasis>
286 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDateTime">DatasimDateTime</link>&#32;t(tot_sec);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;construct&#32;DatasimDateTime&#32;from&#32;rest</emphasis>
287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(t);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;added&#32;time</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a97964fb63ffaf76f36857bb7e02f92f5"/>    <section>
    <title>operator+()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime::operator+ (long seconds)</computeroutput></para><para>
Definition at line 290 of file DatesimDateTime.cc.</para>
<programlisting>296 {
297 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDateTime">DatasimDateTime</link>&#32;tmp;
298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(secos&#32;&gt;=&#32;0)
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;=&#32;*<emphasis role="keyword">this</emphasis>&#32;+&#32;<link linkend="_classDatasimDateTime_1a6bba814ffc42155f7ced0830a12106b9">DatasimDateTime</link>(secos);&#32;&#32;&#32;<emphasis role="comment">//&#32;construct&#32;DatasimDateTime,&#32;discard&#32;ovf</emphasis>
300 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;=&#32;*<emphasis role="keyword">this</emphasis>&#32;+&#32;<link linkend="_classDatasimDateTime_1a6bba814ffc42155f7ced0830a12106b9">DatasimDateTime</link>(secos&#32;*&#32;-1);&#32;<emphasis role="comment">//&#32;construct&#32;DatasimDateTime</emphasis>
302 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(tmp);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;DatasimDateTime</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a364611b44f9fcf675788d08957c78dba"/>    <section>
    <title>operator++()</title>
<indexterm><primary>operator++</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>operator++</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime::operator++ ( )</computeroutput></para><para>
Definition at line 253 of file DatesimDateTime.cc.</para>
<programlisting>259 {
260 &#32;&#32;&#32;&#32;seconds++;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;one&#32;second&#32;later</emphasis>
261 &#32;&#32;&#32;&#32;seconds&#32;%=&#32;day_seconds;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;discard&#32;overflow</emphasis>
262 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(*<emphasis role="keyword">this</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;second&#32;later</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1ab07a95787f88b6cf0dcade6695638de2"/>    <section>
    <title>operator+=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime::operator+= (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</computeroutput></para><para>
Definition at line 348 of file DatesimDateTime.cc.</para>
<programlisting>354 {
355 &#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;*<emphasis role="keyword">this</emphasis>&#32;+&#32;DatasimDateTime_2;&#32;&#32;<emphasis role="comment">//&#32;add&#32;DatasimDateTime_2&#32;to&#32;this&#32;DatasimDateTime</emphasis>
356 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(*<emphasis role="keyword">this</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;it</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a5737b79c0a0f8392597aaaf9dfed10d0"/>    <section>
    <title>operator+=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime::operator+= (long secs)</computeroutput></para><para>
Definition at line 336 of file DatesimDateTime.cc.</para>
<programlisting>343 {
344 &#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;*<emphasis role="keyword">this</emphasis>&#32;+&#32;secos;&#32;&#32;<emphasis role="comment">//&#32;call&#32;operator+,&#32;add&#32;seconds</emphasis>
345 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(*<emphasis role="keyword">this</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;new&#32;this&#32;DatasimDateTime</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a83040c964ad4e6ccb54179a6eba89dba"/>    <section>
    <title>operator-()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime::operator- (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</computeroutput></para><para>
Definition at line 305 of file DatesimDateTime.cc.</para>
<programlisting>311 {
312 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDateTime">DatasimDateTime</link>&#32;tmp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;temporary&#32;DatasimDateTime</emphasis>
313 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>&#32;&gt;=&#32;t2)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;result&#32;will&#32;be&#32;pos</emphasis>
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;=&#32;<link linkend="_classDatasimDateTime_1a6bba814ffc42155f7ced0830a12106b9">DatasimDateTime</link>(seconds&#32;-&#32;t2.seconds);&#32;<emphasis role="comment">//&#32;subtract&#32;seconds&#32;and&#32;constr.</emphasis>
315 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;result&#32;will&#32;be&#32;negative</emphasis>
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;=&#32;<link linkend="_classDatasimDateTime_1a6bba814ffc42155f7ced0830a12106b9">DatasimDateTime</link>(day_seconds&#32;-&#32;t2.seconds&#32;+&#32;seconds);
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;make&#32;positive&#32;and&#32;construct</emphasis>
318 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(tmp);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;added&#32;time</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a8d047a83a727bee384c4c2b256cacac8"/>    <section>
    <title>operator-()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime::operator- (long seconds)</computeroutput></para><para>
Definition at line 321 of file DatesimDateTime.cc.</para>
<programlisting>327 {
328 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDateTime">DatasimDateTime</link>&#32;tmp;
329 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nr_secs&#32;&gt;=&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;#seconds&#32;is&#32;positive</emphasis>
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;=&#32;*<emphasis role="keyword">this</emphasis>&#32;-&#32;<link linkend="_classDatasimDateTime_1a6bba814ffc42155f7ced0830a12106b9">DatasimDateTime</link>(nr_secs);&#32;<emphasis role="comment">//&#32;construct&#32;DatasimDateTime,&#32;discard&#32;ovf</emphasis>
331 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;#seconds&#32;is&#32;negative</emphasis>
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;=&#32;*<emphasis role="keyword">this</emphasis>&#32;-&#32;<link linkend="_classDatasimDateTime_1a6bba814ffc42155f7ced0830a12106b9">DatasimDateTime</link>(nr_secs&#32;*&#32;-1);&#32;<emphasis role="comment">//&#32;construct&#32;DatasimDateTime</emphasis>
333 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(tmp);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;DatasimDateTime</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a99c7501167024faee62981340da0d116"/>    <section>
    <title>operator--()</title>
<indexterm><primary>operator--</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>operator--</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime::operator-- ( )</computeroutput></para><para>
Definition at line 265 of file DatesimDateTime.cc.</para>
<programlisting>271 {
272 &#32;&#32;&#32;&#32;seconds&#32;=&#32;seconds&#32;+&#32;day_seconds&#32;-&#32;1;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;one&#32;second&#32;earlier</emphasis>
273 &#32;&#32;&#32;&#32;seconds&#32;%=&#32;day_seconds;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;discard&#32;underflow</emphasis>
274 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(*<emphasis role="keyword">this</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;second&#32;earlier</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a44e30c8e8aa02eaeeb9c75c22ebb1fc2"/>    <section>
    <title>operator-=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>operator-=</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime::operator-= (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</computeroutput></para><para>
Definition at line 359 of file DatesimDateTime.cc.</para>
<programlisting>366 {
367 &#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;*<emphasis role="keyword">this</emphasis>&#32;-&#32;DatasimDateTime_2;&#32;&#32;<emphasis role="comment">//&#32;call&#32;operator-,&#32;subtract&#32;time</emphasis>
368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(*<emphasis role="keyword">this</emphasis>);
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a22662f26292fef9f73bc5b081f15dc4f"/>    <section>
    <title>operator-=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>operator-=</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime::operator-= (long secs)</computeroutput></para><para>
Definition at line 371 of file DatesimDateTime.cc.</para>
<programlisting>379 &#32;{
380 &#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;*<emphasis role="keyword">this</emphasis>&#32;-&#32;secos;&#32;&#32;<emphasis role="comment">//&#32;call&#32;operator-,&#32;add&#32;seconds</emphasis>
381 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(*<emphasis role="keyword">this</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;new&#32;this&#32;DatasimDateTime</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a316134f75182feacfaece1efdbe859c6"/>    <section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>operator&lt;</secondary></indexterm>
<para><computeroutput>bool DatasimDateTime::operator&lt; (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</computeroutput></para><para>
Definition at line 217 of file DatesimDateTime.cc.</para>
<programlisting>222 {
223 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(seconds&#32;&lt;&#32;DatasimDateTime_2.seconds)
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(<emphasis role="keyword">true</emphasis>);
225 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(<emphasis role="keyword">false</emphasis>);
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a95692ca557f9da8436e7f9765a1822ba"/>    <section>
    <title>operator&lt;=()</title>
<indexterm><primary>operator&lt;=</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>operator&lt;=</secondary></indexterm>
<para><computeroutput>bool DatasimDateTime::operator&lt;= (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</computeroutput></para><para>
Definition at line 241 of file DatesimDateTime.cc.</para>
<programlisting>246 {
247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(seconds&#32;&lt;=&#32;DatasimDateTime_2.seconds)
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(<emphasis role="keyword">true</emphasis>);
249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(<emphasis role="keyword">false</emphasis>);
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a8d29a8a2e2d585bece6406362f0fcff0"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime::operator= (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</computeroutput></para><para>
Definition at line 384 of file DatesimDateTime.cc.</para>
<programlisting>390 {
391 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;DatasimDateTime_2)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;beware&#32;of&#32;t&#32;=&#32;t;</emphasis>
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seconds&#32;=&#32;DatasimDateTime_2.seconds;
393 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(*<emphasis role="keyword">this</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;multiple&#32;assignment</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a91df760056052bfce214e56b1b308d57"/>    <section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool DatasimDateTime::operator== (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</computeroutput></para><para>
Definition at line 180 of file DatesimDateTime.cc.</para>
<programlisting>186 {
187 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(seconds&#32;==&#32;DatasimDateTime_2.seconds)
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(<emphasis role="keyword">true</emphasis>);
189 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(<emphasis role="keyword">false</emphasis>);
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a9610d34a0ce319bcefb932539b53f783"/>    <section>
    <title>operator&gt;()</title>
<indexterm><primary>operator&gt;</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>operator&gt;</secondary></indexterm>
<para><computeroutput>bool DatasimDateTime::operator&gt; (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</computeroutput></para><para>
Definition at line 206 of file DatesimDateTime.cc.</para>
<programlisting>211 {
212 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(seconds&#32;&gt;&#32;DatasimDateTime_2.seconds)
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(<emphasis role="keyword">true</emphasis>);
214 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(<emphasis role="keyword">false</emphasis>);
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a05733ca22e20b17ee08e45dcf6c2093e"/>    <section>
    <title>operator&gt;=()</title>
<indexterm><primary>operator&gt;=</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>operator&gt;=</secondary></indexterm>
<para><computeroutput>bool DatasimDateTime::operator&gt;= (<link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime_2)</computeroutput></para><para>
Definition at line 229 of file DatesimDateTime.cc.</para>
<programlisting>234 {
235 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(seconds&#32;&gt;=&#32;DatasimDateTime_2.seconds)
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(<emphasis role="keyword">true</emphasis>);
237 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(<emphasis role="keyword">false</emphasis>);
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1ac0773e399f2fd8984fc7fcd322e28dae"/>    <section>
    <title>print()</title>
<indexterm><primary>print</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>print</secondary></indexterm>
<para><computeroutput>void DatasimDateTime::print ( ) const</computeroutput></para><para>
Definition at line 489 of file DatesimDateTime.cc.</para>
<programlisting>491 {
492 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;dtime::delim&#32;=&#32;&apos;:&apos;;</emphasis>
493 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;delim&#32;=&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>;
494 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;hour&#32;=&#32;0,&#32;min&#32;=&#32;0,&#32;sec&#32;=&#32;0;
495 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDateTime_1a9b6a86a41c4994e79fa02369df95589d">secs_to_dtime</link>(hour,&#32;min,&#32;sec);
496 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%02d%c%02d%c%02d&quot;</emphasis>,&#32;hour,&#32;delim,&#32;min,&#32;delim,&#32;sec);
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a03794573344da99abd33b6b16670219d"/>    <section>
    <title>ret_hour()</title>
<indexterm><primary>ret_hour</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>ret_hour</secondary></indexterm>
<para><computeroutput>int DatasimDateTime::ret_hour ( )</computeroutput></para><para>
Definition at line 145 of file DatesimDateTime.cc.</para>
<programlisting>150 {
151 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;h,&#32;m,&#32;s;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;hour,&#32;minute&#32;and&#32;seconds</emphasis>
152 &#32;&#32;&#32;&#32;secs_to_DatasimDateTime(h,&#32;m,&#32;s);&#32;<emphasis role="comment">//&#32;get&#32;hour,minute&#32;and&#32;seconds&#32;of&#32;day</emphasis>
153 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(h);&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;hour&#32;of&#32;day</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a043cd9647f9062d18b652996578afdcf"/>    <section>
    <title>ret_minute()</title>
<indexterm><primary>ret_minute</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>ret_minute</secondary></indexterm>
<para><computeroutput>int DatasimDateTime::ret_minute ( )</computeroutput></para><para>
Definition at line 156 of file DatesimDateTime.cc.</para>
<programlisting>161 {
162 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;h,&#32;m,&#32;s;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;hour,&#32;minute&#32;and&#32;seconds</emphasis>
163 &#32;&#32;&#32;&#32;secs_to_DatasimDateTime(h,&#32;m,&#32;s);&#32;<emphasis role="comment">//&#32;get&#32;hour,minute&#32;and&#32;seconds&#32;of&#32;day</emphasis>
164 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(m);&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;minute</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a1858e2b56f0bafbbf25ba63e15d7f07d"/>    <section>
    <title>ret_second()</title>
<indexterm><primary>ret_second</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>ret_second</secondary></indexterm>
<para><computeroutput>int DatasimDateTime::ret_second ( )</computeroutput></para><para>
Definition at line 167 of file DatesimDateTime.cc.</para>
<programlisting>172 {
173 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;h,&#32;m,&#32;s;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;hour,&#32;minute&#32;and&#32;seconds</emphasis>
174 &#32;&#32;&#32;&#32;secs_to_DatasimDateTime(h,&#32;m,&#32;s);&#32;<emphasis role="comment">//&#32;get&#32;hour,minute&#32;and&#32;seconds&#32;of&#32;day</emphasis>
175 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(s);&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;second</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a9b6a86a41c4994e79fa02369df95589d"/>    <section>
    <title>secs_to_dtime()</title>
<indexterm><primary>secs_to_dtime</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>secs_to_dtime</secondary></indexterm>
<para><computeroutput>void DatasimDateTime::secs_to_dtime (int &amp; h, int &amp; m, int &amp; s, long * over = <computeroutput>0</computeroutput>
) const</computeroutput></para><para>
Definition at line 498 of file DatesimDateTime.cc.</para>
<programlisting>508 {
509 <emphasis role="comment">//printf(&quot;seconds&#32;=&#32;%lu\n&quot;,&#32;seconds);</emphasis>
510 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(over&#32;!=&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parameter&#32;has&#32;been&#32;passed</emphasis>
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*over&#32;=&#32;seconds&#32;/&#32;day_seconds;&#32;&#32;<emphasis role="comment">//&#32;number&#32;of&#32;days&#32;in&#32;seconds</emphasis>
512 <emphasis role="comment">//&#32;&#32;seconds&#32;%=&#32;day_seconds;&#32;&#32;&#32;&#32;&#32;//&#32;rest&#32;seconds</emphasis>
513 <emphasis role="comment">//printf(&quot;seconds&#32;after&#32;days&#32;subtr.&#32;=&#32;%lu\n&quot;,&#32;seconds);</emphasis>
514 &#32;&#32;&#32;&#32;hour&#32;=&#32;seconds&#32;/&#32;3600;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calculate&#32;hours&#32;from&#32;midnight</emphasis>
515 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;h&#32;=&#32;seconds&#32;%&#32;3600;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;rest</emphasis>
516 &#32;&#32;&#32;&#32;minute&#32;=&#32;h&#32;/&#32;60;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calc.&#32;minutes&#32;after&#32;&apos;hour&apos;</emphasis>
517 &#32;&#32;&#32;&#32;<link linkend="_namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6">second</link>&#32;=&#32;h&#32;%&#32;60;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calc&#32;seconds&#32;after&#32;&apos;minute&apos;</emphasis>
518 <emphasis role="comment">//printf(&quot;hour&#32;=&#32;%d\nminute&#32;=&#32;%d\nsecond&#32;=&#32;%d\n&quot;,&#32;hour,&#32;minute,&#32;second);</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a97e61d7bb8be7df31096eaa240865ca0"/>    <section>
    <title>sub_hours()</title>
<indexterm><primary>sub_hours</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>sub_hours</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime::sub_hours (long hours)</computeroutput></para><para>
Definition at line 443 of file DatesimDateTime.cc.</para>
<programlisting>450 {&#32;
451 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDateTime">DatasimDateTime</link>&#32;tmp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;temporary&#32;result</emphasis>
452 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hours&#32;&gt;=&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;subtract&#32;positive&#32;#hours</emphasis>
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;=&#32;<link linkend="_classDatasimDateTime_1a0f537d8771a9ac4c0fec01897703c452">sub_period</link>(0,&#32;0,&#32;hours);&#32;&#32;<emphasis role="comment">//&#32;subtract&#32;#hours</emphasis>
454 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;subtract&#32;negative&#32;#hours</emphasis>
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;=&#32;<link linkend="_classDatasimDateTime_1a9bc493467b0748b34f77439f3f8863d6">add_period</link>(0,&#32;0,&#32;hours&#32;*&#32;-1);&#32;<emphasis role="comment">//&#32;add&#32;#hours</emphasis>
456 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(tmp);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;result</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a60b8878b21a7d117dc7c4a225f7e0d41"/>    <section>
    <title>sub_minutes()</title>
<indexterm><primary>sub_minutes</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>sub_minutes</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime::sub_minutes (long minutes)</computeroutput></para><para>
Definition at line 474 of file DatesimDateTime.cc.</para>
<programlisting>481 {&#32;
482 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDateTime">DatasimDateTime</link>&#32;tmp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;temporary&#32;result</emphasis>
483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minutes&#32;&gt;=&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;subtract&#32;positive&#32;#minutes</emphasis>
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;=&#32;<link linkend="_classDatasimDateTime_1a0f537d8771a9ac4c0fec01897703c452">sub_period</link>(0,&#32;minutes);&#32;<emphasis role="comment">//&#32;subtract&#32;#minutes</emphasis>
485 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;subtract&#32;negative&#32;#minutes</emphasis>
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;=&#32;<link linkend="_classDatasimDateTime_1a9bc493467b0748b34f77439f3f8863d6">add_period</link>(0,&#32;minutes&#32;*&#32;-1);&#32;<emphasis role="comment">//&#32;subtract&#32;#minutes</emphasis>
487 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(tmp);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;result</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDateTime_1a0f537d8771a9ac4c0fec01897703c452"/>    <section>
    <title>sub_period()</title>
<indexterm><primary>sub_period</primary><secondary>DatasimDateTime</secondary></indexterm>
<indexterm><primary>DatasimDateTime</primary><secondary>sub_period</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDateTime">DatasimDateTime</link> DatasimDateTime::sub_period (<link linkend="_DatesimDateTime_8hh_1a3fe0acc26bd6a1dc8b4cb3b1d4bed7fe">secTy</link> secs, <link linkend="_DatesimDateTime_8hh_1a3fe0acc26bd6a1dc8b4cb3b1d4bed7fe">secTy</link> mins = <computeroutput>0</computeroutput>
, <link linkend="_DatesimDateTime_8hh_1a3fe0acc26bd6a1dc8b4cb3b1d4bed7fe">secTy</link> hours = <computeroutput>0</computeroutput>
)</computeroutput></para><para>
Definition at line 413 of file DatesimDateTime.cc.</para>
<programlisting>421 {
422 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDateTime">DatasimDateTime</link>&#32;tmp&#32;=&#32;<link linkend="_classDatasimDateTime_1a6bba814ffc42155f7ced0830a12106b9">DatasimDateTime</link>(&#32;secs(secos,&#32;mins,&#32;hours)&#32;);&#32;<emphasis role="comment">//&#32;construct&#32;DatasimDateTime</emphasis>
423 &#32;&#32;&#32;&#32;tmp&#32;=&#32;*<emphasis role="keyword">this</emphasis>&#32;-&#32;tmp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;subtract&#32;DatasimDateTime</emphasis>
424 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(tmp);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;new&#32;time</emphasis>
</programlisting></section>
<para>
The documentation for this class was generated from the following files:</para>
include/duffy/<link linkend="_DatesimDateTime_8hh">DatesimDateTime.hh</link>src/<link linkend="_DatesimDateTime_8cc">DatesimDateTime.cc</link></section>
</section>
