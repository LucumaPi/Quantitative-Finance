<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classDatasimDate">
<title>DatasimDate Class Reference</title>
<indexterm><primary>DatasimDate</primary></indexterm>
<para>
<computeroutput>#include &lt;DatasimDate.hh&gt;</computeroutput>
</para>
Inheritance diagram for DatasimDate:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classDatasimDate__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for DatasimDate:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classDatasimDate__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classDatasimDate_1a9412931fe7dffe68654eb3727e396984">DatasimDate</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate_1ac12510cb0937e67a3f897015bc1e86eb">DatasimDate</link> (const <link linkend="_classDatasimDate">DatasimDate</link> &amp;d2)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate_1a31fe9c8d8c1fa6be96d597d9b6fdb9d7">DatasimDate</link> (const <link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> &amp;days)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate_1a3525018c886193a16f5f1ce16c9f35ef">DatasimDate</link> (int days)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate_1a2056386fc83d278ecf1ad4393bce5ffd">DatasimDate</link> (int day, int month, int year)</para>
</listitem>
            <listitem><para>int <link linkend="_classDatasimDate_1a08a1a444c86d72c9dbd102b84ce9f538">ret_year</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_classDatasimDate_1a64d9bcbb8e0113497241b0e9498a9d93">ret_month</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_classDatasimDate_1a352a61dc42b5607b2d11c25b0d1bdd23">ret_day</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_classDatasimDate_1a4ae786af9e5d429c3f62ea3bf4b41f57">jul_to_greg</link> (<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> &amp;d, <link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> &amp;m, <link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> &amp;y) const</para>
</listitem>
            <listitem><para>bool <link linkend="_classDatasimDate_1af2124460d6e7514dcdeb6bbc140329fa">operator==</link> (const <link linkend="_classDatasimDate">DatasimDate</link> &amp;DatasimDate_2) const</para>
</listitem>
            <listitem><para>bool <link linkend="_classDatasimDate_1a4f91ccf46ff50ba8e30cda1c0fbdb34c">operator!=</link> (const <link linkend="_classDatasimDate">DatasimDate</link> &amp;DatasimDate_2) const</para>
</listitem>
            <listitem><para>bool <link linkend="_classDatasimDate_1af8137030468be122ad7f219a2ca3a99d">operator&gt;</link> (const <link linkend="_classDatasimDate">DatasimDate</link> &amp;DatasimDate_2) const</para>
</listitem>
            <listitem><para>bool <link linkend="_classDatasimDate_1a10497a3d5e8c03f05d43709cc7315e87">operator&lt;</link> (const <link linkend="_classDatasimDate">DatasimDate</link> &amp;DatasimDate_2) const</para>
</listitem>
            <listitem><para>bool <link linkend="_classDatasimDate_1aae3820e70cadbd75c06fe5e147100013">operator&gt;=</link> (const <link linkend="_classDatasimDate">DatasimDate</link> &amp;DatasimDate_2) const</para>
</listitem>
            <listitem><para>bool <link linkend="_classDatasimDate_1a90aa0b8f7e9a40747f558b9df825e0d9">operator&lt;=</link> (const <link linkend="_classDatasimDate">DatasimDate</link> &amp;DatasimDate_2) const</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> &amp; <link linkend="_classDatasimDate_1a038976e58f3023965fe99d4ea4e4a227">operator=</link> (const <link linkend="_classDatasimDate">DatasimDate</link> &amp;DatasimDate_2)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> <link linkend="_classDatasimDate_1ad8e1e82c6743c375ad39b168f0cad24b">operator+</link> (int days) const</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> <link linkend="_classDatasimDate_1ae8355e2cbc7e838e73273f7a238ecb15">operator-</link> (int days) const</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> <link linkend="_classDatasimDate_1ab236f76c33b857eeafa2cc5a593a462f">operator++</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> <link linkend="_classDatasimDate_1ab03dff5107e481977651bdc7c6a05a7e">operator--</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> <link linkend="_classDatasimDate_1a3599ffe8fec2cf745a80c887fc699808">operator+=</link> (int days)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> <link linkend="_classDatasimDate_1af0ad1dd97d2f54973091793eefecd1a8">operator-=</link> (int days)</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> <link linkend="_classDatasimDate_1a778102034e0996acbd7b5691966b7aab">add_months</link> (long months) const</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> <link linkend="_classDatasimDate_1af205687d9c5f85d69d6c3f68c75050df">add_quarter</link> () const</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> <link linkend="_classDatasimDate_1adefb5ed1054f46821f7f3886445a7386">add_halfyear</link> () const</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> <link linkend="_classDatasimDate_1a4a66bc65f73f0257cad52ae6a86653ab">add_years</link> (long years) const</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> <link linkend="_classDatasimDate_1ae02dad4fd61b760ac4307e1bb63de654">sub_months</link> (long months) const</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> <link linkend="_classDatasimDate_1a970503033187428b64491ddec799c699">sub_quarter</link> () const</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> <link linkend="_classDatasimDate_1a7d2eae7c91ddc861ec6d2655d0bbc9bc">sub_halfyear</link> () const</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> <link linkend="_classDatasimDate_1a3177c3d9596e617853fdea2bfbc345a1">sub_years</link> (long years) const</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> <link linkend="_classDatasimDate_1a9a44080fb927fc824d9cf864e5b0f76a">add_period</link> (const <link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> &amp;days, const <link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> &amp;months=0, const <link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> &amp;years=0) const</para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> <link linkend="_classDatasimDate_1af0c7e266045bee895f1660ad14a4f978">sub_period</link> (<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> days, <link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> months=0, <link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> years=0) const</para>
</listitem>
            <listitem><para>long <link linkend="_classDatasimDate_1ae4357570b57261934c7a88fd323a879e">difference</link> (const <link linkend="_classDatasimDate">DatasimDate</link> &amp;DatasimDate_2) const</para>
</listitem>
            <listitem><para>long <link linkend="_classDatasimDate_1ac2ee018718765c5e4b92ad7dbe67dc2f">operator-</link> (const <link linkend="_classDatasimDate">DatasimDate</link> &amp;d2) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>std::ostream &amp; <link linkend="_classDatasimDate_1ab845047325251d52f8d1548f2c9993a1">operator&lt;&lt;</link> (std::ostream &amp;os, const <link linkend="_classDatasimDate">DatasimDate</link> &amp;dat)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line 20 of file DatasimDate.hh.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classDatasimDate_1a9412931fe7dffe68654eb3727e396984"/>    <section>
    <title>DatasimDate()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>DatasimDate</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>DatasimDate</secondary></indexterm>
<para><computeroutput>DatasimDate::DatasimDate ( )</computeroutput></para><para>
Definition at line 110 of file DatasimDate.cc.</para>
<programlisting>118 {
119 &#32;&#32;&#32;&#32;time_t&#32;local_time;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;type&#32;to&#32;hold&#32;time</emphasis>
120 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>tm&#32;*t_ptr;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;struct&#32;to&#32;contain&#32;time,&#32;DatasimDate&#32;etc</emphasis>
121 
122 &#32;&#32;&#32;&#32;<emphasis role="comment">//DD&#32;2006-8-8&#32;&#32;local_time&#32;=&#32;time((long*)&#32;0);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;get&#32;time&#32;(and&#32;DatasimDate)&#32;from&#32;system</emphasis>
123 &#32;&#32;&#32;&#32;local_time&#32;=&#32;time(0);
124 &#32;&#32;&#32;&#32;t_ptr&#32;=&#32;localtime(&amp;local_time);&#32;<emphasis role="comment">//&#32;convert&#32;to&#32;struct</emphasis>
125 &#32;&#32;&#32;&#32;<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link>&#32;yy_t&#32;=&#32;year_test(t_ptr-&gt;tm_year);&#32;<emphasis role="comment">//&#32;test&#32;year,&#32;month&#32;and&#32;day</emphasis>
126 &#32;&#32;&#32;&#32;<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link>&#32;mm_t&#32;=&#32;mm_test(t_ptr-&gt;tm_mon&#32;+&#32;1);
127 &#32;&#32;&#32;&#32;<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link>&#32;dd_t&#32;=&#32;day_test(t_ptr-&gt;tm_mday,&#32;mm_t,&#32;yy_t);
128 &#32;&#32;&#32;&#32;init(dd_t,&#32;mm_t,&#32;yy_t);&#32;<emphasis role="comment">//&#32;calculate&#32;Julian&#32;days</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDate_1ac12510cb0937e67a3f897015bc1e86eb"/>    <section>
    <title>DatasimDate()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>DatasimDate</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>DatasimDate</secondary></indexterm>
<para><computeroutput>DatasimDate::DatasimDate (const <link linkend="_classDatasimDate">DatasimDate</link> &amp; d2)</computeroutput></para><para>
Definition at line 89 of file DatasimDate.cc.</para>
<programlisting>94 {
95 &#32;&#32;&#32;&#32;Julian_days&#32;=&#32;DatasimDate_2.Julian_days;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;same&#32;DatasimDate</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDate_1a31fe9c8d8c1fa6be96d597d9b6fdb9d7"/>    <section>
    <title>DatasimDate()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>DatasimDate</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>DatasimDate</secondary></indexterm>
<para><computeroutput>DatasimDate::DatasimDate (const <link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> &amp; days)</computeroutput></para><para>
Definition at line 131 of file DatasimDate.cc.</para>
<programlisting>136 {
137 &#32;&#32;&#32;&#32;Julian_days&#32;=&#32;days;
</programlisting>    </section><anchor xml:id="_classDatasimDate_1a3525018c886193a16f5f1ce16c9f35ef"/>    <section>
    <title>DatasimDate()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>DatasimDate</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>DatasimDate</secondary></indexterm>
<para><computeroutput>DatasimDate::DatasimDate (int days)</computeroutput></para><para>
Definition at line 140 of file DatasimDate.cc.</para>
<programlisting>145 {
146 &#32;&#32;&#32;&#32;Julian_days&#32;=&#32;days;
</programlisting>    </section><anchor xml:id="_classDatasimDate_1a2056386fc83d278ecf1ad4393bce5ffd"/>    <section>
    <title>DatasimDate()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>DatasimDate</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>DatasimDate</secondary></indexterm>
<para><computeroutput>DatasimDate::DatasimDate (int day, int month, int year)</computeroutput></para><para>
Definition at line 148 of file DatasimDate.cc.</para>
<programlisting>150 {&#32;<emphasis role="comment">//&#32;Day,&#32;month,&#32;year</emphasis>
151 &#32;&#32;&#32;&#32;Julian_days&#32;=&#32;j_days(day,&#32;month,&#32;year);
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classDatasimDate_1adefb5ed1054f46821f7f3886445a7386"/>    <section>
    <title>add_halfyear()</title>
<indexterm><primary>add_halfyear</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>add_halfyear</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> DatasimDate::add_halfyear ( ) const</computeroutput></para><para>
Definition at line 483 of file DatasimDate.cc.</para>
<programlisting>485 {&#32;<emphasis role="comment">//&#32;Return&#32;this&#32;DatasimDate&#32;+&#32;6&#32;months&#32;ahead</emphasis>
486 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;monthsInhalfYear&#32;=&#32;6;
487 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classDatasimDate_1a778102034e0996acbd7b5691966b7aab">add_months</link>(monthsInhalfYear);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1a778102034e0996acbd7b5691966b7aab"/>    <section>
    <title>add_months()</title>
<indexterm><primary>add_months</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>add_months</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> DatasimDate::add_months (long months) const</computeroutput></para><para>
Definition at line 464 of file DatasimDate.cc.</para>
<programlisting>471 {
472 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(months&#32;&gt;&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;positive&#32;number&#32;of&#32;months&#32;?</emphasis>
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(&#32;this-&gt;<link linkend="_classDatasimDate_1a9a44080fb927fc824d9cf864e5b0f76a">add_period</link>(0,&#32;months,&#32;0)&#32;);&#32;<emphasis role="comment">//&#32;add&#32;months</emphasis>
474 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;negative&#32;number&#32;of&#32;months</emphasis>
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(&#32;this-&gt;<link linkend="_classDatasimDate_1af0c7e266045bee895f1660ad14a4f978">sub_period</link>(0,&#32;months&#32;*&#32;-1,&#32;0)&#32;);&#32;<emphasis role="comment">//&#32;subtract</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDate_1a9a44080fb927fc824d9cf864e5b0f76a"/>    <section>
    <title>add_period()</title>
<indexterm><primary>add_period</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>add_period</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> DatasimDate::add_period (const <link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> &amp; days, const <link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> &amp; months = <computeroutput>0</computeroutput>
, const <link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> &amp; years = <computeroutput>0</computeroutput>
) const</computeroutput></para><para>
Definition at line 408 of file DatasimDate.cc.</para>
<programlisting>419 {
420 &#32;&#32;&#32;&#32;<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link>&#32;nday,&#32;nmonth,&#32;nyear;
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
422 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDate_1a4ae786af9e5d429c3f62ea3bf4b41f57">jul_to_greg</link>(nday,&#32;nmonth,&#32;nyear);&#32;<emphasis role="comment">//&#32;calc&#32;Greg.&#32;cal.&#32;from&#32;This&#32;DatasimDate</emphasis>
423 &#32;&#32;&#32;&#32;nmonth&#32;+=&#32;months;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;months</emphasis>
424 &#32;&#32;&#32;&#32;nyear&#32;+=&#32;((nmonth&#32;-&#32;1)&#32;/&#32;12);&#32;&#32;&#32;<emphasis role="comment">//&#32;how&#32;many&#32;years&#32;from&#32;months&#32;?</emphasis>
425 &#32;&#32;&#32;&#32;nmonth&#32;=&#32;(nmonth&#32;-&#32;1)&#32;%&#32;12&#32;+&#32;1;&#32;<emphasis role="comment">//&#32;remaining&#32;months&#32;(1..12)</emphasis>
426 &#32;&#32;&#32;&#32;nyear&#32;+=&#32;years;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;years</emphasis>
427 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(day_test(nday,&#32;nmonth,&#32;nyear)&#32;==&#32;0)&#32;<emphasis role="comment">//&#32;day&#32;still&#32;valid&#32;in&#32;month?</emphasis>
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nday--;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no,&#32;subtract&#32;one&#32;monthday&#32;&#32;&#32;&#32;</emphasis>
429 &#32;
430 &#32;&#32;&#32;&#32;<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link>&#32;total_days&#32;=&#32;days&#32;+&#32;j_days(nday,&#32;nmonth,&#32;nyear);&#32;<emphasis role="comment">//&#32;total&#32;Julian&#32;days</emphasis>
431 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDate">DatasimDate</link>&#32;d(total_days);&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;construct&#32;new&#32;DatasimDate</emphasis>
432 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(d);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;new&#32;DatasimDate</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDate_1af205687d9c5f85d69d6c3f68c75050df"/>    <section>
    <title>add_quarter()</title>
<indexterm><primary>add_quarter</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>add_quarter</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> DatasimDate::add_quarter ( ) const</computeroutput></para><para>
Definition at line 477 of file DatasimDate.cc.</para>
<programlisting>479 {&#32;<emphasis role="comment">//&#32;Return&#32;this&#32;DatasimDate&#32;+&#32;3&#32;months&#32;ahead</emphasis>
480 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;monthsInQuarter&#32;=&#32;3;
481 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classDatasimDate_1a778102034e0996acbd7b5691966b7aab">add_months</link>(monthsInQuarter);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1a4a66bc65f73f0257cad52ae6a86653ab"/>    <section>
    <title>add_years()</title>
<indexterm><primary>add_years</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>add_years</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> DatasimDate::add_years (long years) const</computeroutput></para><para>
Definition at line 502 of file DatasimDate.cc.</para>
<programlisting>509 {
510 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(years&#32;&gt;&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;positive&#32;number&#32;of&#32;years&#32;?</emphasis>
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(&#32;this-&gt;<link linkend="_classDatasimDate_1a9a44080fb927fc824d9cf864e5b0f76a">add_period</link>(0,&#32;0,&#32;years)&#32;);&#32;<emphasis role="comment">//&#32;add&#32;years</emphasis>
512 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;negative&#32;number&#32;of&#32;years</emphasis>
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(&#32;this-&gt;<link linkend="_classDatasimDate_1af0c7e266045bee895f1660ad14a4f978">sub_period</link>(0,&#32;0,&#32;years&#32;*&#32;-1)&#32;);&#32;<emphasis role="comment">//&#32;subtract</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDate_1ae4357570b57261934c7a88fd323a879e"/>    <section>
    <title>difference()</title>
<indexterm><primary>difference</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>difference</secondary></indexterm>
<para><computeroutput>long DatasimDate::difference (const <link linkend="_classDatasimDate">DatasimDate</link> &amp; DatasimDate_2) const</computeroutput></para><para>
Definition at line 542 of file DatasimDate.cc.</para>
<programlisting>548 {
549 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;dif;
550 
551 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Julian_days&#32;&gt;=&#32;DatasimDate_2.Julian_days)&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;dif&#32;is&#32;positive</emphasis>
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dif&#32;=&#32;Julian_days&#32;-&#32;DatasimDate_2.Julian_days;&#32;&#32;<emphasis role="comment">//&#32;calculate&#32;it</emphasis>
553 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;dif&#32;is&#32;negative</emphasis>
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;first&#32;calc&#32;positive&#32;difference&#32;(type&#32;=&#32;julTy).</emphasis>
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;then&#32;convert&#32;to&#32;long&#32;and&#32;make&#32;it&#32;negative.</emphasis>
556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dif&#32;=&#32;(DatasimDate_2.Julian_days&#32;-&#32;Julian_days)&#32;*&#32;-1;
557 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(dif);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;signed&#32;difference</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDate_1a4ae786af9e5d429c3f62ea3bf4b41f57"/>    <section>
    <title>jul_to_greg()</title>
<indexterm><primary>jul_to_greg</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>jul_to_greg</secondary></indexterm>
<para><computeroutput>void DatasimDate::jul_to_greg (<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> &amp; d, <link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> &amp; m, <link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> &amp; y) const</computeroutput></para><para>
Definition at line 182 of file DatasimDate.cc.</para>
<programlisting>192 {
193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Julian_days&#32;==&#32;0)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;January&#32;1,&#32;1900</emphasis>
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;day&#32;=&#32;1;&#32;month&#32;=&#32;1;&#32;year&#32;=&#32;1900;
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
196 &#32;&#32;&#32;&#32;}
197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;the&#32;algorithm.</emphasis>
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link>&#32;j&#32;=&#32;Julian_days&#32;-&#32;1721119l;
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;year&#32;=&#32;(<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link>)(((j&#32;&lt;&lt;&#32;2)&#32;-&#32;1)&#32;/&#32;146097l);
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j&#32;=&#32;(j&#32;&lt;&lt;&#32;2)&#32;-&#32;1&#32;-&#32;146097l&#32;*&#32;year;
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;day&#32;=&#32;(<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link>)(j&#32;&gt;&gt;&#32;2);
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j&#32;=&#32;((day&#32;&lt;&lt;&#32;2)&#32;+&#32;3)&#32;/&#32;1461;
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;day&#32;=&#32;(<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link>)((day&#32;&lt;&lt;&#32;2)&#32;+&#32;3&#32;-&#32;1461&#32;*&#32;j);
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;day&#32;=&#32;(day&#32;+&#32;4)&#32;&gt;&gt;&#32;2;
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;month&#32;=&#32;(5&#32;*&#32;day&#32;-&#32;3)&#32;/&#32;153;
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;day&#32;=&#32;5&#32;*&#32;day&#32;-&#32;3&#32;-&#32;153&#32;*&#32;month;
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;day&#32;=&#32;(day&#32;+&#32;5)&#32;/&#32;5;
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;year&#32;=&#32;(<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link>)(100&#32;*&#32;year&#32;+&#32;j);
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(month&#32;&lt;&#32;10)
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;month&#32;+=&#32;3;
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;month&#32;-=9;
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;year++;
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
215 &#32;&#32;&#32;&#32;}
</programlisting>    </section><anchor xml:id="_classDatasimDate_1a4f91ccf46ff50ba8e30cda1c0fbdb34c"/>    <section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool DatasimDate::operator!= (const <link linkend="_classDatasimDate">DatasimDate</link> &amp; DatasimDate_2) const</computeroutput></para><para>
Definition at line 256 of file DatasimDate.cc.</para>
<programlisting>262 {
263 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(Julian_days&#32;!=&#32;DatasimDate_2.Julian_days&#32;?&#32;<emphasis role="keyword">true</emphasis>&#32;:&#32;<emphasis role="keyword">false</emphasis>);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1ad8e1e82c6743c375ad39b168f0cad24b"/>    <section>
    <title>operator+()</title>
<indexterm><primary>operator+</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> DatasimDate::operator+ (int days) const</computeroutput></para><para>
Definition at line 388 of file DatasimDate.cc.</para>
<programlisting>393 {
394 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDate">DatasimDate</link>&#32;d(Julian_days);
395 &#32;&#32;&#32;&#32;d.Julian_days&#32;+=&#32;nr_days;
396 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(d);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1ab236f76c33b857eeafa2cc5a593a462f"/>    <section>
    <title>operator++()</title>
<indexterm><primary>operator++</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>operator++</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> DatasimDate::operator++ ( )</computeroutput></para><para>
Definition at line 333 of file DatasimDate.cc.</para>
<programlisting>338 {
339 &#32;&#32;&#32;&#32;Julian_days++;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;one&#32;day&#32;later</emphasis>
340 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(*<emphasis role="keyword">this</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;day&#32;later</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDate_1a3599ffe8fec2cf745a80c887fc699808"/>    <section>
    <title>operator+=()</title>
<indexterm><primary>operator+=</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> DatasimDate::operator+= (int days)</computeroutput></para><para>
Definition at line 306 of file DatasimDate.cc.</para>
<programlisting>311 {
312 &#32;&#32;&#32;&#32;Julian_days&#32;+=&#32;nr_days;
313 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(*<emphasis role="keyword">this</emphasis>);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1ac2ee018718765c5e4b92ad7dbe67dc2f"/>    <section>
    <title>operator-()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput>long DatasimDate::operator- (const <link linkend="_classDatasimDate">DatasimDate</link> &amp; d2) const</computeroutput></para><para>
Definition at line 559 of file DatasimDate.cc.</para>
<programlisting>561 {
562 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classDatasimDate_1ae4357570b57261934c7a88fd323a879e">difference</link>(d);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1ae8355e2cbc7e838e73273f7a238ecb15"/>    <section>
    <title>operator-()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> DatasimDate::operator- (int days) const</computeroutput></para><para>
Definition at line 368 of file DatasimDate.cc.</para>
<programlisting>373 {
374 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDate">DatasimDate</link>&#32;d(Julian_days);
375 &#32;&#32;&#32;&#32;d.Julian_days&#32;-=&#32;nr_days;
376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(d);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1ab03dff5107e481977651bdc7c6a05a7e"/>    <section>
    <title>operator--()</title>
<indexterm><primary>operator--</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>operator--</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> DatasimDate::operator-- ( )</computeroutput></para><para>
Definition at line 342 of file DatasimDate.cc.</para>
<programlisting>347 {
348 &#32;&#32;&#32;&#32;Julian_days--;
349 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(*<emphasis role="keyword">this</emphasis>);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1af0ad1dd97d2f54973091793eefecd1a8"/>    <section>
    <title>operator-=()</title>
<indexterm><primary>operator-=</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>operator-=</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> DatasimDate::operator-= (int days)</computeroutput></para><para>
Definition at line 324 of file DatasimDate.cc.</para>
<programlisting>329 {
330 &#32;&#32;&#32;&#32;Julian_days&#32;-=&#32;nr_days;
331 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(*<emphasis role="keyword">this</emphasis>);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1a10497a3d5e8c03f05d43709cc7315e87"/>    <section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>operator&lt;</secondary></indexterm>
<para><computeroutput>bool DatasimDate::operator&lt; (const <link linkend="_classDatasimDate">DatasimDate</link> &amp; DatasimDate_2) const</computeroutput></para><para>
Definition at line 273 of file DatasimDate.cc.</para>
<programlisting>278 {
279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(Julian_days&#32;&lt;&#32;DatasimDate_2.Julian_days&#32;?&#32;<emphasis role="keyword">true</emphasis>&#32;:&#32;<emphasis role="keyword">false</emphasis>);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1a90aa0b8f7e9a40747f558b9df825e0d9"/>    <section>
    <title>operator&lt;=()</title>
<indexterm><primary>operator&lt;=</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>operator&lt;=</secondary></indexterm>
<para><computeroutput>bool DatasimDate::operator&lt;= (const <link linkend="_classDatasimDate">DatasimDate</link> &amp; DatasimDate_2) const</computeroutput></para><para>
Definition at line 289 of file DatasimDate.cc.</para>
<programlisting>294 {
295 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(Julian_days&#32;&lt;=&#32;DatasimDate_2.Julian_days&#32;?&#32;<emphasis role="keyword">true</emphasis>&#32;:&#32;<emphasis role="keyword">false</emphasis>);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1a038976e58f3023965fe99d4ea4e4a227"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> &amp; DatasimDate::operator= (const <link linkend="_classDatasimDate">DatasimDate</link> &amp; DatasimDate_2)</computeroutput></para><para>
Definition at line 97 of file DatasimDate.cc.</para>
<programlisting>104 {
105 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;DatasimDate_2)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;beware&#32;of&#32;d&#32;=&#32;d;</emphasis>
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Julian_days&#32;=&#32;DatasimDate_2.Julian_days;
107 
108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;multiple&#32;assignment</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDate_1af2124460d6e7514dcdeb6bbc140329fa"/>    <section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool DatasimDate::operator== (const <link linkend="_classDatasimDate">DatasimDate</link> &amp; DatasimDate_2) const</computeroutput></para><para>
Definition at line 247 of file DatasimDate.cc.</para>
<programlisting>253 {
254 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(Julian_days&#32;==&#32;DatasimDate_2.Julian_days&#32;?&#32;<emphasis role="keyword">true</emphasis>&#32;:&#32;<emphasis role="keyword">false</emphasis>);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1af8137030468be122ad7f219a2ca3a99d"/>    <section>
    <title>operator&gt;()</title>
<indexterm><primary>operator&gt;</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>operator&gt;</secondary></indexterm>
<para><computeroutput>bool DatasimDate::operator&gt; (const <link linkend="_classDatasimDate">DatasimDate</link> &amp; DatasimDate_2) const</computeroutput></para><para>
Definition at line 265 of file DatasimDate.cc.</para>
<programlisting>270 {
271 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(Julian_days&#32;&gt;&#32;DatasimDate_2.Julian_days&#32;?&#32;<emphasis role="keyword">true</emphasis>&#32;:&#32;<emphasis role="keyword">false</emphasis>);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1aae3820e70cadbd75c06fe5e147100013"/>    <section>
    <title>operator&gt;=()</title>
<indexterm><primary>operator&gt;=</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>operator&gt;=</secondary></indexterm>
<para><computeroutput>bool DatasimDate::operator&gt;= (const <link linkend="_classDatasimDate">DatasimDate</link> &amp; DatasimDate_2) const</computeroutput></para><para>
Definition at line 281 of file DatasimDate.cc.</para>
<programlisting>286 {
287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(Julian_days&#32;&gt;=&#32;DatasimDate_2.Julian_days&#32;?&#32;<emphasis role="keyword">true</emphasis>&#32;:&#32;<emphasis role="keyword">false</emphasis>);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1a352a61dc42b5607b2d11c25b0d1bdd23"/>    <section>
    <title>ret_day()</title>
<indexterm><primary>ret_day</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>ret_day</secondary></indexterm>
<para><computeroutput>int DatasimDate::ret_day ( ) const</computeroutput></para><para>
Definition at line 237 of file DatasimDate.cc.</para>
<programlisting>242 {
243 &#32;&#32;&#32;&#32;<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link>&#32;d=0,&#32;m=0,&#32;y=0;
244 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDate_1a4ae786af9e5d429c3f62ea3bf4b41f57">jul_to_greg</link>(d,&#32;m,&#32;y);
245 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(d);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1a64d9bcbb8e0113497241b0e9498a9d93"/>    <section>
    <title>ret_month()</title>
<indexterm><primary>ret_month</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>ret_month</secondary></indexterm>
<para><computeroutput>int DatasimDate::ret_month ( ) const</computeroutput></para><para>
Definition at line 227 of file DatasimDate.cc.</para>
<programlisting>232 {
233 &#32;&#32;&#32;&#32;<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link>&#32;d=0,&#32;m=0,&#32;y=0;
234 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDate_1a4ae786af9e5d429c3f62ea3bf4b41f57">jul_to_greg</link>(d,&#32;m,&#32;y);
235 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(m);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1a08a1a444c86d72c9dbd102b84ce9f538"/>    <section>
    <title>ret_year()</title>
<indexterm><primary>ret_year</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>ret_year</secondary></indexterm>
<para><computeroutput>int DatasimDate::ret_year ( ) const</computeroutput></para><para>
Definition at line 217 of file DatasimDate.cc.</para>
<programlisting>222 {
223 &#32;&#32;&#32;&#32;<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link>&#32;d=0,&#32;m=0,&#32;y=0;
224 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDate_1a4ae786af9e5d429c3f62ea3bf4b41f57">jul_to_greg</link>(d,&#32;m,&#32;y);
225 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(y);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1a7d2eae7c91ddc861ec6d2655d0bbc9bc"/>    <section>
    <title>sub_halfyear()</title>
<indexterm><primary>sub_halfyear</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>sub_halfyear</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> DatasimDate::sub_halfyear ( ) const</computeroutput></para><para>
Definition at line 495 of file DatasimDate.cc.</para>
<programlisting>497 {&#32;<emphasis role="comment">//&#32;Return&#32;this&#32;DatasimDate&#32;-&#32;6&#32;months&#32;ahead</emphasis>
498 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;monthsInhalfYear&#32;=&#32;6;
499 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classDatasimDate_1ae02dad4fd61b760ac4307e1bb63de654">sub_months</link>(monthsInhalfYear);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1ae02dad4fd61b760ac4307e1bb63de654"/>    <section>
    <title>sub_months()</title>
<indexterm><primary>sub_months</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>sub_months</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> DatasimDate::sub_months (long months) const</computeroutput></para><para>
Definition at line 516 of file DatasimDate.cc.</para>
<programlisting>523 {
524 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(months&#32;&gt;&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;positive&#32;number&#32;of&#32;months&#32;?</emphasis>
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(&#32;this-&gt;<link linkend="_classDatasimDate_1af0c7e266045bee895f1660ad14a4f978">sub_period</link>(0,&#32;months,&#32;0)&#32;);&#32;<emphasis role="comment">//&#32;subtract&#32;months</emphasis>
526 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;negative&#32;number&#32;of&#32;months</emphasis>
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(&#32;this-&gt;<link linkend="_classDatasimDate_1a9a44080fb927fc824d9cf864e5b0f76a">add_period</link>(0,&#32;months&#32;*&#32;-1,&#32;0)&#32;);&#32;<emphasis role="comment">//&#32;add</emphasis>
</programlisting>    </section><anchor xml:id="_classDatasimDate_1af0c7e266045bee895f1660ad14a4f978"/>    <section>
    <title>sub_period()</title>
<indexterm><primary>sub_period</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>sub_period</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> DatasimDate::sub_period (<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> days, <link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> months = <computeroutput>0</computeroutput>
, <link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link> years = <computeroutput>0</computeroutput>
) const</computeroutput></para><para>
Definition at line 434 of file DatasimDate.cc.</para>
<programlisting>445 {
446 &#32;&#32;&#32;&#32;<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link>&#32;nday,&#32;nmonth,&#32;nyear;
447 
448 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDate_1a4ae786af9e5d429c3f62ea3bf4b41f57">jul_to_greg</link>(nday,&#32;nmonth,&#32;nyear);&#32;<emphasis role="comment">//&#32;calc&#32;Greg&#32;cal.&#32;from&#32;this&#32;DatasimDate</emphasis>
449 &#32;&#32;&#32;&#32;nyear&#32;-=&#32;(months&#32;/&#32;12);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;how&#32;many&#32;years&#32;in&#32;months&#32;?</emphasis>
450 &#32;&#32;&#32;&#32;months&#32;%=&#32;12;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;remaining&#32;months;</emphasis>
451 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(months&#32;&gt;=&#32;nmonth)&#32;{&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;more&#32;than&#32;months&#32;in&#32;this&#32;DatasimDate</emphasis>
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nyear--;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;one&#32;year&#32;earlier</emphasis>
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nmonth&#32;=&#32;12&#32;+&#32;nmonth&#32;-&#32;months;&#32;&#32;<emphasis role="comment">//&#32;remaining&#32;months</emphasis>
454 &#32;&#32;&#32;&#32;}
455 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;nmonth&#32;-=&#32;months;
456 &#32;&#32;&#32;&#32;nyear&#32;-=&#32;years;
457 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(day_test(nday,&#32;nmonth,&#32;nyear)&#32;==&#32;0)&#32;<emphasis role="comment">//&#32;day&#32;still&#32;valid&#32;in&#32;month?</emphasis>
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nday--;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no,&#32;subtract&#32;one&#32;monthday&#32;&#32;&#32;&#32;</emphasis>
459 &#32;
460 &#32;&#32;&#32;&#32;<link linkend="_DatasimDate_8hh_1aa9a232826470cac21be923b0358e7a50">julTy</link>&#32;total_days&#32;=&#32;j_days(nday,&#32;nmonth,&#32;nyear)&#32;-&#32;days;
461 &#32;&#32;&#32;&#32;<link linkend="_classDatasimDate">DatasimDate</link>&#32;d(total_days);
462 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(d);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1a970503033187428b64491ddec799c699"/>    <section>
    <title>sub_quarter()</title>
<indexterm><primary>sub_quarter</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>sub_quarter</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> DatasimDate::sub_quarter ( ) const</computeroutput></para><para>
Definition at line 489 of file DatasimDate.cc.</para>
<programlisting>491 {&#32;<emphasis role="comment">//&#32;Return&#32;this&#32;DatasimDate&#32;-&#32;3&#32;months&#32;ahead</emphasis>
492 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;monthsInQuarter&#32;=&#32;3;
493 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classDatasimDate_1ae02dad4fd61b760ac4307e1bb63de654">sub_months</link>(monthsInQuarter);
</programlisting>    </section><anchor xml:id="_classDatasimDate_1a3177c3d9596e617853fdea2bfbc345a1"/>    <section>
    <title>sub_years()</title>
<indexterm><primary>sub_years</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>sub_years</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> DatasimDate::sub_years (long years) const</computeroutput></para><para>
Definition at line 529 of file DatasimDate.cc.</para>
<programlisting>536 {
537 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(years&#32;&gt;&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;positive&#32;number&#32;of&#32;years&#32;?</emphasis>
538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(&#32;this-&gt;<link linkend="_classDatasimDate_1af0c7e266045bee895f1660ad14a4f978">sub_period</link>(0,&#32;0,&#32;years)&#32;);&#32;<emphasis role="comment">//&#32;subtract&#32;years</emphasis>
539 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;negative&#32;number&#32;of&#32;years</emphasis>
540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(&#32;this-&gt;<link linkend="_classDatasimDate_1a9a44080fb927fc824d9cf864e5b0f76a">add_period</link>(0,&#32;0,&#32;years&#32;*&#32;-1)&#32;);&#32;<emphasis role="comment">//&#32;add</emphasis>
</programlisting></section>
</section>
<section>
<title>Friends And Related Function Documentation</title>
<anchor xml:id="_classDatasimDate_1ab845047325251d52f8d1548f2c9993a1"/>    <section>
    <title>operator&lt;&lt;</title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>DatasimDate</secondary></indexterm>
<indexterm><primary>DatasimDate</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream&amp; operator&lt;&lt; (std::ostream &amp; os, const <link linkend="_classDatasimDate">DatasimDate</link> &amp; dat)<computeroutput>[friend]</computeroutput></computeroutput></para><para>
Definition at line 564 of file DatasimDate.cc.</para>
<programlisting>566 {
567 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;dat.<link linkend="_classDatasimDate_1a352a61dc42b5607b2d11c25b0d1bdd23">ret_day</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;/&quot;</emphasis>&#32;&lt;&lt;&#32;dat.<link linkend="_classDatasimDate_1a64d9bcbb8e0113497241b0e9498a9d93">ret_month</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;/&quot;</emphasis>&#32;&lt;&lt;&#32;dat.<link linkend="_classDatasimDate_1a08a1a444c86d72c9dbd102b84ce9f538">ret_year</link>();
568 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
</programlisting></section>
<para>
The documentation for this class was generated from the following files:</para>
include/duffy/<link linkend="_DatasimDate_8hh">DatasimDate.hh</link>src/<link linkend="_DatasimDate_8cc">DatasimDate.cc</link></section>
</section>
