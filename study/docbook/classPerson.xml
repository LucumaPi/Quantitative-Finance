<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classPerson">
<title>Person Class Reference</title>
<indexterm><primary>Person</primary></indexterm>
<para>
<computeroutput>#include &lt;Person.hh&gt;</computeroutput>
</para>
Inheritance diagram for Person:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classPerson__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for Person:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classPerson__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classPerson_1a27cebd22009c2f3d495523832d4489bc">Person</link> (const std::string &amp;name, const <link linkend="_classDatasimDate">DatasimDate</link> &amp;DateofBirth)</para>
</listitem>
            <listitem><para>void <link linkend="_classPerson_1aaf046d78d4c4dff5130fc25727932345">print</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_classPerson_1aebd438308d431c5a20070a64288932d8">age</link> () const</para>
</listitem>
            <listitem><para><link linkend="_classPerson_1a27cebd22009c2f3d495523832d4489bc">Person</link> (const std::string &amp;name, const <link linkend="_classDatasimDate">DatasimDate</link> &amp;DateofBirth)</para>
</listitem>
            <listitem><para>void <link linkend="_classPerson_1aaf046d78d4c4dff5130fc25727932345">print</link> () const</para>
</listitem>
            <listitem><para>virtual void <link linkend="_classPerson_1a9415b8b11b532c063f00737430a7694f">DeepPrint</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_classPerson_1aebd438308d431c5a20070a64288932d8">age</link> () const</para>
</listitem>
            <listitem><para><link linkend="_classPerson_1a27cebd22009c2f3d495523832d4489bc">Person</link> (const std::string &amp;name, const <link linkend="_classDatasimDate">DatasimDate</link> &amp;DateofBirth)</para>
</listitem>
            <listitem><para>void <link linkend="_classPerson_1aaf046d78d4c4dff5130fc25727932345">print</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>std::string <link linkend="_classPerson_1ae6ee626f8471b70bef418998ab35623e">nam</link></para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> <link linkend="_classPerson_1abc4a5fbe6e5412b54fcbdf6446b4a29e">dob</link></para>
</listitem>
            <listitem><para><link linkend="_classDatasimDate">DatasimDate</link> <link linkend="_classPerson_1aa4dfae60adf8adfe9e0da019e0993f04">createdD</link></para>
</listitem>
            <listitem><para><link linkend="_classDatasimDateTime">DatasimDateTime</link> <link linkend="_classPerson_1ac5039520556656682bd4e49b8069e4a4">createdT</link></para>
</listitem>
            <listitem><para><link linkend="_classWrapper">Wrapper</link>&lt; std::string &gt; <link linkend="_classPerson_1ac6d7e0d7d60ff303b4dfde117c4356ea">nam</link></para>
</listitem>
            <listitem><para><link linkend="_classWrapper">Wrapper</link>&lt; <link linkend="_classDatasimDate">DatasimDate</link> &gt; <link linkend="_classPerson_1a1bf771e74a8e1e3443394ef580e02de4">dob</link></para>
</listitem>
            <listitem><para><link linkend="_classWrapper">Wrapper</link>&lt; <link linkend="_classDatasimDate">DatasimDate</link> &gt; <link linkend="_classPerson_1a3c2f35bd4d69abc7ad29489ae58545e9">createdD</link></para>
</listitem>
            <listitem><para><link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; std::string, <link linkend="_classAnyType">AnyType</link> * &gt; <link linkend="_classPerson_1a05d516e45631e8e7653e456d70b9d404">props</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line 14 of file Person.hh.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classPerson_1a27cebd22009c2f3d495523832d4489bc"/>    <section>
    <title>Person()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>Person</primary><secondary>Person</secondary></indexterm>
<indexterm><primary>Person</primary><secondary>Person</secondary></indexterm>
<para><computeroutput>Person::Person (const std::string &amp; name, const <link linkend="_classDatasimDate">DatasimDate</link> &amp; DateofBirth)</computeroutput></para><para>
Definition at line 14 of file Person.cc.</para>
<programlisting>15 {
16 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classPerson_1ae6ee626f8471b70bef418998ab35623e">nam</link>&#32;=&#32;name;
17 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classPerson_1abc4a5fbe6e5412b54fcbdf6446b4a29e">dob</link>&#32;=&#32;DateofBirth;
18 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classPerson_1aa4dfae60adf8adfe9e0da019e0993f04">createdD</link>&#32;=&#32;<link linkend="_classDatasimDate">DatasimDate</link>();&#32;&#32;&#32;<emphasis role="comment">//&#32;default,&#32;today&#32;REALLY!</emphasis>
19 
20 }
</programlisting>    </section><anchor xml:id="_classPerson_1a27cebd22009c2f3d495523832d4489bc"/>    <section>
    <title>Person()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>Person</primary><secondary>Person</secondary></indexterm>
<indexterm><primary>Person</primary><secondary>Person</secondary></indexterm>
<para><computeroutput>Person::Person (const std::string &amp; name, const <link linkend="_classDatasimDate">DatasimDate</link> &amp; DateofBirth)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 26 of file PersonAndEmployee.hh.</para>
<programlisting>27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classPerson_1ae6ee626f8471b70bef418998ab35623e">nam</link>&#32;=&#32;name;
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classPerson_1abc4a5fbe6e5412b54fcbdf6446b4a29e">dob</link>&#32;=&#32;DateofBirth;
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classPerson_1aa4dfae60adf8adfe9e0da019e0993f04">createdD</link>&#32;=&#32;<link linkend="_classDatasimDate">DatasimDate</link>();&#32;&#32;&#32;<emphasis role="comment">//&#32;default,&#32;today&#32;REALLY!</emphasis>
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classPerson_1ac5039520556656682bd4e49b8069e4a4">createdT</link>&#32;=&#32;<link linkend="_classDatasimDateTime">DatasimDateTime</link>();&#32;&#32;&#32;<emphasis role="comment">//&#32;default,&#32;now&#32;REALLY!</emphasis>
32 
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting>    </section><anchor xml:id="_classPerson_1a27cebd22009c2f3d495523832d4489bc"/>    <section>
    <title>Person()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>Person</primary><secondary>Person</secondary></indexterm>
<indexterm><primary>Person</primary><secondary>Person</secondary></indexterm>
<para><computeroutput>Person::Person (const std::string &amp; name, const <link linkend="_classDatasimDate">DatasimDate</link> &amp; DateofBirth)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 28 of file TestWrapper.cc.</para>
<programlisting>29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classPerson_1ae6ee626f8471b70bef418998ab35623e">nam</link>&#32;=&#32;name;
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classPerson_1abc4a5fbe6e5412b54fcbdf6446b4a29e">dob</link>&#32;=&#32;DateofBirth;
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classPerson_1aa4dfae60adf8adfe9e0da019e0993f04">createdD</link>&#32;=&#32;<link linkend="_classDatasimDate">DatasimDate</link>();&#32;&#32;&#32;<emphasis role="comment">//&#32;default,&#32;today&#32;REALLY!</emphasis>
33 
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;add&#32;this&#32;stuff&#32;into&#32;the&#32;property&#32;set</emphasis>
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classPerson_1a05d516e45631e8e7653e456d70b9d404">props</link>&#32;=&#32;<link linkend="_classSimplePropertySet">SimplePropertySet&lt;std::string, AnyType*&gt;</link>();
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classPerson_1a05d516e45631e8e7653e456d70b9d404">props</link>.<link linkend="_classSimplePropertySet_1a8663619c5669177f23286672ad49ceca">add</link>(std::string(<emphasis role="stringliteral">&quot;Name&quot;</emphasis>),&#32;&amp;<link linkend="_classPerson_1ae6ee626f8471b70bef418998ab35623e">nam</link>);
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classPerson_1a05d516e45631e8e7653e456d70b9d404">props</link>.<link linkend="_classSimplePropertySet_1a8663619c5669177f23286672ad49ceca">add</link>(std::string(<emphasis role="stringliteral">&quot;DOB&quot;</emphasis>),&#32;&amp;<link linkend="_classPerson_1abc4a5fbe6e5412b54fcbdf6446b4a29e">dob</link>);
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classPerson_1a05d516e45631e8e7653e456d70b9d404">props</link>.<link linkend="_classSimplePropertySet_1a8663619c5669177f23286672ad49ceca">add</link>(std::string(<emphasis role="stringliteral">&quot;CreatedDate&quot;</emphasis>),&#32;&amp;<link linkend="_classPerson_1aa4dfae60adf8adfe9e0da019e0993f04">createdD</link>);
39 
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classPerson_1aebd438308d431c5a20070a64288932d8"/>    <section>
    <title>age()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>age</primary><secondary>Person</secondary></indexterm>
<indexterm><primary>Person</primary><secondary>age</secondary></indexterm>
<para><computeroutput>int Person::age ( ) const</computeroutput></para><para>
Definition at line 32 of file Person.cc.</para>
<programlisting>33 {
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;int(&#32;<emphasis role="keywordtype">double</emphasis>(<link linkend="_classDatasimDate">DatasimDate</link>()&#32;-&#32;<link linkend="_classPerson_1abc4a5fbe6e5412b54fcbdf6446b4a29e">dob</link>)&#32;/&#32;365.0);
35 }
</programlisting>    </section><anchor xml:id="_classPerson_1aebd438308d431c5a20070a64288932d8"/>    <section>
    <title>age()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>age</primary><secondary>Person</secondary></indexterm>
<indexterm><primary>Person</primary><secondary>age</secondary></indexterm>
<para><computeroutput>int Person::age ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 51 of file PersonAndEmployee.hh.</para>
<programlisting>52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;int(&#32;<emphasis role="keywordtype">double</emphasis>(<link linkend="_classDatasimDate">DatasimDate</link>()&#32;-&#32;<link linkend="_classPerson_1abc4a5fbe6e5412b54fcbdf6446b4a29e">dob</link>)&#32;/&#32;365.0);
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting>    </section><anchor xml:id="_classPerson_1a9415b8b11b532c063f00737430a7694f"/>    <section>
    <title>DeepPrint()</title>
<indexterm><primary>DeepPrint</primary><secondary>Person</secondary></indexterm>
<indexterm><primary>Person</primary><secondary>DeepPrint</secondary></indexterm>
<para><computeroutput>virtual void Person::DeepPrint ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Reimplemented in <link linkend="_classEmployee_1a36e7052e1f34d639a6bc84693b78889a">Employee</link>.</para>
<para>
Definition at line 46 of file PersonAndEmployee.hh.</para>
<programlisting>47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classPerson_1aaf046d78d4c4dff5130fc25727932345">print</link>();&#32;<emphasis role="comment">//&#32;Calls&#32;Person::print()</emphasis>
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting>    </section><anchor xml:id="_classPerson_1aaf046d78d4c4dff5130fc25727932345"/>    <section>
    <title>print()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>print</primary><secondary>Person</secondary></indexterm>
<indexterm><primary>Person</primary><secondary>print</secondary></indexterm>
<para><computeroutput>void Person::print ( ) const</computeroutput></para><para>
Definition at line 22 of file Person.cc.</para>
<programlisting>23 {&#32;<emphasis role="comment">//&#32;Who&#32;am&#32;I?</emphasis>
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n**&#32;Person&#32;Data&#32;**\n&quot;</emphasis>;
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Name:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classPerson_1ae6ee626f8471b70bef418998ab35623e">nam</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;Date&#32;of&#32;birth:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classPerson_1abc4a5fbe6e5412b54fcbdf6446b4a29e">dob</link>&#32;
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;Age:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classPerson_1aebd438308d431c5a20070a64288932d8">age</link>()&#32;&lt;&lt;&#32;std::endl;
29 
30 }
</programlisting>    </section><anchor xml:id="_classPerson_1aaf046d78d4c4dff5130fc25727932345"/>    <section>
    <title>print()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>print</primary><secondary>Person</secondary></indexterm>
<indexterm><primary>Person</primary><secondary>print</secondary></indexterm>
<para><computeroutput>void Person::print ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 35 of file PersonAndEmployee.hh.</para>
<programlisting>36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Who&#32;am&#32;I?</emphasis>
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n**&#32;Person&#32;Data&#32;**\n&quot;</emphasis>;
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Name:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classPerson_1ae6ee626f8471b70bef418998ab35623e">nam</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;Date&#32;of&#32;birth:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classPerson_1abc4a5fbe6e5412b54fcbdf6446b4a29e">dob</link>
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;Age:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classPerson_1aebd438308d431c5a20070a64288932d8">age</link>()&#32;&lt;&lt;&#32;std::endl;
42 
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Object&#32;created:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classPerson_1aa4dfae60adf8adfe9e0da019e0993f04">createdD</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;&#32;<link linkend="_classPerson_1ac5039520556656682bd4e49b8069e4a4">createdT</link>.<link linkend="_classDatasimDateTime_1ac0773e399f2fd8984fc7fcd322e28dae">print</link>();&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting>    </section><anchor xml:id="_classPerson_1aaf046d78d4c4dff5130fc25727932345"/>    <section>
    <title>print()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>print</primary><secondary>Person</secondary></indexterm>
<indexterm><primary>Person</primary><secondary>print</secondary></indexterm>
<para><computeroutput>void Person::print ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 42 of file TestWrapper.cc.</para>
<programlisting>43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Who&#32;am&#32;I?</emphasis>
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n**&#32;Person&#32;Data&#32;**\n&quot;</emphasis>;
45 
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classSimplePropertySet">SimplePropertySet&lt;std::string, AnyType*&gt;::const_iterator</link>&#32;it;
47 
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(it&#32;=&#32;<link linkend="_classPerson_1a05d516e45631e8e7653e456d70b9d404">props</link>.<link linkend="_classSimplePropertySet_1af0c72b2e6a39f6d2d02ce443afa01de5">Begin</link>();&#32;it&#32;!=&#32;<link linkend="_classPerson_1a05d516e45631e8e7653e456d70b9d404">props</link>.<link linkend="_classSimplePropertySet_1a6d3c8a051b7c6846508898c8375a2cfd">End</link>();&#32;it++)
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
50 
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Key&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;it&#32;-&gt;first&#32;&lt;&lt;&#32;std::endl;
52 
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;value&#32;printed&#32;because&#32;we&#32;lack&#32;polymorphism&#32;in&#32;</emphasis>
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;general</emphasis>
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classPerson_1aa4dfae60adf8adfe9e0da019e0993f04"/>    <section>
    <title>createdD<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>createdD</primary><secondary>Person</secondary></indexterm>
<indexterm><primary>Person</primary><secondary>createdD</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> Person::createdD</computeroutput></para><para>
Definition at line 22 of file Person.hh.</para>
    </section><anchor xml:id="_classPerson_1a3c2f35bd4d69abc7ad29489ae58545e9"/>    <section>
    <title>createdD<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>createdD</primary><secondary>Person</secondary></indexterm>
<indexterm><primary>Person</primary><secondary>createdD</secondary></indexterm>
<para><computeroutput><link linkend="_classWrapper">Wrapper</link>&lt;<link linkend="_classDatasimDate">DatasimDate</link>&gt; Person::createdD</computeroutput></para><para>
Definition at line 23 of file TestWrapper.cc.</para>
    </section><anchor xml:id="_classPerson_1ac5039520556656682bd4e49b8069e4a4"/>    <section>
    <title>createdT</title>
<indexterm><primary>createdT</primary><secondary>Person</secondary></indexterm>
<indexterm><primary>Person</primary><secondary>createdT</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDateTime">DatasimDateTime</link> Person::createdT</computeroutput></para><para>
Definition at line 23 of file PersonAndEmployee.hh.</para>
    </section><anchor xml:id="_classPerson_1abc4a5fbe6e5412b54fcbdf6446b4a29e"/>    <section>
    <title>dob<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>dob</primary><secondary>Person</secondary></indexterm>
<indexterm><primary>Person</primary><secondary>dob</secondary></indexterm>
<para><computeroutput><link linkend="_classDatasimDate">DatasimDate</link> Person::dob</computeroutput></para><para>
Definition at line 20 of file Person.hh.</para>
    </section><anchor xml:id="_classPerson_1a1bf771e74a8e1e3443394ef580e02de4"/>    <section>
    <title>dob<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>dob</primary><secondary>Person</secondary></indexterm>
<indexterm><primary>Person</primary><secondary>dob</secondary></indexterm>
<para><computeroutput><link linkend="_classWrapper">Wrapper</link>&lt;<link linkend="_classDatasimDate">DatasimDate</link>&gt; Person::dob</computeroutput></para><para>
Definition at line 21 of file TestWrapper.cc.</para>
    </section><anchor xml:id="_classPerson_1ae6ee626f8471b70bef418998ab35623e"/>    <section>
    <title>nam<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>nam</primary><secondary>Person</secondary></indexterm>
<indexterm><primary>Person</primary><secondary>nam</secondary></indexterm>
<para><computeroutput>std::string Person::nam</computeroutput></para><para>
Definition at line 19 of file Person.hh.</para>
    </section><anchor xml:id="_classPerson_1ac6d7e0d7d60ff303b4dfde117c4356ea"/>    <section>
    <title>nam<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>nam</primary><secondary>Person</secondary></indexterm>
<indexterm><primary>Person</primary><secondary>nam</secondary></indexterm>
<para><computeroutput><link linkend="_classWrapper">Wrapper</link>&lt;std::string&gt; Person::nam</computeroutput></para><para>
Definition at line 20 of file TestWrapper.cc.</para>
    </section><anchor xml:id="_classPerson_1a05d516e45631e8e7653e456d70b9d404"/>    <section>
    <title>props</title>
<indexterm><primary>props</primary><secondary>Person</secondary></indexterm>
<indexterm><primary>Person</primary><secondary>props</secondary></indexterm>
<para><computeroutput><link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt;std::string, <link linkend="_classAnyType">AnyType</link>*&gt; Person::props</computeroutput></para><para>
Definition at line 25 of file TestWrapper.cc.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/duffy/<link linkend="_Person_8hh">Person.hh</link>include/duffy/<link linkend="_PersonAndEmployee_8hh">PersonAndEmployee.hh</link>tests/<link linkend="_TestWrapper_8cc">TestWrapper.cc</link>src/<link linkend="_Person_8cc">Person.cc</link></section>
</section>
