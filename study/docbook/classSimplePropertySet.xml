<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classSimplePropertySet">
<title>SimplePropertySet&lt; N, V &gt; Class Template Reference</title>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;SimplePropertySet.hh&gt;</computeroutput>
</para>
Inheritance diagram for SimplePropertySet&lt; N, V &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classSimplePropertySet__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for SimplePropertySet&lt; N, V &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classSimplePropertySet__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef std::map&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::<link linkend="_classSimplePropertySet_1ae7e2bc706a3ded16c053d59d7a1343be">iterator</link> <link linkend="_classSimplePropertySet_1ae7e2bc706a3ded16c053d59d7a1343be">iterator</link></para>
</listitem>
            <listitem><para>typedef std::map&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::<link linkend="_classSimplePropertySet_1aab3d4fc3315979035be3d5c64c42d425">const_iterator</link> <link linkend="_classSimplePropertySet_1aab3d4fc3315979035be3d5c64c42d425">const_iterator</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classSimplePropertySet_1a81d6e9ab7aff63f3fe5b5818f5aba24d">SimplePropertySet</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classSimplePropertySet_1a023467dd53d24dc7ef5cb6b4d88aa7ce">SimplePropertySet</link> (const <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &amp;<link linkend="_classSimplePropertySet_1a7674e0f5c6b6a747aa85d54bc52d1ab7">name</link>)</para>
</listitem>
            <listitem><para><link linkend="_classSimplePropertySet_1adda400272ff7f24ba0e4c3fab9e39f6b">SimplePropertySet</link> (const <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt; &amp;source)</para>
</listitem>
            <listitem><para><link linkend="_classSimplePropertySet_1a8b45e771b3efadcf2ccbcc3fdaa12f5e">SimplePropertySet</link> (const <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &amp;<link linkend="_classSimplePropertySet_1a7674e0f5c6b6a747aa85d54bc52d1ab7">name</link>, const <link linkend="_classSet">Set</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &gt; &amp;keySet)</para>
</listitem>
            <listitem><para>virtual <link linkend="_classSimplePropertySet_1abe51bf32a2816ab01a7bbca3d838f430">~SimplePropertySet</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classSimplePropertySet_1ae7e2bc706a3ded16c053d59d7a1343be">iterator</link> <link linkend="_classSimplePropertySet_1af0c72b2e6a39f6d2d02ce443afa01de5">Begin</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classSimplePropertySet_1aab3d4fc3315979035be3d5c64c42d425">const_iterator</link> <link linkend="_classSimplePropertySet_1a6802c214360692877d33fa97de489c81">Begin</link> () const</para>
</listitem>
            <listitem><para><link linkend="_classSimplePropertySet_1ae7e2bc706a3ded16c053d59d7a1343be">iterator</link> <link linkend="_classSimplePropertySet_1a6d3c8a051b7c6846508898c8375a2cfd">End</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classSimplePropertySet_1aab3d4fc3315979035be3d5c64c42d425">const_iterator</link> <link linkend="_classSimplePropertySet_1a5d6159e4afdef3815a3caa7840867f3c">End</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_classSimplePropertySet_1ab593364b7d18f4fa2639abc75c188d0c">Size</link> () const</para>
</listitem>
            <listitem><para><link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> <link linkend="_classSimplePropertySet_1adee2b738f8853c056e40c72384a442bf">operator()</link> () const</para>
</listitem>
            <listitem><para><link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> <link linkend="_classSimplePropertySet_1a7674e0f5c6b6a747aa85d54bc52d1ab7">name</link> () const</para>
</listitem>
            <listitem><para><link linkend="_classSet">Set</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &gt; &amp; <link linkend="_classSimplePropertySet_1a6ba0b7ab8d9122312489ca390c4bf403">definingSet</link> () const</para>
</listitem>
            <listitem><para>bool <link linkend="_classSimplePropertySet_1a1267fc2078252c8f5cde01bc082c7abb">hasProperty</link> (const <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &amp;search_name) const</para>
</listitem>
            <listitem><para>V <link linkend="_classSimplePropertySet_1a897907f8f6c0d4a68e6fadf6d6538773">value</link> (const <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &amp;<link linkend="_classSimplePropertySet_1a7674e0f5c6b6a747aa85d54bc52d1ab7">name</link>) const</para>
</listitem>
            <listitem><para>void <link linkend="_classSimplePropertySet_1ae7b7f24763a55b11e9e21cec05390965">operator()</link> (const <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &amp;<link linkend="_classSimplePropertySet_1a7674e0f5c6b6a747aa85d54bc52d1ab7">name</link>)</para>
</listitem>
            <listitem><para>void <link linkend="_classSimplePropertySet_1a6bf75b5e081e0a8dea7535811349e081">value</link> (const <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &amp;<link linkend="_classSimplePropertySet_1a7674e0f5c6b6a747aa85d54bc52d1ab7">name</link>, const V &amp;value)</para>
</listitem>
            <listitem><para>void <link linkend="_classSimplePropertySet_1a0416ff1b79646897fc4f6d7019f8ed63">value</link> (const <link linkend="_classProperty">Property</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt; &amp;prop)</para>
</listitem>
            <listitem><para>void <link linkend="_classSimplePropertySet_1a10d2ad72a513d2b6727113b4d9ec0f78">ClearAll</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classSimplePropertySet_1a8663619c5669177f23286672ad49ceca">add</link> (const <link linkend="_classProperty">Property</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt; &amp;p)</para>
</listitem>
            <listitem><para>void <link linkend="_classSimplePropertySet_1ae25d67b8dc28ce9af587b769bbe1dfe3">add</link> (const <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &amp;key, const V &amp;<link linkend="_classSimplePropertySet_1a897907f8f6c0d4a68e6fadf6d6538773">value</link>)</para>
</listitem>
            <listitem><para>void <link linkend="_classSimplePropertySet_1ade559928631fd263ac69aef08f4017d2">remove</link> (const <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &amp;key)</para>
</listitem>
            <listitem><para>void <link linkend="_classSimplePropertySet_1a88c4fef57ef8e5279d28f6a13a10076c">remove</link> (const <link linkend="_classProperty">Property</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt; &amp;prop)</para>
</listitem>
            <listitem><para><link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt; &amp; <link linkend="_classSimplePropertySet_1a3f605fbec62d086f9d5cd3fd204bb9e9">operator=</link> (const <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt; &amp;source)</para>
</listitem>
            <listitem><para><link linkend="_classPropertyThing">PropertyThing</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt; * <link linkend="_classSimplePropertySet_1a5310d09ff2e7065a119dbf1368179cef">Copy</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;class N = std::string, class V = double&gt;
class SimplePropertySet&lt; N, V &gt;</title></simplesect>

<para>
Definition at line 24 of file SimplePropertySet.hh.</para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classSimplePropertySet_1aab3d4fc3315979035be3d5c64c42d425"/>    <section>
    <title>const_iterator</title>
<indexterm><primary>const_iterator</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>const_iterator</secondary></indexterm>
<computeroutput>template&lt;class N = std::string, class V = double&gt; </computeroutput><para><computeroutput>typedef std::map&lt;<link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V&gt;::<link linkend="_classSimplePropertySet_1aab3d4fc3315979035be3d5c64c42d425">const_iterator</link> <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::<link linkend="_classSimplePropertySet_1aab3d4fc3315979035be3d5c64c42d425">const_iterator</link></computeroutput></para><para>
Definition at line 39 of file SimplePropertySet.hh.</para>
    </section><anchor xml:id="_classSimplePropertySet_1ae7e2bc706a3ded16c053d59d7a1343be"/>    <section>
    <title>iterator</title>
<indexterm><primary>iterator</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>iterator</secondary></indexterm>
<computeroutput>template&lt;class N = std::string, class V = double&gt; </computeroutput><para><computeroutput>typedef std::map&lt;<link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V&gt;::<link linkend="_classSimplePropertySet_1ae7e2bc706a3ded16c053d59d7a1343be">iterator</link> <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::<link linkend="_classSimplePropertySet_1ae7e2bc706a3ded16c053d59d7a1343be">iterator</link></computeroutput></para><para>
Definition at line 38 of file SimplePropertySet.hh.</para>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classSimplePropertySet_1a81d6e9ab7aff63f3fe5b5818f5aba24d"/>    <section>
    <title>SimplePropertySet()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>SimplePropertySet</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>SimplePropertySet</secondary></indexterm>
<computeroutput>template&lt;class N , class V &gt; </computeroutput><para><computeroutput><link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::<link linkend="_classSimplePropertySet">SimplePropertySet</link> ( )</computeroutput></para><para>
Definition at line 27 of file SimplePropertySet.cc.</para>
<programlisting>28 {&#32;<emphasis role="comment">//&#32;Default&#32;constructor</emphasis>
29 
30 &#32;&#32;&#32;&#32;nam&#32;=&#32;<link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>();
31 &#32;&#32;&#32;&#32;sl=std::map&lt;N,V&gt;();
32 &#32;&#32;&#32;&#32;keys&#32;=&#32;<link linkend="_classSet">Set&lt;N&gt;</link>();
33 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1a023467dd53d24dc7ef5cb6b4d88aa7ce"/>    <section>
    <title>SimplePropertySet()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>SimplePropertySet</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>SimplePropertySet</secondary></indexterm>
<computeroutput>template&lt;class N, class V &gt; </computeroutput><para><computeroutput><link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::<link linkend="_classSimplePropertySet">SimplePropertySet</link> (const <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &amp; name)</computeroutput></para><para>
Definition at line 36 of file SimplePropertySet.cc.</para>
<programlisting>37 {&#32;<emphasis role="comment">//&#32;Named&#32;property&#32;set</emphasis>
38 
39 &#32;&#32;&#32;&#32;nam&#32;=&#32;<link linkend="_classSimplePropertySet_1a7674e0f5c6b6a747aa85d54bc52d1ab7">name</link>;
40 &#32;&#32;&#32;&#32;sl=std::map&lt;N,V&gt;();
41 &#32;&#32;&#32;&#32;keys&#32;=&#32;<link linkend="_classSet">Set&lt;N&gt;</link>();
42 &#32;&#32;&#32;&#32;keys.<link linkend="_classSet_1a25791eed3b7ef4be9af5059cf09767f2">Insert</link>(<link linkend="_classSimplePropertySet_1a7674e0f5c6b6a747aa85d54bc52d1ab7">name</link>);
43 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1adda400272ff7f24ba0e4c3fab9e39f6b"/>    <section>
    <title>SimplePropertySet()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>SimplePropertySet</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>SimplePropertySet</secondary></indexterm>
<computeroutput>template&lt;class N, class V&gt; </computeroutput><para><computeroutput><link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::<link linkend="_classSimplePropertySet">SimplePropertySet</link> (const <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt; &amp; source)</computeroutput></para><para>
Definition at line 47 of file SimplePropertySet.cc.</para>
<programlisting>48 {&#32;<emphasis role="comment">//&#32;Copy&#32;constructor</emphasis>
49 &#32;&#32;&#32;&#32;
50 &#32;&#32;&#32;&#32;nam&#32;=&#32;source.nam;
51 &#32;&#32;&#32;&#32;sl&#32;=&#32;source.sl;
52 &#32;&#32;&#32;&#32;keys&#32;=&#32;source.keys;
53 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1a8b45e771b3efadcf2ccbcc3fdaa12f5e"/>    <section>
    <title>SimplePropertySet()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>SimplePropertySet</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>SimplePropertySet</secondary></indexterm>
<computeroutput>template&lt;class N, class V&gt; </computeroutput><para><computeroutput><link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::<link linkend="_classSimplePropertySet">SimplePropertySet</link> (const <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &amp; name, const <link linkend="_classSet">Set</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &gt; &amp; keySet)</computeroutput></para><para>
Definition at line 56 of file SimplePropertySet.cc.</para>
<programlisting>57 {&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;property&#32;set&#32;from&#32;a&#32;set&#32;of&#32;attribute&#32;defs</emphasis>
58 &#32;&#32;&#32;&#32;
59 &#32;&#32;&#32;&#32;nam&#32;=&#32;<link linkend="_classSimplePropertySet_1a7674e0f5c6b6a747aa85d54bc52d1ab7">name</link>;
60 &#32;&#32;&#32;&#32;keys&#32;=&#32;keySet;
61 
62 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;iterate&#32;in&#32;the&#32;keys&#32;and&#32;do&#32;default&#32;constructor</emphasis>
63 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classSet">Set&lt;N&gt;::iterator</link>&#32;it;
64 
65 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(it&#32;=&#32;keys.<link linkend="_classSet_1a3ca47221f02ee54c6b627ff73a9b5b98">Begin</link>();&#32;it&#32;!=&#32;keys.<link linkend="_classSet_1aeb4a4b2026eb040a24e9b251e0c49dec">End</link>();&#32;it++)
66 &#32;&#32;&#32;&#32;{&#32;
67 
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classSimplePropertySet_1a8663619c5669177f23286672ad49ceca">add</link>(<link linkend="_classProperty">Property&lt;N,V&gt;</link>(*it,&#32;V()));
69 &#32;&#32;&#32;&#32;}&#32;&#32;&#32;
70 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1abe51bf32a2816ab01a7bbca3d838f430"/>    <section>
    <title>~SimplePropertySet()</title>
<indexterm><primary>~SimplePropertySet</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>~SimplePropertySet</secondary></indexterm>
<computeroutput>template&lt;class N , class V &gt; </computeroutput><para><computeroutput><link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::~<link linkend="_classSimplePropertySet">SimplePropertySet</link> ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Definition at line 73 of file SimplePropertySet.cc.</para>
<programlisting>74 {&#32;<emphasis role="comment">//&#32;Destructor</emphasis>
75 
76 
77 }
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classSimplePropertySet_1ae25d67b8dc28ce9af587b769bbe1dfe3"/>    <section>
    <title>add()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>add</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>add</secondary></indexterm>
<computeroutput>template&lt;class N, class V&gt; </computeroutput><para><computeroutput>void <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::add (const <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &amp; key, const V &amp; value)</computeroutput></para><para>
Definition at line 221 of file SimplePropertySet.cc.</para>
<programlisting>222 {&#32;<emphasis role="comment">//&#32;Add&#32;a&#32;key+value&#32;pair&#32;to&#32;the&#32;list</emphasis>
223 
224 
225 &#32;&#32;&#32;&#32;std::pair&lt;N,V&gt;&#32;tmp;
226 &#32;&#32;&#32;&#32;tmp.first&#32;=&#32;key;
227 &#32;&#32;&#32;&#32;tmp.second&#32;=&#32;<link linkend="_classSimplePropertySet_1a897907f8f6c0d4a68e6fadf6d6538773">value</link>;
228 
229 &#32;&#32;&#32;&#32;sl.insert(tmp);&#32;<emphasis role="comment">//&#32;Add&#32;el.&#32;with&#32;name&#32;+&#32;value</emphasis>
230 
231 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;the&#32;key&#32;set</emphasis>
232 &#32;&#32;&#32;&#32;keys.<link linkend="_classSet_1a25791eed3b7ef4be9af5059cf09767f2">Insert</link>(key);
233 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1a8663619c5669177f23286672ad49ceca"/>    <section>
    <title>add()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>add</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>add</secondary></indexterm>
<computeroutput>template&lt;class N, class V&gt; </computeroutput><para><computeroutput>void <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::add (const <link linkend="_classProperty">Property</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt; &amp; p)</computeroutput></para><para>
Definition at line 236 of file SimplePropertySet.cc.</para>
<programlisting>237 {&#32;<emphasis role="comment">//&#32;Add&#32;a&#32;key+value&#32;pair&#32;to&#32;the&#32;list</emphasis>
238 
239 
240 &#32;&#32;&#32;&#32;std::pair&lt;N,V&gt;&#32;tmp;
241 &#32;&#32;&#32;&#32;tmp.first&#32;=&#32;pr.name();
242 &#32;&#32;&#32;&#32;tmp.second&#32;=&#32;pr();
243 
244 &#32;&#32;&#32;&#32;sl.insert(tmp);&#32;<emphasis role="comment">//&#32;Add&#32;el.&#32;with&#32;name&#32;+&#32;value</emphasis>
245 
246 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;the&#32;key&#32;set</emphasis>
247 &#32;&#32;&#32;&#32;keys.<link linkend="_classSet_1a25791eed3b7ef4be9af5059cf09767f2">Insert</link>(tmp.first);
248 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1af0c72b2e6a39f6d2d02ce443afa01de5"/>    <section>
    <title>Begin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Begin</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>Begin</secondary></indexterm>
<computeroutput>template&lt;class N , class V &gt; </computeroutput><para><computeroutput><link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::<link linkend="_classSimplePropertySet_1ae7e2bc706a3ded16c053d59d7a1343be">iterator</link> <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::Begin ( )</computeroutput></para><para>
Definition at line 81 of file SimplePropertySet.cc.</para>
<programlisting>82 {&#32;<emphasis role="comment">//&#32;Return&#32;iterator&#32;at&#32;begin&#32;of&#32;composite</emphasis>
83 
84 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sl.begin();
85 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1a6802c214360692877d33fa97de489c81"/>    <section>
    <title>Begin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Begin</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>Begin</secondary></indexterm>
<computeroutput>template&lt;class N , class V &gt; </computeroutput><para><computeroutput><link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::<link linkend="_classSimplePropertySet_1aab3d4fc3315979035be3d5c64c42d425">const_iterator</link> <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::Begin ( ) const</computeroutput></para><para>
Definition at line 88 of file SimplePropertySet.cc.</para>
<programlisting>89 {&#32;<emphasis role="comment">//&#32;Return&#32;const&#32;iterator&#32;at&#32;begin&#32;of&#32;composite</emphasis>
90 
91 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sl.begin();
92 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1a10d2ad72a513d2b6727113b4d9ec0f78"/>    <section>
    <title>ClearAll()</title>
<indexterm><primary>ClearAll</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>ClearAll</secondary></indexterm>
<computeroutput>template&lt;class N , class V &gt; </computeroutput><para><computeroutput>void <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::ClearAll ( )</computeroutput></para><para>
Definition at line 157 of file SimplePropertySet.cc.</para>
<programlisting>158 {&#32;&#32;&#32;<emphasis role="comment">//&#32;Remove&#32;all&#32;its&#32;properties</emphasis>
159 
160 &#32;&#32;&#32;&#32;sl&#32;=&#32;std::map&lt;N,V&gt;();
161 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1a5310d09ff2e7065a119dbf1368179cef"/>    <section>
    <title>Copy()</title>
<indexterm><primary>Copy</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>Copy</secondary></indexterm>
<computeroutput>template&lt;class N , class V &gt; </computeroutput><para><computeroutput><link linkend="_classPropertyThing">PropertyThing</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt; * <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::Copy ( ) const<computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Implements <link linkend="_classPropertyThing_1a50223b9a9f80477ad12c4625a74479d6">PropertyThing&lt; N, V &gt;</link>.</para>
<para>
Definition at line 284 of file SimplePropertySet.cc.</para>
<programlisting>285 {
286 
287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classSimplePropertySet_1a81d6e9ab7aff63f3fe5b5818f5aba24d">SimplePropertySet</link>(*<emphasis role="keyword">this</emphasis>);
288 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1a6ba0b7ab8d9122312489ca390c4bf403"/>    <section>
    <title>definingSet()</title>
<indexterm><primary>definingSet</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>definingSet</secondary></indexterm>
<computeroutput>template&lt;class N , class V &gt; </computeroutput><para><computeroutput><link linkend="_classSet">Set</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &gt; &amp; <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::definingSet ( ) const</computeroutput></para><para>
Definition at line 131 of file SimplePropertySet.cc.</para>
<programlisting>132 {&#32;<emphasis role="comment">//&#32;Set&#32;of&#32;keys</emphasis>
133 
134 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;keys;
135 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1a6d3c8a051b7c6846508898c8375a2cfd"/>    <section>
    <title>End()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>End</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>End</secondary></indexterm>
<computeroutput>template&lt;class N , class V &gt; </computeroutput><para><computeroutput><link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::<link linkend="_classSimplePropertySet_1ae7e2bc706a3ded16c053d59d7a1343be">iterator</link> <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::End ( )</computeroutput></para><para>
Definition at line 95 of file SimplePropertySet.cc.</para>
<programlisting>96 {&#32;<emphasis role="comment">//&#32;Return&#32;iterator&#32;after&#32;end&#32;of&#32;composite</emphasis>
97 
98 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sl.end();
99 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1a5d6159e4afdef3815a3caa7840867f3c"/>    <section>
    <title>End()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>End</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>End</secondary></indexterm>
<computeroutput>template&lt;class N , class V &gt; </computeroutput><para><computeroutput><link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::<link linkend="_classSimplePropertySet_1aab3d4fc3315979035be3d5c64c42d425">const_iterator</link> <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::End ( ) const</computeroutput></para><para>
Definition at line 102 of file SimplePropertySet.cc.</para>
<programlisting>103 {&#32;<emphasis role="comment">//&#32;Return&#32;const&#32;iterator&#32;after&#32;end&#32;of&#32;composite</emphasis>
104 
105 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sl.end();
106 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1a1267fc2078252c8f5cde01bc082c7abb"/>    <section>
    <title>hasProperty()</title>
<indexterm><primary>hasProperty</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>hasProperty</secondary></indexterm>
<computeroutput>template&lt;class N, class V &gt; </computeroutput><para><computeroutput>bool <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::hasProperty (const <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &amp; search_name) const</computeroutput></para><para>
Definition at line 139 of file SimplePropertySet.cc.</para>
<programlisting>140 {&#32;<emphasis role="comment">//&#32;Is&#32;the&#32;property&#32;in&#32;the&#32;list?</emphasis>
141 
142 
143 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;keys.<link linkend="_classSet_1a685c7dec3d054d0d9972457f13873568">Contains</link>(<link linkend="_TestImpliedVolatility_8cc_1a927694c350b26693c65f7c8b73b3dba3">n</link>);
144 
145 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1a7674e0f5c6b6a747aa85d54bc52d1ab7"/>    <section>
    <title>name()</title>
<indexterm><primary>name</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>name</secondary></indexterm>
<computeroutput>template&lt;class N , class V &gt; </computeroutput><para><computeroutput><link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::name ( ) const</computeroutput></para><para>
Definition at line 124 of file SimplePropertySet.cc.</para>
<programlisting>125 {&#32;<emphasis role="comment">//&#32;The&#32;name&#32;of&#32;the&#32;property&#32;set</emphasis>
126 
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nam;
128 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1adee2b738f8853c056e40c72384a442bf"/>    <section>
    <title>operator()()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;class N , class V &gt; </computeroutput><para><computeroutput><link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::operator() ( ) const</computeroutput></para><para>
Definition at line 117 of file SimplePropertySet.cc.</para>
<programlisting>118 {&#32;<emphasis role="comment">//&#32;The&#32;name&#32;of&#32;the&#32;property&#32;set</emphasis>
119 
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nam;
121 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1ae7b7f24763a55b11e9e21cec05390965"/>    <section>
    <title>operator()()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;class N, class V &gt; </computeroutput><para><computeroutput>void <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::operator() (const <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &amp; name)</computeroutput></para><para>
Definition at line 150 of file SimplePropertySet.cc.</para>
<programlisting>151 {
152 
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nam&#32;=&#32;<link linkend="_classSimplePropertySet_1a7674e0f5c6b6a747aa85d54bc52d1ab7">name</link>;
154 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1a3f605fbec62d086f9d5cd3fd204bb9e9"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;class N, class V&gt; </computeroutput><para><computeroutput><link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt; &amp; <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::operator= (const <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt; &amp; source)</computeroutput></para><para>
Definition at line 269 of file SimplePropertySet.cc.</para>
<programlisting>270 {&#32;<emphasis role="comment">//&#32;Assignment</emphasis>
271 
272 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Exit&#32;if&#32;same&#32;object</emphasis>
273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>==&amp;source)&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
274 
275 
276 &#32;&#32;&#32;&#32;nam&#32;=&#32;source.nam;
277 &#32;&#32;&#32;&#32;sl&#32;=&#32;source.sl;
278 &#32;&#32;&#32;&#32;keys&#32;=&#32;source.keys;
279 
280 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
281 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1ade559928631fd263ac69aef08f4017d2"/>    <section>
    <title>remove()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>remove</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>remove</secondary></indexterm>
<computeroutput>template&lt;class N, class V &gt; </computeroutput><para><computeroutput>void <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::remove (const <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &amp; key)</computeroutput></para><para>
Definition at line 251 of file SimplePropertySet.cc.</para>
<programlisting>252 {&#32;<emphasis role="comment">//&#32;Remove&#32;all&#32;elements&#32;with&#32;&apos;key&apos;&#32;O(1)</emphasis>
253 
254 
255 &#32;&#32;&#32;&#32;sl.erase(key);
256 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1a88c4fef57ef8e5279d28f6a13a10076c"/>    <section>
    <title>remove()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>remove</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>remove</secondary></indexterm>
<computeroutput>template&lt;class N, class V&gt; </computeroutput><para><computeroutput>void <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::remove (const <link linkend="_classProperty">Property</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt; &amp; prop)</computeroutput></para><para>
Definition at line 260 of file SimplePropertySet.cc.</para>
<programlisting>261 {&#32;<emphasis role="comment">//&#32;Remove&#32;the&#32;given&#32;property</emphasis>
262 
263 &#32;&#32;&#32;&#32;<link linkend="_classSimplePropertySet_1ade559928631fd263ac69aef08f4017d2">remove</link>(prop.<link linkend="_classProperty_1a61070c4a41dcdbc890c6b27146931e97">name</link>());
264 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1ab593364b7d18f4fa2639abc75c188d0c"/>    <section>
    <title>Size()</title>
<indexterm><primary>Size</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>Size</secondary></indexterm>
<computeroutput>template&lt;class N , class V &gt; </computeroutput><para><computeroutput>int <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::Size ( ) const</computeroutput></para><para>
Definition at line 110 of file SimplePropertySet.cc.</para>
<programlisting>111 {&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;number&#32;of&#32;functions&#32;in&#32;the&#32;composite</emphasis>
112 
113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;keys.<link linkend="_classSet_1aec2bedbb313cfc25c7100c6984760dd3">Size</link>();
114 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1a897907f8f6c0d4a68e6fadf6d6538773"/>    <section>
    <title>value()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>value</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;class N, class V &gt; </computeroutput><para><computeroutput>V <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::value (const <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &amp; name) const</computeroutput></para><para>
Definition at line 164 of file SimplePropertySet.cc.</para>
<programlisting>165 {
166 
167 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NO&#32;exception&#32;handling</emphasis>
168 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;(hasProperty(name)&#32;==&#32;false)</emphasis>
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//return&#32;V();</emphasis>
170 
171 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;;(&#32;Sledgehammer,&#32;use&#32;find!!</emphasis>
172 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;iterate&#32;over&#32;the&#32;list&#32;until&#32;we&#32;find&#32;the&#32;value</emphasis>
173 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::map&lt;N,V&gt;::const_iterator&#32;it;
174 
175 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(it=sl.begin();&#32;it!=sl.end();&#32;it++)
176 &#32;&#32;&#32;&#32;{&#32;
177 
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*it).first&#32;==&#32;<link linkend="_classSimplePropertySet_1a7674e0f5c6b6a747aa85d54bc52d1ab7">name</link>)
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*it).second;
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
182 &#32;&#32;&#32;&#32;}&#32;
183 
184 <emphasis role="comment">//&#32;&#32;return&#32;sl[name];</emphasis>
185 
186 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1a6bf75b5e081e0a8dea7535811349e081"/>    <section>
    <title>value()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>value</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;class N, class V&gt; </computeroutput><para><computeroutput>void <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::value (const <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link> &amp; name, const V &amp; value)</computeroutput></para><para>
Definition at line 189 of file SimplePropertySet.cc.</para>
<programlisting>190 {&#32;&#32;&#32;<emphasis role="comment">//&#32;Change&#32;value&#32;of&#32;Property,&#32;key&#32;&apos;name&apos;</emphasis>
191 &#32;&#32;&#32;&#32;
192 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NO&#32;exception&#32;handling</emphasis>
193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classSimplePropertySet_1a1267fc2078252c8f5cde01bc082c7abb">hasProperty</link>(<link linkend="_classSimplePropertySet_1a7674e0f5c6b6a747aa85d54bc52d1ab7">name</link>)&#32;==&#32;<emphasis role="keyword">false</emphasis>)
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
195 
196 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;;(&#32;Sledgehammer</emphasis>
197 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;iterate&#32;over&#32;the&#32;list&#32;until&#32;we&#32;find&#32;the&#32;value</emphasis>
198 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::map&lt;N,V&gt;::iterator&#32;it;
199 
200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(it=sl.begin();&#32;it!=sl.end();&#32;it++)
201 &#32;&#32;&#32;&#32;{&#32;
202 
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*it).first&#32;==&#32;<link linkend="_classSimplePropertySet_1a7674e0f5c6b6a747aa85d54bc52d1ab7">name</link>)
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*it).second&#32;=&#32;<link linkend="_classSimplePropertySet_1a897907f8f6c0d4a68e6fadf6d6538773">value</link>;
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
207 &#32;&#32;&#32;&#32;}
208 }
</programlisting>    </section><anchor xml:id="_classSimplePropertySet_1a0416ff1b79646897fc4f6d7019f8ed63"/>    <section>
    <title>value()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>value</primary><secondary>SimplePropertySet&lt; N, V &gt;</secondary></indexterm>
<indexterm><primary>SimplePropertySet&lt; N, V &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;class N, class V&gt; </computeroutput><para><computeroutput>void <link linkend="_classSimplePropertySet">SimplePropertySet</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt;::value (const <link linkend="_classProperty">Property</link>&lt; <link linkend="_TestImpliedVolatility_8cc_1a6cbb82a21dec4c4f36c3f78340be64de">N</link>, V &gt; &amp; prop)</computeroutput></para><para>
Definition at line 211 of file SimplePropertySet.cc.</para>
<programlisting>212 {
213 
214 &#32;&#32;&#32;&#32;<link linkend="_classSimplePropertySet_1a897907f8f6c0d4a68e6fadf6d6538773">value</link>(scf.name(),&#32;scf());
215 }
</programlisting></section>
<para>
The documentation for this class was generated from the following files:</para>
include/duffy/<link linkend="_SimplePropertySet_8hh">SimplePropertySet.hh</link>src/<link linkend="_SimplePropertySet_8cc">SimplePropertySet.cc</link></section>
</section>
