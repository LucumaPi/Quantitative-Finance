<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classLattice">
<title>Lattice&lt; V, I, NumberNodes &gt; Class Template Reference</title>
<indexterm><primary>Lattice&lt; V, I, NumberNodes &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;Lattice.hh&gt;</computeroutput>
</para>
Inheritance diagram for Lattice&lt; V, I, NumberNodes &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classLattice__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for Lattice&lt; V, I, NumberNodes &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classLattice__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classLattice_1a9fe92ce8abfb8668e28064b394f7a057">Lattice</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classLattice_1afda324cc8c833a70695e9cbe18a51057">Lattice</link> (const I &amp;Nrows)</para>
</listitem>
            <listitem><para><link linkend="_classLattice_1ac6b6d97ee0948d2c7cd7b76366ef8579">Lattice</link> (const I &amp;Nrows, const V &amp;val)</para>
</listitem>
            <listitem><para><link linkend="_classLattice_1a10b13338775f9e191d14d265439d13c0">Lattice</link> (const <link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt; &amp;source)</para>
</listitem>
            <listitem><para>virtual <link linkend="_classLattice_1a9625188af2d5da9d88b2f747db907042">~Lattice</link> ()</para>
</listitem>
            <listitem><para>I <link linkend="_classLattice_1a07442df63222c6627f46efc4ae91acf9">MinIndex</link> () const</para>
</listitem>
            <listitem><para>I <link linkend="_classLattice_1a5cac27496a08f2a14d8e1d65732a4c34">MaxIndex</link> () const</para>
</listitem>
            <listitem><para>I <link linkend="_classLattice_1a0911d29a485c5e8555b8f25e7589434a">Depth</link> () const</para>
</listitem>
            <listitem><para><link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt; &amp; <link linkend="_classLattice_1a135fdd0475ed6105b3367d507681a404">operator=</link> (const <link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt; &amp;source)</para>
</listitem>
            <listitem><para><link linkend="_classVector">Vector</link>&lt; V, I &gt; &amp; <link linkend="_classLattice_1ab444412f2030b7594d611c1f7429a953">operator[]</link> (const I &amp;nLevel)</para>
</listitem>
            <listitem><para>const <link linkend="_classVector">Vector</link>&lt; V, I &gt; &amp; <link linkend="_classLattice_1a25365d1583521fe97c48761f493edaa3">operator[]</link> (const I &amp;nLevel) const</para>
</listitem>
            <listitem><para><link linkend="_classVector">Vector</link>&lt; V, I &gt; <link linkend="_classLattice_1a0454fa42ebad2e9fbb71e884f3befaf6">BasePyramidVector</link> () const</para>
</listitem>
            <listitem><para>I <link linkend="_classLattice_1a37afc93f46019f322291307c1bed2e11">BasePyramidSize</link> () const</para>
</listitem>
            <listitem><para>I <link linkend="_classLattice_1a114af77d5b77fa52ffd28c42f7f97b5f">numberNodes</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;class V, class I, int NumberNodes&gt;
class Lattice&lt; V, I, NumberNodes &gt;</title></simplesect>

<para>
Definition at line 27 of file Lattice.hh.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classLattice_1a9fe92ce8abfb8668e28064b394f7a057"/>    <section>
    <title>Lattice()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>Lattice</primary><secondary>Lattice&lt; V, I, NumberNodes &gt;</secondary></indexterm>
<indexterm><primary>Lattice&lt; V, I, NumberNodes &gt;</primary><secondary>Lattice</secondary></indexterm>
<computeroutput>template&lt;class V , class I , int NumberNodes&gt; </computeroutput><para><computeroutput><link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt;::<link linkend="_classLattice">Lattice</link> ( )</computeroutput></para><para>
Definition at line 27 of file Lattice.cc.</para>
<programlisting>28 {&#32;<emphasis role="comment">//&#32;Default&#32;constructor</emphasis>
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tree&#32;=&#32;<link linkend="_classArray">Array&lt;Vector&lt;V, I&gt;</link>&#32;&gt;&#32;(1,&#32;1);&#32;<emphasis role="comment">//&#32;A&#32;flat&#32;matrix&#32;with&#32;1&#32;row&#32;in&#32;array</emphasis>
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Start&#32;index&#32;==&#32;1</emphasis>
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tree[1]&#32;=&#32;<link linkend="_classVector">Vector&lt;V, I&gt;</link>&#32;(1,1);
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typ&#32;=&#32;2;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Binomial&#32;method</emphasis>
33 }
</programlisting>    </section><anchor xml:id="_classLattice_1afda324cc8c833a70695e9cbe18a51057"/>    <section>
    <title>Lattice()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>Lattice</primary><secondary>Lattice&lt; V, I, NumberNodes &gt;</secondary></indexterm>
<indexterm><primary>Lattice&lt; V, I, NumberNodes &gt;</primary><secondary>Lattice</secondary></indexterm>
<computeroutput>template&lt;class V , class I, int NumberNodes&gt; </computeroutput><para><computeroutput><link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt;::<link linkend="_classLattice">Lattice</link> (const I &amp; Nrows)</computeroutput></para><para>
Definition at line 35 of file Lattice.cc.</para>
<programlisting>36 {&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;rows&#32;and&#32;branch&#32;factor</emphasis>
37 &#32;&#32;&#32;&#32;nrows&#32;=&#32;Nrows;
38 &#32;&#32;&#32;&#32;typ&#32;=&#32;NumberNodes;
39 &#32;&#32;&#32;&#32;tree&#32;=&#32;<link linkend="_classArray">Array&lt;Vector&lt;V, I&gt;</link>,&#32;I&gt;&#32;(Nrows&#32;+&#32;1,&#32;1);&#32;<emphasis role="comment">//&#32;Start&#32;index&#32;==&#32;1</emphasis>
40 &#32;&#32;&#32;&#32;I&#32;currentBranch&#32;=&#32;1;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;There&#32;is&#32;always&#32;one&#32;single&#32;root</emphasis>
41 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialise&#32;tree&#32;vectors&#32;(give&#32;sizes&#32;of&#32;vectors)</emphasis>
42 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_TestImpliedVolatility_8cc_1a927694c350b26693c65f7c8b73b3dba3">n</link>&#32;=&#32;tree.<link linkend="_classArray_1acffe058a1dd631b05fb71a83e27b445a">MinIndex</link>();&#32;<link linkend="_TestImpliedVolatility_8cc_1a927694c350b26693c65f7c8b73b3dba3">n</link>&#32;&lt;=&#32;tree.<link linkend="_classArray_1a8ce7791cd1ec7ba63ec71772a7144965">MaxIndex</link>();&#32;<link linkend="_TestImpliedVolatility_8cc_1a927694c350b26693c65f7c8b73b3dba3">n</link>++)
43 &#32;&#32;&#32;&#32;{
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tree[<link linkend="_TestImpliedVolatility_8cc_1a927694c350b26693c65f7c8b73b3dba3">n</link>]&#32;=&#32;&#32;&#32;<link linkend="_classVector">Vector&lt;V, I&gt;</link>(currentBranch,1);&#32;&#32;
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;the&#32;next&#32;number&#32;of&#32;columns</emphasis>
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentBranch&#32;+=&#32;(typ&#32;-&#32;1);
47 &#32;&#32;&#32;&#32;}
48 }
</programlisting>    </section><anchor xml:id="_classLattice_1ac6b6d97ee0948d2c7cd7b76366ef8579"/>    <section>
    <title>Lattice()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>Lattice</primary><secondary>Lattice&lt; V, I, NumberNodes &gt;</secondary></indexterm>
<indexterm><primary>Lattice&lt; V, I, NumberNodes &gt;</primary><secondary>Lattice</secondary></indexterm>
<computeroutput>template&lt;class V, class I, int NumberNodes&gt; </computeroutput><para><computeroutput><link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt;::<link linkend="_classLattice">Lattice</link> (const I &amp; Nrows, const V &amp; val)</computeroutput></para><para>
Definition at line 50 of file Lattice.cc.</para>
<programlisting>51 {&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;rows&#32;and&#32;branch&#32;factor</emphasis>
52 &#32;&#32;&#32;&#32;nrows&#32;=&#32;Nrows;
53 &#32;&#32;&#32;&#32;typ&#32;=&#32;NumberNodes;
54 &#32;&#32;&#32;&#32;tree&#32;=&#32;<link linkend="_classArray">Array&lt;Vector&lt;V, I&gt;</link>,&#32;I&gt;&#32;(nrows&#32;+&#32;1,&#32;1);&#32;<emphasis role="comment">//&#32;Start&#32;index&#32;==&#32;1</emphasis>
55 &#32;&#32;&#32;&#32;I&#32;currentBranch&#32;=&#32;1;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;There&#32;is&#32;always&#32;one&#32;single&#32;root</emphasis>
56 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialise&#32;tree&#32;vectors&#32;(give&#32;sizes&#32;of&#32;vectors)</emphasis>
57 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_TestImpliedVolatility_8cc_1a927694c350b26693c65f7c8b73b3dba3">n</link>&#32;=&#32;tree.<link linkend="_classArray_1acffe058a1dd631b05fb71a83e27b445a">MinIndex</link>();&#32;<link linkend="_TestImpliedVolatility_8cc_1a927694c350b26693c65f7c8b73b3dba3">n</link>&#32;&lt;=&#32;tree.<link linkend="_classArray_1a8ce7791cd1ec7ba63ec71772a7144965">MaxIndex</link>();&#32;<link linkend="_TestImpliedVolatility_8cc_1a927694c350b26693c65f7c8b73b3dba3">n</link>++)
58 &#32;&#32;&#32;&#32;{
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tree[<link linkend="_TestImpliedVolatility_8cc_1a927694c350b26693c65f7c8b73b3dba3">n</link>]&#32;=&#32;&#32;&#32;<link linkend="_classVector">Vector&lt;V, I&gt;</link>(currentBranch,&#32;1,&#32;val);&#32;&#32;&#32;&#32;
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;the&#32;next&#32;number&#32;of&#32;columns</emphasis>
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentBranch&#32;+=&#32;(typ&#32;-&#32;1);
62 &#32;&#32;&#32;&#32;}
63 }
</programlisting>    </section><anchor xml:id="_classLattice_1a10b13338775f9e191d14d265439d13c0"/>    <section>
    <title>Lattice()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>Lattice</primary><secondary>Lattice&lt; V, I, NumberNodes &gt;</secondary></indexterm>
<indexterm><primary>Lattice&lt; V, I, NumberNodes &gt;</primary><secondary>Lattice</secondary></indexterm>
<computeroutput>template&lt;class V, class I, int NumberNodes&gt; </computeroutput><para><computeroutput><link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt;::<link linkend="_classLattice">Lattice</link> (const <link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt; &amp; source)</computeroutput></para><para>
Definition at line 65 of file Lattice.cc.</para>
<programlisting>66 {&#32;<emphasis role="comment">//&#32;Copy&#32;constructor</emphasis>
67 &#32;&#32;&#32;&#32;tree&#32;=&#32;source.tree;
68 &#32;&#32;&#32;&#32;typ&#32;=&#32;source.typ;
69 &#32;&#32;&#32;&#32;nrows&#32;=&#32;source.nrows;
70 }
</programlisting>    </section><anchor xml:id="_classLattice_1a9625188af2d5da9d88b2f747db907042"/>    <section>
    <title>~Lattice()</title>
<indexterm><primary>~Lattice</primary><secondary>Lattice&lt; V, I, NumberNodes &gt;</secondary></indexterm>
<indexterm><primary>Lattice&lt; V, I, NumberNodes &gt;</primary><secondary>~Lattice</secondary></indexterm>
<computeroutput>template&lt;class V , class I , int NumberNodes&gt; </computeroutput><para><computeroutput><link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt;::~<link linkend="_classLattice">Lattice</link> ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Definition at line 72 of file Lattice.cc.</para>
<programlisting>73 {&#32;<emphasis role="comment">//&#32;Destructor</emphasis>
74 }
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classLattice_1a37afc93f46019f322291307c1bed2e11"/>    <section>
    <title>BasePyramidSize()</title>
<indexterm><primary>BasePyramidSize</primary><secondary>Lattice&lt; V, I, NumberNodes &gt;</secondary></indexterm>
<indexterm><primary>Lattice&lt; V, I, NumberNodes &gt;</primary><secondary>BasePyramidSize</secondary></indexterm>
<computeroutput>template&lt;class V , class I , int NumberNodes&gt; </computeroutput><para><computeroutput>I <link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt;::BasePyramidSize ( ) const</computeroutput></para><para>
Definition at line 125 of file Lattice.cc.</para>
<programlisting>126 {&#32;<emphasis role="comment">//&#32;The&#32;number&#32;of&#32;discrete&#32;points&#32;at&#32;end</emphasis>
127 
128 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;a&#32;sequence</emphasis>
129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1&#32;+&#32;nrows&#32;*(typ&#32;-&#32;1);
130 }
</programlisting>    </section><anchor xml:id="_classLattice_1a0454fa42ebad2e9fbb71e884f3befaf6"/>    <section>
    <title>BasePyramidVector()</title>
<indexterm><primary>BasePyramidVector</primary><secondary>Lattice&lt; V, I, NumberNodes &gt;</secondary></indexterm>
<indexterm><primary>Lattice&lt; V, I, NumberNodes &gt;</primary><secondary>BasePyramidVector</secondary></indexterm>
<computeroutput>template&lt;class V , class I , int NumberNodes&gt; </computeroutput><para><computeroutput><link linkend="_classVector">Vector</link>&lt; V, I &gt; <link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt;::BasePyramidVector ( ) const</computeroutput></para><para>
Definition at line 119 of file Lattice.cc.</para>
<programlisting>120 {
121 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tree[tree.<link linkend="_classArray_1a8ce7791cd1ec7ba63ec71772a7144965">MaxIndex</link>()];
122 }
</programlisting>    </section><anchor xml:id="_classLattice_1a0911d29a485c5e8555b8f25e7589434a"/>    <section>
    <title>Depth()</title>
<indexterm><primary>Depth</primary><secondary>Lattice&lt; V, I, NumberNodes &gt;</secondary></indexterm>
<indexterm><primary>Lattice&lt; V, I, NumberNodes &gt;</primary><secondary>Depth</secondary></indexterm>
<computeroutput>template&lt;class V , class I , int NumberNodes&gt; </computeroutput><para><computeroutput>I <link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt;::Depth ( ) const</computeroutput></para><para>
Definition at line 99 of file Lattice.cc.</para>
<programlisting>100 {&#32;<emphasis role="comment">//&#32;The&#32;(depth)&#32;number&#32;of&#32;rows&#32;in&#32;the&#32;lattice</emphasis>
101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tree.<link linkend="_classArray_1a69342621906b355e8244466f9eeece71">Size</link>();
102 }
</programlisting>    </section><anchor xml:id="_classLattice_1a5cac27496a08f2a14d8e1d65732a4c34"/>    <section>
    <title>MaxIndex()</title>
<indexterm><primary>MaxIndex</primary><secondary>Lattice&lt; V, I, NumberNodes &gt;</secondary></indexterm>
<indexterm><primary>Lattice&lt; V, I, NumberNodes &gt;</primary><secondary>MaxIndex</secondary></indexterm>
<computeroutput>template&lt;class V , class I , int NumberNodes&gt; </computeroutput><para><computeroutput>I <link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt;::MaxIndex ( ) const</computeroutput></para><para>
Definition at line 94 of file Lattice.cc.</para>
<programlisting>95 {&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;maximum&#32;row&#32;index</emphasis>
96 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tree.<link linkend="_classArray_1a8ce7791cd1ec7ba63ec71772a7144965">MaxIndex</link>();
97 }
</programlisting>    </section><anchor xml:id="_classLattice_1a07442df63222c6627f46efc4ae91acf9"/>    <section>
    <title>MinIndex()</title>
<indexterm><primary>MinIndex</primary><secondary>Lattice&lt; V, I, NumberNodes &gt;</secondary></indexterm>
<indexterm><primary>Lattice&lt; V, I, NumberNodes &gt;</primary><secondary>MinIndex</secondary></indexterm>
<computeroutput>template&lt;class V , class I , int NumberNodes&gt; </computeroutput><para><computeroutput>I <link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt;::MinIndex ( ) const</computeroutput></para><para>
Definition at line 89 of file Lattice.cc.</para>
<programlisting>90 {&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;minimum&#32;row&#32;index</emphasis>
91 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tree.<link linkend="_classArray_1acffe058a1dd631b05fb71a83e27b445a">MinIndex</link>();
92 }
</programlisting>    </section><anchor xml:id="_classLattice_1a114af77d5b77fa52ffd28c42f7f97b5f"/>    <section>
    <title>numberNodes()</title>
<indexterm><primary>numberNodes</primary><secondary>Lattice&lt; V, I, NumberNodes &gt;</secondary></indexterm>
<indexterm><primary>Lattice&lt; V, I, NumberNodes &gt;</primary><secondary>numberNodes</secondary></indexterm>
<computeroutput>template&lt;class V , class I , int NumberNodes&gt; </computeroutput><para><computeroutput>I <link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt;::numberNodes ( ) const</computeroutput></para><para>
Definition at line 133 of file Lattice.cc.</para>
<programlisting>134 {&#32;<emphasis role="comment">//&#32;The&#32;number&#32;of&#32;discrete&#32;points&#32;at&#32;end</emphasis>
135 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Summation&#32;(Series)</emphasis>
136 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;tmp2&#32;=&#32;double(nrows&#32;*&#32;(nrows&#32;+&#32;1))&#32;/&#32;2.0;
137 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1&#32;+&#32;nrows&#32;+&#32;(typ&#32;-1&#32;)&#32;*&#32;I(tmp2);
138 }
</programlisting>    </section><anchor xml:id="_classLattice_1a135fdd0475ed6105b3367d507681a404"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>Lattice&lt; V, I, NumberNodes &gt;</secondary></indexterm>
<indexterm><primary>Lattice&lt; V, I, NumberNodes &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;class V, class I, int NumberNodes&gt; </computeroutput><para><computeroutput><link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt; &amp; <link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt;::operator= (const <link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt; &amp; source)</computeroutput></para><para>
Definition at line 77 of file Lattice.cc.</para>
<programlisting>78 {
79 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;==&#32;&amp;source)
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
81 &#32;&#32;&#32;&#32;tree&#32;=&#32;source.tree;
82 &#32;&#32;&#32;&#32;typ&#32;=&#32;source.typ;
83 &#32;&#32;&#32;&#32;nrows&#32;=&#32;source.nrows;
84 
85 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
86 }
</programlisting>    </section><anchor xml:id="_classLattice_1ab444412f2030b7594d611c1f7429a953"/>    <section>
    <title>operator[]()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>Lattice&lt; V, I, NumberNodes &gt;</secondary></indexterm>
<indexterm><primary>Lattice&lt; V, I, NumberNodes &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;class V , class I, int NumberNodes&gt; </computeroutput><para><computeroutput><link linkend="_classVector">Vector</link>&lt; V, I &gt; &amp; <link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt;::operator[] (const I &amp; nLevel)</computeroutput></para><para>
Definition at line 105 of file Lattice.cc.</para>
<programlisting>106 {&#32;<emphasis role="comment">//&#32;Subscripting&#32;operator</emphasis>
107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tree[nLevel];
108 }
</programlisting>    </section><anchor xml:id="_classLattice_1a25365d1583521fe97c48761f493edaa3"/>    <section>
    <title>operator[]()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>Lattice&lt; V, I, NumberNodes &gt;</secondary></indexterm>
<indexterm><primary>Lattice&lt; V, I, NumberNodes &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;class V , class I, int NumberNodes&gt; </computeroutput><para><computeroutput>const <link linkend="_classVector">Vector</link>&lt; V, I &gt; &amp; <link linkend="_classLattice">Lattice</link>&lt; V, I, NumberNodes &gt;::operator[] (const I &amp; nLevel) const</computeroutput></para><para>
Definition at line 111 of file Lattice.cc.</para>
<programlisting>112 {&#32;<emphasis role="comment">//&#32;Subscripting&#32;operator</emphasis>
113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tree[nLevel];
114 }
</programlisting></section>
<para>
The documentation for this class was generated from the following files:</para>
include/duffy/<link linkend="_Lattice_8hh">Lattice.hh</link>src/<link linkend="_Lattice_8cc">Lattice.cc</link></section>
</section>
