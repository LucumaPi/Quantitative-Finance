<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classPoint">
<title>Point&lt; TFirst, TSecond &gt; Class Template Reference</title>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;Point.hh&gt;</computeroutput>
</para>
Inheritance diagram for Point&lt; TFirst, TSecond &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classPoint__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for Point&lt; TFirst, TSecond &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classPoint__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classPoint_1a57f56baef4e1d60e9acc406e9518a46f">Point</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classPoint_1a6c470002a96651bb2a827ed96b51c0f4">Point</link> (double xval, double yval)</para>
</listitem>
            <listitem><para><link linkend="_classPoint_1a1ae1fb6acde310372422bcfabca92699">Point</link> (const <link linkend="_classPoint">Point</link> &amp;pt)</para>
</listitem>
            <listitem><para><link linkend="_classPoint_1a5cd97348ecafa3c4e1b14ecc7b26e8fb">~Point</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_classPoint_1ae86421f3b20ffcf813e2736002e68459">X</link> () const</para>
</listitem>
            <listitem><para>double <link linkend="_classPoint_1acf30b6ce56dedcb14c62a6dd9a3aa1a3">Y</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_classPoint_1aaffcde0e05536e3466c7ffaa7a2b8695">X</link> (double NewX)</para>
</listitem>
            <listitem><para>void <link linkend="_classPoint_1a2e8cb9e4552ef76f934c27332041b725">Y</link> (double NewY)</para>
</listitem>
            <listitem><para><link linkend="_classPoint">Point</link> <link linkend="_classPoint_1ace5417e9c7c096207f6a961a3e5d934b">add</link> (const <link linkend="_classPoint">Point</link> &amp;p) const</para>
</listitem>
            <listitem><para><link linkend="_classPoint">Point</link> <link linkend="_classPoint_1ab599c8b9cc0315afd122c1303d786979">subtract</link> (const <link linkend="_classPoint">Point</link> &amp;p) const</para>
</listitem>
            <listitem><para><link linkend="_classPoint">Point</link> <link linkend="_classPoint_1ab14cfba1ab1db73e5c288648202c27f8">scale</link> (const <link linkend="_classPoint">Point</link> &amp;pt) const</para>
</listitem>
            <listitem><para><link linkend="_classPoint">Point</link> <link linkend="_classPoint_1a58fd5b2bb9af8cf2bf978dfdeb8794d9">MidPoint</link> (const <link linkend="_classPoint">Point</link> &amp;pt) const</para>
</listitem>
            <listitem><para><link linkend="_classPoint">Point</link> &amp; <link linkend="_classPoint_1a65836dce3480e8aef074fe53f9f8014b">copy</link> (const <link linkend="_classPoint">Point</link> &amp;p)</para>
</listitem>
            <listitem><para><link linkend="_classPoint_1a57f56baef4e1d60e9acc406e9518a46f">Point</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classPoint_1aaf5ab513dccf402fcf8cff271c6def5f">Point</link> (double xs, double ys)</para>
</listitem>
            <listitem><para><link linkend="_classPoint_1a9a399cb00d25fad8fa59ebab360aac1d">Point</link> (const <link linkend="_classPoint">Point</link> &amp;source)</para>
</listitem>
            <listitem><para>virtual <link linkend="_classPoint_1a0c7d4a7fc6ea4e6b50de49978969a15c">~Point</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_classPoint_1ae86421f3b20ffcf813e2736002e68459">X</link> () const</para>
</listitem>
            <listitem><para>double <link linkend="_classPoint_1acf30b6ce56dedcb14c62a6dd9a3aa1a3">Y</link> () const</para>
</listitem>
            <listitem><para>double <link linkend="_classPoint_1a157aafa697fc65028517c431b6c313a2">Distance</link> (const <link linkend="_classPoint">Point</link> &amp;p2) const</para>
</listitem>
            <listitem><para><link linkend="_classPoint">Point</link> <link linkend="_classPoint_1ab477a524fa807da0d2fc20bda41ff706">MidPoint</link> (const <link linkend="_classPoint">Point</link> &amp;p2) const</para>
</listitem>
            <listitem><para>void <link linkend="_classPoint_1aaffcde0e05536e3466c7ffaa7a2b8695">X</link> (double NewX)</para>
</listitem>
            <listitem><para>void <link linkend="_classPoint_1a2e8cb9e4552ef76f934c27332041b725">Y</link> (double NewY)</para>
</listitem>
            <listitem><para>bool <link linkend="_classPoint_1ac204c4a57ef1d620666cfbaf5e967f0d">operator==</link> (const <link linkend="_classPoint">Point</link> &amp;p2) const</para>
</listitem>
            <listitem><para>bool <link linkend="_classPoint_1a3cc59c4ce2d44dc04314e499e7851509">operator!=</link> (const <link linkend="_classPoint">Point</link> &amp;p2) const</para>
</listitem>
            <listitem><para><link linkend="_classPoint">Point</link> &amp; <link linkend="_classPoint_1adc5027a0b925b795c504ac45be9806bb">operator=</link> (const <link linkend="_classPoint">Point</link> &amp;source)</para>
</listitem>
            <listitem><para><link linkend="_classPoint_1a57f56baef4e1d60e9acc406e9518a46f">Point</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classPoint_1a687ea62e55fe6ec8387252fcf822dad8">Point</link> (TFirst first, TSecond second)</para>
</listitem>
            <listitem><para><link linkend="_classPoint_1a5f1422f0121e32ac7c5b080c38d00f08">Point</link> (const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp;source)</para>
</listitem>
            <listitem><para>virtual <link linkend="_classPoint_1a0c7d4a7fc6ea4e6b50de49978969a15c">~Point</link> ()</para>
</listitem>
            <listitem><para>TFirst <link linkend="_classPoint_1aae25ce13a220b16b0d83ddbd8f3b6eb5">First</link> () const</para>
</listitem>
            <listitem><para>TSecond <link linkend="_classPoint_1ae1468ca451216c3341e2b74b5811f30b">Second</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_classPoint_1a0d070aa1d147e36f23afabc9a16a54ec">First</link> (const TFirst &amp;val)</para>
</listitem>
            <listitem><para>void <link linkend="_classPoint_1a9303ca8f1f1cd6a123e9e744004f0565">Second</link> (const TSecond &amp;val)</para>
</listitem>
            <listitem><para>double <link linkend="_classPoint_1ac3fbfb668df602c7585199000513fae9">Distance</link> (const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp;p) const</para>
</listitem>
            <listitem><para><link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp; <link linkend="_classPoint_1ad48f8a5c006c404aef9fa0344b98d5a7">operator=</link> (const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp;source)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>std::ostream &amp; <link linkend="_classPoint_1af7fcde453ce1606ffbd55663c2048573">operator&lt;&lt;</link> (std::ostream &amp;os, const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp;p)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;class TFirst, class TSecond&gt;
class Point&lt; TFirst, TSecond &gt;</title></simplesect>

<para>
Definition at line 19 of file Point.hh.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classPoint_1a57f56baef4e1d60e9acc406e9518a46f"/>    <section>
    <title>Point()<computeroutput>[1/9]</computeroutput></title>
<indexterm><primary>Point</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>Point</secondary></indexterm>
<computeroutput>template&lt;class TFirst , class TSecond &gt; </computeroutput><para><computeroutput><link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::<link linkend="_classPoint">Point</link> ( )</computeroutput></para><para>
Definition at line 25 of file Point.cc.</para>
<programlisting>26 {<emphasis role="comment">//&#32;Default&#32;constructor</emphasis>
27 &#32;&#32;&#32;&#32;init(0.0,&#32;0.0);
28 }
</programlisting>    </section><anchor xml:id="_classPoint_1a6c470002a96651bb2a827ed96b51c0f4"/>    <section>
    <title>Point()<computeroutput>[2/9]</computeroutput></title>
<indexterm><primary>Point</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>Point</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput><link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::<link linkend="_classPoint">Point</link> (double xval, double yval)</computeroutput></para><para>
Definition at line 30 of file Point.cc.</para>
<programlisting>31 {<emphasis role="comment">//&#32;Initialize&#32;using&#32;newx&#32;and&#32;newy</emphasis>
32 &#32;&#32;&#32;&#32;init(newx,&#32;newy);
33 }
</programlisting>    </section><anchor xml:id="_classPoint_1a1ae1fb6acde310372422bcfabca92699"/>    <section>
    <title>Point()<computeroutput>[3/9]</computeroutput></title>
<indexterm><primary>Point</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>Point</secondary></indexterm>
<computeroutput>template&lt;class TFirst , class TSecond &gt; </computeroutput><para><computeroutput><link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::<link linkend="_classPoint">Point</link> (const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp; pt)</computeroutput></para><para>
Definition at line 43 of file Point.cc.</para>
<programlisting>44 {<emphasis role="comment">//&#32;Copy&#32;constructor</emphasis>
45 &#32;&#32;&#32;&#32;x&#32;=&#32;pt.x;
46 &#32;&#32;&#32;&#32;y&#32;=&#32;pt.y;
47 }
</programlisting>    </section><anchor xml:id="_classPoint_1a5cd97348ecafa3c4e1b14ecc7b26e8fb"/>    <section>
    <title>~Point()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>~Point</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>~Point</secondary></indexterm>
<computeroutput>template&lt;class TFirst , class TSecond &gt; </computeroutput><para><computeroutput><link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::~<link linkend="_classPoint">Point</link> ( )</computeroutput></para><para>
Definition at line 49 of file Point.cc.</para>
<programlisting>50 {
51 }
</programlisting>    </section><anchor xml:id="_classPoint_1a57f56baef4e1d60e9acc406e9518a46f"/>    <section>
    <title>Point()<computeroutput>[4/9]</computeroutput></title>
<indexterm><primary>Point</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>Point</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput><link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::<link linkend="_classPoint">Point</link> ( )</computeroutput></para>    </section><anchor xml:id="_classPoint_1aaf5ab513dccf402fcf8cff271c6def5f"/>    <section>
    <title>Point()<computeroutput>[5/9]</computeroutput></title>
<indexterm><primary>Point</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>Point</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput><link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::<link linkend="_classPoint">Point</link> (double xs, double ys)</computeroutput></para>    </section><anchor xml:id="_classPoint_1a9a399cb00d25fad8fa59ebab360aac1d"/>    <section>
    <title>Point()<computeroutput>[6/9]</computeroutput></title>
<indexterm><primary>Point</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>Point</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput><link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::<link linkend="_classPoint">Point</link> (const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp; source)</computeroutput></para>    </section><anchor xml:id="_classPoint_1a0c7d4a7fc6ea4e6b50de49978969a15c"/>    <section>
    <title>~Point()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>~Point</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>~Point</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput>virtual <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::~<link linkend="_classPoint">Point</link> ( )<computeroutput>[virtual]</computeroutput></computeroutput></para>    </section><anchor xml:id="_classPoint_1a57f56baef4e1d60e9acc406e9518a46f"/>    <section>
    <title>Point()<computeroutput>[7/9]</computeroutput></title>
<indexterm><primary>Point</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>Point</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput><link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::<link linkend="_classPoint">Point</link> ( )</computeroutput></para>    </section><anchor xml:id="_classPoint_1a687ea62e55fe6ec8387252fcf822dad8"/>    <section>
    <title>Point()<computeroutput>[8/9]</computeroutput></title>
<indexterm><primary>Point</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>Point</secondary></indexterm>
<computeroutput>template&lt;class TFirst , class TSecond &gt; </computeroutput><para><computeroutput><link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::<link linkend="_classPoint">Point</link> (TFirst first, TSecond second)</computeroutput></para><para>
Definition at line 29 of file PointTemplate.cc.</para>
<programlisting>30 {
31 &#32;&#32;&#32;&#32;m_first&#32;=&#32;<link linkend="_namespaceDatasimFunctions_1af51cb9dc97654b194cd73ea7340591f1">first</link>;
32 &#32;&#32;&#32;&#32;m_second&#32;=&#32;<link linkend="_namespaceDatasimFunctions_1a1619972125d80d0f434b543acca662e6">second</link>;
33 }
</programlisting>    </section><anchor xml:id="_classPoint_1a5f1422f0121e32ac7c5b080c38d00f08"/>    <section>
    <title>Point()<computeroutput>[9/9]</computeroutput></title>
<indexterm><primary>Point</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>Point</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput><link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::<link linkend="_classPoint">Point</link> (const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp; source)</computeroutput></para>    </section><anchor xml:id="_classPoint_1a0c7d4a7fc6ea4e6b50de49978969a15c"/>    <section>
    <title>~Point()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>~Point</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>~Point</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput>virtual <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::~<link linkend="_classPoint">Point</link> ( )<computeroutput>[virtual]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classPoint_1ace5417e9c7c096207f6a961a3e5d934b"/>    <section>
    <title>add()</title>
<indexterm><primary>add</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>add</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput><link linkend="_classPoint">Point</link> <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::add (const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp; p) const</computeroutput></para><para>
Definition at line 75 of file Point.cc.</para>
<programlisting>76 {
77 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classPoint_1a57f56baef4e1d60e9acc406e9518a46f">Point</link>(x&#32;+&#32;p.x,&#32;y&#32;+&#32;p.y);
78 }
</programlisting>    </section><anchor xml:id="_classPoint_1a65836dce3480e8aef074fe53f9f8014b"/>    <section>
    <title>copy()</title>
<indexterm><primary>copy</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>copy</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput><link linkend="_classPoint">Point</link> &amp; <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::copy (const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp; p)</computeroutput></para><para>
Definition at line 100 of file Point.cc.</para>
<programlisting>101 {<emphasis role="comment">//&#32;Copy&#32;p&#32;in&#32;current</emphasis>
102 &#32;&#32;&#32;&#32;x&#32;=&#32;p.x;
103 &#32;&#32;&#32;&#32;y&#32;=&#32;p.y;
104 
105 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
106 }
</programlisting>    </section><anchor xml:id="_classPoint_1a157aafa697fc65028517c431b6c313a2"/>    <section>
    <title>Distance()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Distance</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>Distance</secondary></indexterm>
<computeroutput>template&lt;class TFirst , class TSecond &gt; </computeroutput><para><computeroutput>double <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::Distance (const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp; p2) const</computeroutput></para><para>
Definition at line 58 of file PointNew.cc.</para>
<programlisting>59 {&#32;<emphasis role="comment">//&#32;Calculate&#32;distance&#32;between&#32;this&#32;point&#32;and&#32;second&#32;point&#32;</emphasis>
60 &#32;&#32;<emphasis role="comment">//&#32;To&#32;compute&#32;this,&#32;the&#32;law&#32;of&#32;Pythagoras&#32;is&#32;used:&#32;sqrt(dx^2&#32;+&#32;dy^2)</emphasis>
61 
62 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;coordinates&#32;are&#32;equal,&#32;return&#32;distance&#32;of&#32;0.0&#32;</emphasis>
63 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*<emphasis role="keyword">this</emphasis>)==p2)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0.0;&#32;&#32;&#32;
64 
65 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Difference&#32;in&#32;x&#32;direction</emphasis>
66 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dif_x&#32;=&#32;(x&#32;-&#32;p2.x);&#32;&#32;
67 
68 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Difference&#32;in&#32;y&#32;direction&#32;</emphasis>
69 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dif_y&#32;=&#32;(y&#32;-&#32;p2.y);&#32;&#32;
70 
71 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;squares&#32;of&#32;coordinates</emphasis>
72 &#32;&#32;&#32;&#32;dif_x&#32;*=&#32;dif_x;&#32;&#32;&#32;&#32;&#32;
73 &#32;&#32;&#32;&#32;dif_y&#32;*=&#32;dif_y;
74 
75 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;square&#32;root</emphasis>
76 &#32;&#32;&#32;&#32;return&#32;::sqrt(dif_x&#32;+&#32;dif_y);&#32;
77 }
</programlisting>    </section><anchor xml:id="_classPoint_1ac3fbfb668df602c7585199000513fae9"/>    <section>
    <title>Distance()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Distance</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>Distance</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput>double <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::Distance (const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp; p) const</computeroutput></para>    </section><anchor xml:id="_classPoint_1aae25ce13a220b16b0d83ddbd8f3b6eb5"/>    <section>
    <title>First()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>First</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>First</secondary></indexterm>
<computeroutput>template&lt;class TFirst , class TSecond &gt; </computeroutput><para><computeroutput>TFirst <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::First ( ) const</computeroutput></para><para>
Definition at line 51 of file PointTemplate.cc.</para>
<programlisting>52 {
53 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_first;
54 }
</programlisting>    </section><anchor xml:id="_classPoint_1a0d070aa1d147e36f23afabc9a16a54ec"/>    <section>
    <title>First()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>First</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>First</secondary></indexterm>
<computeroutput>template&lt;class TFirst , class TSecond &gt; </computeroutput><para><computeroutput>void <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::First (const TFirst &amp; val)</computeroutput></para><para>
Definition at line 65 of file PointTemplate.cc.</para>
<programlisting>66 {
67 &#32;&#32;&#32;&#32;m_first&#32;=&#32;val;
68 }
</programlisting>    </section><anchor xml:id="_classPoint_1ab477a524fa807da0d2fc20bda41ff706"/>    <section>
    <title>MidPoint()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>MidPoint</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>MidPoint</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput><link linkend="_classPoint">Point</link> <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::MidPoint (const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp; p2) const</computeroutput></para>    </section><anchor xml:id="_classPoint_1a58fd5b2bb9af8cf2bf978dfdeb8794d9"/>    <section>
    <title>MidPoint()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>MidPoint</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>MidPoint</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput><link linkend="_classPoint">Point</link> <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::MidPoint (const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp; pt) const</computeroutput></para><para>
Definition at line 90 of file Point.cc.</para>
<programlisting>91 {&#32;<emphasis role="comment">//&#32;Scale&#32;a&#32;Point&#32;by&#32;another&#32;Point</emphasis>
92 
93 &#32;&#32;&#32;&#32;<link linkend="_classPoint">Point</link>&#32;result((x&#32;+&#32;p2.x)&#32;*&#32;0.5,&#32;(y&#32;+&#32;p2.y)&#32;*&#32;0.5);
94 
95 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
96 }
</programlisting>    </section><anchor xml:id="_classPoint_1a3cc59c4ce2d44dc04314e499e7851509"/>    <section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput>bool <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::operator!= (const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp; p2) const</computeroutput></para><para>
Definition at line 105 of file PointNew.cc.</para>
<programlisting>106 {&#32;<emphasis role="comment">//&#32;Return&#32;false&#32;if&#32;all&#32;coordinates&#32;are&#32;equal</emphasis>
107 &#32;&#32;&#32;
108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(*<emphasis role="keyword">this</emphasis>==p2);
109 }
</programlisting>    </section><anchor xml:id="_classPoint_1adc5027a0b925b795c504ac45be9806bb"/>    <section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;class TFirst , class TSecond &gt; </computeroutput><para><computeroutput><link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp; <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::operator= (const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp; source)</computeroutput></para><para>
Definition at line 111 of file PointNew.cc.</para>
<programlisting>112 {&#32;<emphasis role="comment">//&#32;Assignment&#32;operator</emphasis>
113 
114 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Exit&#32;if&#32;same&#32;object</emphasis>
115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>==&amp;source)&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
116 
117 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Call&#32;base&#32;class&#32;assignment</emphasis>
118 &#32;&#32;&#32;&#32;<link linkend="_classShape_1afcefeb5c8a6d3b2f7b6426d299eafe02">Shape::operator = </link>(source);
119 
120 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;state</emphasis>
121 &#32;&#32;&#32;&#32;init(source.x,&#32;source.y);&#32;&#32;&#32;&#32;
122 
123 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
124 }
</programlisting>    </section><anchor xml:id="_classPoint_1ad48f8a5c006c404aef9fa0344b98d5a7"/>    <section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput><link linkend="_classPoint">Point</link>&lt;TFirst, TSecond&gt;&amp; <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::operator= (const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp; source)</computeroutput></para>    </section><anchor xml:id="_classPoint_1ac204c4a57ef1d620666cfbaf5e967f0d"/>    <section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput>bool <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::operator== (const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp; p2) const</computeroutput></para><para>
Definition at line 86 of file PointNew.cc.</para>
<programlisting>87 {&#32;<emphasis role="comment">//&#32;Return&#32;true&#32;if&#32;all&#32;coordinates&#32;are&#32;equal</emphasis>
88 
89 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;(x==p2.x)&#32;&amp;&amp;&#32;(y==p2.y)&#32;)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
90 
91 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
92 }
</programlisting>    </section><anchor xml:id="_classPoint_1ab14cfba1ab1db73e5c288648202c27f8"/>    <section>
    <title>scale()</title>
<indexterm><primary>scale</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>scale</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput><link linkend="_classPoint">Point</link> <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::scale (const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp; pt) const</computeroutput></para><para>
Definition at line 85 of file Point.cc.</para>
<programlisting>86 {&#32;<emphasis role="comment">//&#32;Scale&#32;a&#32;Point&#32;by&#32;another&#32;Point</emphasis>
87 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classPoint_1a57f56baef4e1d60e9acc406e9518a46f">Point</link>(x&#32;*&#32;p.x,&#32;y&#32;*&#32;p.y);
88 }
</programlisting>    </section><anchor xml:id="_classPoint_1ae1468ca451216c3341e2b74b5811f30b"/>    <section>
    <title>Second()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Second</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>Second</secondary></indexterm>
<computeroutput>template&lt;class TFirst , class TSecond &gt; </computeroutput><para><computeroutput>TSecond <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::Second ( ) const</computeroutput></para><para>
Definition at line 58 of file PointTemplate.cc.</para>
<programlisting>59 {
60 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_second;
61 }
</programlisting>    </section><anchor xml:id="_classPoint_1a9303ca8f1f1cd6a123e9e744004f0565"/>    <section>
    <title>Second()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Second</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>Second</secondary></indexterm>
<computeroutput>template&lt;class TFirst , class TSecond &gt; </computeroutput><para><computeroutput>void <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::Second (const TSecond &amp; val)</computeroutput></para><para>
Definition at line 72 of file PointTemplate.cc.</para>
<programlisting>73 {
74 &#32;&#32;&#32;&#32;m_second&#32;=&#32;val;
75 }
</programlisting>    </section><anchor xml:id="_classPoint_1ab599c8b9cc0315afd122c1303d786979"/>    <section>
    <title>subtract()</title>
<indexterm><primary>subtract</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>subtract</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput><link linkend="_classPoint">Point</link> <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::subtract (const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp; p) const</computeroutput></para><para>
Definition at line 80 of file Point.cc.</para>
<programlisting>81 {
82 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classPoint_1a57f56baef4e1d60e9acc406e9518a46f">Point</link>(x&#32;-&#32;p.x,&#32;y&#32;-&#32;p.y);
83 }
</programlisting>    </section><anchor xml:id="_classPoint_1ae86421f3b20ffcf813e2736002e68459"/>    <section>
    <title>X()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>X</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>X</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput>double <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::X ( ) const</computeroutput></para>    </section><anchor xml:id="_classPoint_1ae86421f3b20ffcf813e2736002e68459"/>    <section>
    <title>X()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>X</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>X</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput>double <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::X ( ) const</computeroutput></para><para>
Definition at line 53 of file Point.cc.</para>
<programlisting>54 {
55 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;x;
56 }
</programlisting>    </section><anchor xml:id="_classPoint_1aaffcde0e05536e3466c7ffaa7a2b8695"/>    <section>
    <title>X()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>X</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>X</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput>void <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::X (double NewX)</computeroutput></para>    </section><anchor xml:id="_classPoint_1aaffcde0e05536e3466c7ffaa7a2b8695"/>    <section>
    <title>X()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>X</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>X</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput>void <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::X (double NewX)</computeroutput></para><para>
Definition at line 64 of file Point.cc.</para>
<programlisting>65 {
66 &#32;&#32;&#32;&#32;x&#32;=&#32;NewX;
67 }
</programlisting>    </section><anchor xml:id="_classPoint_1acf30b6ce56dedcb14c62a6dd9a3aa1a3"/>    <section>
    <title>Y()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>Y</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>Y</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput>double <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::Y ( ) const</computeroutput></para>    </section><anchor xml:id="_classPoint_1acf30b6ce56dedcb14c62a6dd9a3aa1a3"/>    <section>
    <title>Y()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>Y</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>Y</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput>double <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::Y ( ) const</computeroutput></para><para>
Definition at line 58 of file Point.cc.</para>
<programlisting>59 {
60 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;y;
61 }
</programlisting>    </section><anchor xml:id="_classPoint_1a2e8cb9e4552ef76f934c27332041b725"/>    <section>
    <title>Y()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>Y</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>Y</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput>void <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::Y (double NewY)</computeroutput></para>    </section><anchor xml:id="_classPoint_1a2e8cb9e4552ef76f934c27332041b725"/>    <section>
    <title>Y()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>Y</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>Y</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput>void <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt;::Y (double NewY)</computeroutput></para><para>
Definition at line 69 of file Point.cc.</para>
<programlisting>70 {
71 &#32;&#32;&#32;&#32;y&#32;=&#32;NewY;
72 }
</programlisting></section>
</section>
<section>
<title>Friends And Related Function Documentation</title>
<anchor xml:id="_classPoint_1af7fcde453ce1606ffbd55663c2048573"/>    <section>
    <title>operator&lt;&lt;</title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>Point&lt; TFirst, TSecond &gt;</secondary></indexterm>
<indexterm><primary>Point&lt; TFirst, TSecond &gt;</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;class TFirst, class TSecond&gt; </computeroutput><para><computeroutput>std::ostream&amp; operator&lt;&lt; (std::ostream &amp; os, const <link linkend="_classPoint">Point</link>&lt; TFirst, TSecond &gt; &amp; p)<computeroutput>[friend]</computeroutput></computeroutput></para><para>
Definition at line 43 of file PointTemplate.hh.</para>
<programlisting>44 &#32;&#32;&#32;&#32;{
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;(&quot;</emphasis>&#32;&lt;&lt;&#32;p.m_first&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>&#32;&lt;&lt;&#32;p.m_second&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)\n&quot;</emphasis>;
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
47 &#32;&#32;&#32;&#32;}
</programlisting></section>
<para>
The documentation for this class was generated from the following files:</para>
include/duffy/<link linkend="_Point_8hh">Point.hh</link>include/duffy/<link linkend="_PointNew_8hpp">PointNew.hpp</link>include/duffy/<link linkend="_PointTemplate_8hh">PointTemplate.hh</link>src/<link linkend="_Point_8cc">Point.cc</link>src/<link linkend="_PointNew_8cc">PointNew.cc</link>src/<link linkend="_PointTemplate_8cc">PointTemplate.cc</link></section>
</section>
