<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classShapeComposite">
<title>ShapeComposite Class Reference</title>
<indexterm><primary>ShapeComposite</primary></indexterm>
<para>
<computeroutput>#include &lt;ShapeComposite.hh&gt;</computeroutput>
</para>
Inheritance diagram for ShapeComposite:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classShapeComposite__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for ShapeComposite:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classShapeComposite__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef std::list&lt; <link linkend="_classShape">Shape</link> * &gt;::<link linkend="_classShapeComposite_1af9e9c1a355281895a1a582ce45db998b">iterator</link> <link linkend="_classShapeComposite_1af9e9c1a355281895a1a582ce45db998b">iterator</link></para>
</listitem>
            <listitem><para>typedef std::list&lt; <link linkend="_classShape">Shape</link> * &gt;::<link linkend="_classShapeComposite_1ab1744d2a233353afdbc0020ac59d6088">const_iterator</link> <link linkend="_classShapeComposite_1ab1744d2a233353afdbc0020ac59d6088">const_iterator</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classShapeComposite_1a0de01f9379b68e949ffd417de4223b99">ShapeComposite</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_classShapeComposite_1a5b65cdc46a278eaf75c2f0ed5657c8a4">~ShapeComposite</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classShapeComposite_1af9e9c1a355281895a1a582ce45db998b">iterator</link> <link linkend="_classShapeComposite_1a5b4dc15d4775525d77a589f530aa5de4">Begin</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classShapeComposite_1ab1744d2a233353afdbc0020ac59d6088">const_iterator</link> <link linkend="_classShapeComposite_1a2d7175e34ebd7bec5710efaedb13ab0a">Begin</link> () const</para>
</listitem>
            <listitem><para><link linkend="_classShapeComposite_1af9e9c1a355281895a1a582ce45db998b">iterator</link> <link linkend="_classShapeComposite_1a4522ae048cbccce7acb02aa63c895b34">End</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classShapeComposite_1ab1744d2a233353afdbc0020ac59d6088">const_iterator</link> <link linkend="_classShapeComposite_1abeda8b47f7ac18c50792df5f1b58e349">End</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_classShapeComposite_1a22e3f5dd0f6b0d8a46fe1939dc7e8b9c">Count</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_classShapeComposite_1aa3250855cf09f7fcac7aecad8896fb33">AddFront</link> (<link linkend="_classShape">Shape</link> *s)</para>
</listitem>
            <listitem><para>void <link linkend="_classShapeComposite_1a93eca238803253a4656d3c2a5cbf6ee3">AddBack</link> (<link linkend="_classShape">Shape</link> *s)</para>
</listitem>
            <listitem><para>void <link linkend="_classShapeComposite_1a9eeb99254807e5ed0888f50acd9ac518">RemoveFirst</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classShapeComposite_1a393a9ab6e55ffd9e7292548813bd2238">RemoveLast</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classShapeComposite_1a096d9919195013f77b2da7fc0e4d1cc7">RemoveAll</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classShapeComposite">ShapeComposite</link> &amp; <link linkend="_classShapeComposite_1ae06b35be6295fc99cf1b74e4295227cc">operator=</link> (const <link linkend="_classShapeComposite">ShapeComposite</link> &amp;source)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line 14 of file ShapeComposite.hh.</para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classShapeComposite_1ab1744d2a233353afdbc0020ac59d6088"/>    <section>
    <title>const_iterator</title>
<indexterm><primary>const_iterator</primary><secondary>ShapeComposite</secondary></indexterm>
<indexterm><primary>ShapeComposite</primary><secondary>const_iterator</secondary></indexterm>
<para><computeroutput>typedef std::list&lt;<link linkend="_classShape">Shape</link>*&gt;::<link linkend="_classShapeComposite_1ab1744d2a233353afdbc0020ac59d6088">const_iterator</link> <link linkend="_classShapeComposite_1ab1744d2a233353afdbc0020ac59d6088">ShapeComposite::const_iterator</link></computeroutput></para><para>
Definition at line 25 of file ShapeComposite.hh.</para>
    </section><anchor xml:id="_classShapeComposite_1af9e9c1a355281895a1a582ce45db998b"/>    <section>
    <title>iterator</title>
<indexterm><primary>iterator</primary><secondary>ShapeComposite</secondary></indexterm>
<indexterm><primary>ShapeComposite</primary><secondary>iterator</secondary></indexterm>
<para><computeroutput>typedef std::list&lt;<link linkend="_classShape">Shape</link>*&gt;::<link linkend="_classShapeComposite_1af9e9c1a355281895a1a582ce45db998b">iterator</link> <link linkend="_classShapeComposite_1af9e9c1a355281895a1a582ce45db998b">ShapeComposite::iterator</link></computeroutput></para><para>
Definition at line 24 of file ShapeComposite.hh.</para>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classShapeComposite_1a0de01f9379b68e949ffd417de4223b99"/>    <section>
    <title>ShapeComposite()</title>
<indexterm><primary>ShapeComposite</primary><secondary>ShapeComposite</secondary></indexterm>
<indexterm><primary>ShapeComposite</primary><secondary>ShapeComposite</secondary></indexterm>
<para><computeroutput>ShapeComposite::ShapeComposite ( )</computeroutput></para><para>
Definition at line 12 of file ShapeComposite.cc.</para>
<programlisting>12 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classShape_1aaa8d87171e65e0d8ba3c5459978992a7">Shape</link>()
13 {&#32;<emphasis role="comment">//&#32;Default&#32;constructor</emphasis>
14 
15 &#32;&#32;&#32;&#32;sl=std::list&lt;Shape*&gt;();
16 }
</programlisting>    </section><anchor xml:id="_classShapeComposite_1a5b65cdc46a278eaf75c2f0ed5657c8a4"/>    <section>
    <title>~ShapeComposite()</title>
<indexterm><primary>~ShapeComposite</primary><secondary>ShapeComposite</secondary></indexterm>
<indexterm><primary>ShapeComposite</primary><secondary>~ShapeComposite</secondary></indexterm>
<para><computeroutput>ShapeComposite::~ShapeComposite ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Definition at line 19 of file ShapeComposite.cc.</para>
<programlisting>20 {&#32;<emphasis role="comment">//&#32;Destructor</emphasis>
21 
22 &#32;&#32;&#32;&#32;<link linkend="_classShapeComposite_1a096d9919195013f77b2da7fc0e4d1cc7">RemoveAll</link>();
23 }
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classShapeComposite_1a93eca238803253a4656d3c2a5cbf6ee3"/>    <section>
    <title>AddBack()</title>
<indexterm><primary>AddBack</primary><secondary>ShapeComposite</secondary></indexterm>
<indexterm><primary>ShapeComposite</primary><secondary>AddBack</secondary></indexterm>
<para><computeroutput>void ShapeComposite::AddBack (<link linkend="_classShape">Shape</link> * s)</computeroutput></para><para>
Definition at line 64 of file ShapeComposite.cc.</para>
<programlisting>65 {&#32;<emphasis role="comment">//&#32;Add&#32;shape&#32;at&#32;the&#32;end&#32;of&#32;shapelist.&#32;No&#32;copy&#32;is&#32;made.</emphasis>
66 
67 &#32;&#32;&#32;&#32;sl.push_back(s);
68 }
</programlisting>    </section><anchor xml:id="_classShapeComposite_1aa3250855cf09f7fcac7aecad8896fb33"/>    <section>
    <title>AddFront()</title>
<indexterm><primary>AddFront</primary><secondary>ShapeComposite</secondary></indexterm>
<indexterm><primary>ShapeComposite</primary><secondary>AddFront</secondary></indexterm>
<para><computeroutput>void ShapeComposite::AddFront (<link linkend="_classShape">Shape</link> * s)</computeroutput></para><para>
Definition at line 58 of file ShapeComposite.cc.</para>
<programlisting>59 {&#32;<emphasis role="comment">//&#32;Add&#32;shape&#32;at&#32;the&#32;beginning&#32;of&#32;shapelist.&#32;No&#32;copy&#32;is&#32;made.</emphasis>
60 
61 &#32;&#32;&#32;&#32;sl.push_front(s);
62 }
</programlisting>    </section><anchor xml:id="_classShapeComposite_1a5b4dc15d4775525d77a589f530aa5de4"/>    <section>
    <title>Begin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Begin</primary><secondary>ShapeComposite</secondary></indexterm>
<indexterm><primary>ShapeComposite</primary><secondary>Begin</secondary></indexterm>
<para><computeroutput><link linkend="_classShapeComposite_1af9e9c1a355281895a1a582ce45db998b">ShapeComposite::iterator</link> ShapeComposite::Begin ( )</computeroutput></para><para>
Definition at line 26 of file ShapeComposite.cc.</para>
<programlisting>27 {&#32;<emphasis role="comment">//&#32;Return&#32;iterator&#32;at&#32;begin&#32;of&#32;composite</emphasis>
28 
29 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sl.begin();
30 }
</programlisting>    </section><anchor xml:id="_classShapeComposite_1a2d7175e34ebd7bec5710efaedb13ab0a"/>    <section>
    <title>Begin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Begin</primary><secondary>ShapeComposite</secondary></indexterm>
<indexterm><primary>ShapeComposite</primary><secondary>Begin</secondary></indexterm>
<para><computeroutput><link linkend="_classShapeComposite_1ab1744d2a233353afdbc0020ac59d6088">ShapeComposite::const_iterator</link> ShapeComposite::Begin ( ) const</computeroutput></para><para>
Definition at line 32 of file ShapeComposite.cc.</para>
<programlisting>33 {&#32;<emphasis role="comment">//&#32;Return&#32;const&#32;iterator&#32;at&#32;begin&#32;of&#32;composite</emphasis>
34 
35 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sl.begin();
36 }
</programlisting>    </section><anchor xml:id="_classShapeComposite_1a22e3f5dd0f6b0d8a46fe1939dc7e8b9c"/>    <section>
    <title>Count()</title>
<indexterm><primary>Count</primary><secondary>ShapeComposite</secondary></indexterm>
<indexterm><primary>ShapeComposite</primary><secondary>Count</secondary></indexterm>
<para><computeroutput>int ShapeComposite::Count ( ) const</computeroutput></para><para>
Definition at line 51 of file ShapeComposite.cc.</para>
<programlisting>52 {&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;number&#32;of&#32;shapes&#32;in&#32;the&#32;composite</emphasis>
53 
54 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sl.size();
55 }
</programlisting>    </section><anchor xml:id="_classShapeComposite_1a4522ae048cbccce7acb02aa63c895b34"/>    <section>
    <title>End()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>End</primary><secondary>ShapeComposite</secondary></indexterm>
<indexterm><primary>ShapeComposite</primary><secondary>End</secondary></indexterm>
<para><computeroutput><link linkend="_classShapeComposite_1af9e9c1a355281895a1a582ce45db998b">ShapeComposite::iterator</link> ShapeComposite::End ( )</computeroutput></para><para>
Definition at line 38 of file ShapeComposite.cc.</para>
<programlisting>39 {&#32;<emphasis role="comment">//&#32;Return&#32;iterator&#32;after&#32;end&#32;of&#32;composite</emphasis>
40 
41 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sl.end();
42 }
</programlisting>    </section><anchor xml:id="_classShapeComposite_1abeda8b47f7ac18c50792df5f1b58e349"/>    <section>
    <title>End()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>End</primary><secondary>ShapeComposite</secondary></indexterm>
<indexterm><primary>ShapeComposite</primary><secondary>End</secondary></indexterm>
<para><computeroutput><link linkend="_classShapeComposite_1ab1744d2a233353afdbc0020ac59d6088">ShapeComposite::const_iterator</link> ShapeComposite::End ( ) const</computeroutput></para><para>
Definition at line 44 of file ShapeComposite.cc.</para>
<programlisting>45 {&#32;<emphasis role="comment">//&#32;Return&#32;const&#32;iterator&#32;after&#32;end&#32;of&#32;composite</emphasis>
46 
47 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sl.end();
48 }
</programlisting>    </section><anchor xml:id="_classShapeComposite_1ae06b35be6295fc99cf1b74e4295227cc"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>ShapeComposite</secondary></indexterm>
<indexterm><primary>ShapeComposite</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classShapeComposite">ShapeComposite</link>&amp; ShapeComposite::operator= (const <link linkend="_classShapeComposite">ShapeComposite</link> &amp; source)</computeroutput></para>    </section><anchor xml:id="_classShapeComposite_1a096d9919195013f77b2da7fc0e4d1cc7"/>    <section>
    <title>RemoveAll()</title>
<indexterm><primary>RemoveAll</primary><secondary>ShapeComposite</secondary></indexterm>
<indexterm><primary>ShapeComposite</primary><secondary>RemoveAll</secondary></indexterm>
<para><computeroutput>void ShapeComposite::RemoveAll ( )</computeroutput></para><para>
Definition at line 85 of file ShapeComposite.cc.</para>
<programlisting>86 {&#32;<emphasis role="comment">//&#32;Remove&#32;all&#32;shapes&#32;from&#32;the&#32;list</emphasis>
87 
88 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;STL&#32;list&#32;iterator</emphasis>
89 &#32;&#32;&#32;&#32;std::list&lt;Shape*&gt;::iterator&#32;it;
90 
91 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(it=sl.begin();&#32;it!=sl.end();&#32;it++)
92 &#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Delete&#32;every&#32;shape&#32;in&#32;the&#32;list</emphasis>
93 
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;(*it);&#32;&#32;&#32;<emphasis role="comment">//&#32;Delete&#32;shape</emphasis>
95 &#32;&#32;&#32;&#32;}
96 
97 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Remove&#32;the&#32;shape&#32;pointers&#32;from&#32;the&#32;list</emphasis>
98 &#32;&#32;&#32;&#32;sl.clear();
99 }
</programlisting>    </section><anchor xml:id="_classShapeComposite_1a9eeb99254807e5ed0888f50acd9ac518"/>    <section>
    <title>RemoveFirst()</title>
<indexterm><primary>RemoveFirst</primary><secondary>ShapeComposite</secondary></indexterm>
<indexterm><primary>ShapeComposite</primary><secondary>RemoveFirst</secondary></indexterm>
<para><computeroutput>void ShapeComposite::RemoveFirst ( )</computeroutput></para><para>
Definition at line 78 of file ShapeComposite.cc.</para>
<programlisting>79 {&#32;<emphasis role="comment">//&#32;Remove&#32;first&#32;shape</emphasis>
80 
81 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;sl.front();&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Delete&#32;the&#32;shape</emphasis>
82 &#32;&#32;&#32;&#32;sl.pop_front();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Remove&#32;shape&#32;pointer&#32;from&#32;list</emphasis>
83 }
</programlisting>    </section><anchor xml:id="_classShapeComposite_1a393a9ab6e55ffd9e7292548813bd2238"/>    <section>
    <title>RemoveLast()</title>
<indexterm><primary>RemoveLast</primary><secondary>ShapeComposite</secondary></indexterm>
<indexterm><primary>ShapeComposite</primary><secondary>RemoveLast</secondary></indexterm>
<para><computeroutput>void ShapeComposite::RemoveLast ( )</computeroutput></para><para>
Definition at line 71 of file ShapeComposite.cc.</para>
<programlisting>72 {&#32;<emphasis role="comment">//&#32;Remove&#32;last&#32;shape</emphasis>
73 
74 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;sl.back();&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Delete&#32;the&#32;shape</emphasis>
75 &#32;&#32;&#32;&#32;sl.pop_back();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Remove&#32;shape&#32;pointer&#32;from&#32;list</emphasis>
76 }
</programlisting></section>
<para>
The documentation for this class was generated from the following files:</para>
include/duffy/<link linkend="_ShapeComposite_8hh">ShapeComposite.hh</link>src/<link linkend="_ShapeComposite_8cc">ShapeComposite.cc</link></section>
</section>
